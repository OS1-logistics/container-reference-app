/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EventDataItem struct for EventDataItem
type EventDataItem struct {
	// Name of validation keys of an event.
	Name string `json:"name"`
	Type *EventDataType `json:"type,omitempty"`
	Validation *EventDataValidation `json:"validation,omitempty"`
}

// NewEventDataItem instantiates a new EventDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDataItem(name string) *EventDataItem {
	this := EventDataItem{}
	this.Name = name
	return &this
}

// NewEventDataItemWithDefaults instantiates a new EventDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataItemWithDefaults() *EventDataItem {
	this := EventDataItem{}
	return &this
}

// GetName returns the Name field value
func (o *EventDataItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventDataItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventDataItem) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventDataItem) GetType() EventDataType {
	if o == nil || o.Type == nil {
		var ret EventDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataItem) GetTypeOk() (*EventDataType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventDataItem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given EventDataType and assigns it to the Type field.
func (o *EventDataItem) SetType(v EventDataType) {
	o.Type = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *EventDataItem) GetValidation() EventDataValidation {
	if o == nil || o.Validation == nil {
		var ret EventDataValidation
		return ret
	}
	return *o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataItem) GetValidationOk() (*EventDataValidation, bool) {
	if o == nil || o.Validation == nil {
		return nil, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *EventDataItem) HasValidation() bool {
	if o != nil && o.Validation != nil {
		return true
	}

	return false
}

// SetValidation gets a reference to the given EventDataValidation and assigns it to the Validation field.
func (o *EventDataItem) SetValidation(v EventDataValidation) {
	o.Validation = &v
}

func (o EventDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Validation != nil {
		toSerialize["validation"] = o.Validation
	}
	return json.Marshal(toSerialize)
}

type NullableEventDataItem struct {
	value *EventDataItem
	isSet bool
}

func (v NullableEventDataItem) Get() *EventDataItem {
	return v.value
}

func (v *NullableEventDataItem) Set(val *EventDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataItem(val *EventDataItem) *NullableEventDataItem {
	return &NullableEventDataItem{value: val, isSet: true}
}

func (v NullableEventDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


