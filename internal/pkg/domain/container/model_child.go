/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
	"fmt"
)

// Child Specifies this request perform containerization or decontainerization.
type Child string

// List of Child
const (
	CHILD_CONTAINERIZE Child = "CONTAINERIZE"
	CHILD_DECONTAINERIZE Child = "DECONTAINERIZE"
)

// All allowed values of Child enum
var AllowedChildEnumValues = []Child{
	"CONTAINERIZE",
	"DECONTAINERIZE",
}

func (v *Child) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Child(value)
	for _, existing := range AllowedChildEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Child", value)
}

// NewChildFromValue returns a pointer to a valid Child
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChildFromValue(v string) (*Child, error) {
	ev := Child(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Child: valid values are %v", v, AllowedChildEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Child) IsValid() bool {
	for _, existing := range AllowedChildEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Child value
func (v Child) Ptr() *Child {
	return &v
}

type NullableChild struct {
	value *Child
	isSet bool
}

func (v NullableChild) Get() *Child {
	return v.value
}

func (v *NullableChild) Set(val *Child) {
	v.value = val
	v.isSet = true
}

func (v NullableChild) IsSet() bool {
	return v.isSet
}

func (v *NullableChild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChild(val *Child) *NullableChild {
	return &NullableChild{value: val, isSet: true}
}

func (v NullableChild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

