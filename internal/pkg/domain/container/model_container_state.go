/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerState struct for ContainerState
type ContainerState struct {
	Id *string `json:"id,omitempty"`
	// Represents state of the container.The value will of the format <state>:<substate>
	State *string `json:"state,omitempty"`
	Event *Event `json:"event,omitempty"`
	// Describes if the state is changed.
	StateChange *bool `json:"stateChange,omitempty"`
	// Describes terminal ttl if the state is a terminal state
	TerminalTtl *int32 `json:"terminalTtl,omitempty"`
}

// NewContainerState instantiates a new ContainerState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerState() *ContainerState {
	this := ContainerState{}
	return &this
}

// NewContainerStateWithDefaults instantiates a new ContainerState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerStateWithDefaults() *ContainerState {
	this := ContainerState{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContainerState) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContainerState) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContainerState) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ContainerState) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ContainerState) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ContainerState) SetState(v string) {
	o.State = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *ContainerState) GetEvent() Event {
	if o == nil || o.Event == nil {
		var ret Event
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetEventOk() (*Event, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *ContainerState) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given Event and assigns it to the Event field.
func (o *ContainerState) SetEvent(v Event) {
	o.Event = &v
}

// GetStateChange returns the StateChange field value if set, zero value otherwise.
func (o *ContainerState) GetStateChange() bool {
	if o == nil || o.StateChange == nil {
		var ret bool
		return ret
	}
	return *o.StateChange
}

// GetStateChangeOk returns a tuple with the StateChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetStateChangeOk() (*bool, bool) {
	if o == nil || o.StateChange == nil {
		return nil, false
	}
	return o.StateChange, true
}

// HasStateChange returns a boolean if a field has been set.
func (o *ContainerState) HasStateChange() bool {
	if o != nil && o.StateChange != nil {
		return true
	}

	return false
}

// SetStateChange gets a reference to the given bool and assigns it to the StateChange field.
func (o *ContainerState) SetStateChange(v bool) {
	o.StateChange = &v
}

// GetTerminalTtl returns the TerminalTtl field value if set, zero value otherwise.
func (o *ContainerState) GetTerminalTtl() int32 {
	if o == nil || o.TerminalTtl == nil {
		var ret int32
		return ret
	}
	return *o.TerminalTtl
}

// GetTerminalTtlOk returns a tuple with the TerminalTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetTerminalTtlOk() (*int32, bool) {
	if o == nil || o.TerminalTtl == nil {
		return nil, false
	}
	return o.TerminalTtl, true
}

// HasTerminalTtl returns a boolean if a field has been set.
func (o *ContainerState) HasTerminalTtl() bool {
	if o != nil && o.TerminalTtl != nil {
		return true
	}

	return false
}

// SetTerminalTtl gets a reference to the given int32 and assigns it to the TerminalTtl field.
func (o *ContainerState) SetTerminalTtl(v int32) {
	o.TerminalTtl = &v
}

func (o ContainerState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.StateChange != nil {
		toSerialize["stateChange"] = o.StateChange
	}
	if o.TerminalTtl != nil {
		toSerialize["terminalTtl"] = o.TerminalTtl
	}
	return json.Marshal(toSerialize)
}

type NullableContainerState struct {
	value *ContainerState
	isSet bool
}

func (v NullableContainerState) Get() *ContainerState {
	return v.value
}

func (v *NullableContainerState) Set(val *ContainerState) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerState) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerState(val *ContainerState) *NullableContainerState {
	return &NullableContainerState{value: val, isSet: true}
}

func (v NullableContainerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


