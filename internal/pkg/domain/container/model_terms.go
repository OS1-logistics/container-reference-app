/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// Terms struct for Terms
type Terms struct {
	Key *string `json:"key,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewTerms instantiates a new Terms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerms() *Terms {
	this := Terms{}
	return &this
}

// NewTermsWithDefaults instantiates a new Terms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermsWithDefaults() *Terms {
	this := Terms{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Terms) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terms) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Terms) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Terms) SetKey(v string) {
	o.Key = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *Terms) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terms) GetValuesOk() ([]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *Terms) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *Terms) SetValues(v []string) {
	o.Values = v
}

func (o Terms) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableTerms struct {
	value *Terms
	isSet bool
}

func (v NullableTerms) Get() *Terms {
	return v.value
}

func (v *NullableTerms) Set(val *Terms) {
	v.value = val
	v.isSet = true
}

func (v NullableTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerms(val *Terms) *NullableTerms {
	return &NullableTerms{value: val, isSet: true}
}

func (v NullableTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


