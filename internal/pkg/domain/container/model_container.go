/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// Container struct for Container
type Container struct {
	Id string `json:"id"`
	// Container type defined using container type configuration APIs.
	ContainerType string `json:"containerType"`
	// Defines whether container is re-usable or not
	IsReusable *bool `json:"isReusable,omitempty"`
	// List of itmes can be added into container only if container-type is a leaf.
	Items []Item `json:"items,omitempty"`
	// Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it. There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list.
	TrackingDetails []TrackingDetail `json:"trackingDetails,omitempty"`
	// Field to represent container ID of the parent container. During the containization process, this value is assigned to represent which container contains this container.
	ParentId *string `json:"parentId,omitempty"`
	// A map to provide values for the attributes defined in Container-type configuration APIs.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Represents whether this container can contain hazardous materials or not.
	IsHazmat *bool `json:"isHazmat,omitempty"`
	// Defines whether container can be put into other containers or not
	IsContainerizable *bool `json:"isContainerizable,omitempty"`
}

// NewContainer instantiates a new Container object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainer(id string, containerType string) *Container {
	this := Container{}
	this.Id = id
	this.ContainerType = containerType
	var isReusable bool = false
	this.IsReusable = &isReusable
	var isHazmat bool = false
	this.IsHazmat = &isHazmat
	var isContainerizable bool = true
	this.IsContainerizable = &isContainerizable
	return &this
}

// NewContainerWithDefaults instantiates a new Container object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerWithDefaults() *Container {
	this := Container{}
	var isReusable bool = false
	this.IsReusable = &isReusable
	var isHazmat bool = false
	this.IsHazmat = &isHazmat
	var isContainerizable bool = true
	this.IsContainerizable = &isContainerizable
	return &this
}

// GetId returns the Id field value
func (o *Container) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Container) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Container) SetId(v string) {
	o.Id = v
}

// GetContainerType returns the ContainerType field value
func (o *Container) GetContainerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value
// and a boolean to check if the value has been set.
func (o *Container) GetContainerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerType, true
}

// SetContainerType sets field value
func (o *Container) SetContainerType(v string) {
	o.ContainerType = v
}

// GetIsReusable returns the IsReusable field value if set, zero value otherwise.
func (o *Container) GetIsReusable() bool {
	if o == nil || o.IsReusable == nil {
		var ret bool
		return ret
	}
	return *o.IsReusable
}

// GetIsReusableOk returns a tuple with the IsReusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetIsReusableOk() (*bool, bool) {
	if o == nil || o.IsReusable == nil {
		return nil, false
	}
	return o.IsReusable, true
}

// HasIsReusable returns a boolean if a field has been set.
func (o *Container) HasIsReusable() bool {
	if o != nil && o.IsReusable != nil {
		return true
	}

	return false
}

// SetIsReusable gets a reference to the given bool and assigns it to the IsReusable field.
func (o *Container) SetIsReusable(v bool) {
	o.IsReusable = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Container) GetItems() []Item {
	if o == nil || o.Items == nil {
		var ret []Item
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetItemsOk() ([]Item, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Container) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *Container) SetItems(v []Item) {
	o.Items = v
}

// GetTrackingDetails returns the TrackingDetails field value if set, zero value otherwise.
func (o *Container) GetTrackingDetails() []TrackingDetail {
	if o == nil || o.TrackingDetails == nil {
		var ret []TrackingDetail
		return ret
	}
	return o.TrackingDetails
}

// GetTrackingDetailsOk returns a tuple with the TrackingDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetTrackingDetailsOk() ([]TrackingDetail, bool) {
	if o == nil || o.TrackingDetails == nil {
		return nil, false
	}
	return o.TrackingDetails, true
}

// HasTrackingDetails returns a boolean if a field has been set.
func (o *Container) HasTrackingDetails() bool {
	if o != nil && o.TrackingDetails != nil {
		return true
	}

	return false
}

// SetTrackingDetails gets a reference to the given []TrackingDetail and assigns it to the TrackingDetails field.
func (o *Container) SetTrackingDetails(v []TrackingDetail) {
	o.TrackingDetails = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Container) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Container) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Container) SetParentId(v string) {
	o.ParentId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Container) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Container) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *Container) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetIsHazmat returns the IsHazmat field value if set, zero value otherwise.
func (o *Container) GetIsHazmat() bool {
	if o == nil || o.IsHazmat == nil {
		var ret bool
		return ret
	}
	return *o.IsHazmat
}

// GetIsHazmatOk returns a tuple with the IsHazmat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetIsHazmatOk() (*bool, bool) {
	if o == nil || o.IsHazmat == nil {
		return nil, false
	}
	return o.IsHazmat, true
}

// HasIsHazmat returns a boolean if a field has been set.
func (o *Container) HasIsHazmat() bool {
	if o != nil && o.IsHazmat != nil {
		return true
	}

	return false
}

// SetIsHazmat gets a reference to the given bool and assigns it to the IsHazmat field.
func (o *Container) SetIsHazmat(v bool) {
	o.IsHazmat = &v
}

// GetIsContainerizable returns the IsContainerizable field value if set, zero value otherwise.
func (o *Container) GetIsContainerizable() bool {
	if o == nil || o.IsContainerizable == nil {
		var ret bool
		return ret
	}
	return *o.IsContainerizable
}

// GetIsContainerizableOk returns a tuple with the IsContainerizable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetIsContainerizableOk() (*bool, bool) {
	if o == nil || o.IsContainerizable == nil {
		return nil, false
	}
	return o.IsContainerizable, true
}

// HasIsContainerizable returns a boolean if a field has been set.
func (o *Container) HasIsContainerizable() bool {
	if o != nil && o.IsContainerizable != nil {
		return true
	}

	return false
}

// SetIsContainerizable gets a reference to the given bool and assigns it to the IsContainerizable field.
func (o *Container) SetIsContainerizable(v bool) {
	o.IsContainerizable = &v
}

func (o Container) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["containerType"] = o.ContainerType
	}
	if o.IsReusable != nil {
		toSerialize["isReusable"] = o.IsReusable
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.TrackingDetails != nil {
		toSerialize["trackingDetails"] = o.TrackingDetails
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.IsHazmat != nil {
		toSerialize["isHazmat"] = o.IsHazmat
	}
	if o.IsContainerizable != nil {
		toSerialize["isContainerizable"] = o.IsContainerizable
	}
	return json.Marshal(toSerialize)
}

type NullableContainer struct {
	value *Container
	isSet bool
}

func (v NullableContainer) Get() *Container {
	return v.value
}

func (v *NullableContainer) Set(val *Container) {
	v.value = val
	v.isSet = true
}

func (v NullableContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainer(val *Container) *NullableContainer {
	return &NullableContainer{value: val, isSet: true}
}

func (v NullableContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


