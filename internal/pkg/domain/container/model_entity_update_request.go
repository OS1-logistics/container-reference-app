/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EntityUpdateRequest Update entity
type EntityUpdateRequest struct {
	// Short description of the entity. Max length 64 characters.
	Description string `json:"description"`
	// List of valid events that can be applied on this entity
	Events []string `json:"events"`
	// True - Entity is valid & usable. False - Entity is not usable
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// NewEntityUpdateRequest instantiates a new EntityUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityUpdateRequest(description string, events []string) *EntityUpdateRequest {
	this := EntityUpdateRequest{}
	this.Description = description
	this.Events = events
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// NewEntityUpdateRequestWithDefaults instantiates a new EntityUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityUpdateRequestWithDefaults() *EntityUpdateRequest {
	this := EntityUpdateRequest{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// GetDescription returns the Description field value
func (o *EntityUpdateRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EntityUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EntityUpdateRequest) SetDescription(v string) {
	o.Description = v
}

// GetEvents returns the Events field value
func (o *EntityUpdateRequest) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EntityUpdateRequest) GetEventsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EntityUpdateRequest) SetEvents(v []string) {
	o.Events = v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *EntityUpdateRequest) GetIsEnabled() bool {
	if o == nil || isNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityUpdateRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.IsEnabled) {
    return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *EntityUpdateRequest) HasIsEnabled() bool {
	if o != nil && !isNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *EntityUpdateRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

func (o EntityUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["events"] = o.Events
	}
	if !isNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableEntityUpdateRequest struct {
	value *EntityUpdateRequest
	isSet bool
}

func (v NullableEntityUpdateRequest) Get() *EntityUpdateRequest {
	return v.value
}

func (v *NullableEntityUpdateRequest) Set(val *EntityUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityUpdateRequest(val *EntityUpdateRequest) *NullableEntityUpdateRequest {
	return &NullableEntityUpdateRequest{value: val, isSet: true}
}

func (v NullableEntityUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


