/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EventDataValidationAllOf struct for EventDataValidationAllOf
type EventDataValidationAllOf struct {
	// Specifies whether we need to block the event transition in case the attribute validation is failed or not.
	Blocking *bool `json:"blocking,omitempty"`
}

// NewEventDataValidationAllOf instantiates a new EventDataValidationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDataValidationAllOf() *EventDataValidationAllOf {
	this := EventDataValidationAllOf{}
	var blocking bool = true
	this.Blocking = &blocking
	return &this
}

// NewEventDataValidationAllOfWithDefaults instantiates a new EventDataValidationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataValidationAllOfWithDefaults() *EventDataValidationAllOf {
	this := EventDataValidationAllOf{}
	var blocking bool = true
	this.Blocking = &blocking
	return &this
}

// GetBlocking returns the Blocking field value if set, zero value otherwise.
func (o *EventDataValidationAllOf) GetBlocking() bool {
	if o == nil || o.Blocking == nil {
		var ret bool
		return ret
	}
	return *o.Blocking
}

// GetBlockingOk returns a tuple with the Blocking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValidationAllOf) GetBlockingOk() (*bool, bool) {
	if o == nil || o.Blocking == nil {
		return nil, false
	}
	return o.Blocking, true
}

// HasBlocking returns a boolean if a field has been set.
func (o *EventDataValidationAllOf) HasBlocking() bool {
	if o != nil && o.Blocking != nil {
		return true
	}

	return false
}

// SetBlocking gets a reference to the given bool and assigns it to the Blocking field.
func (o *EventDataValidationAllOf) SetBlocking(v bool) {
	o.Blocking = &v
}

func (o EventDataValidationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Blocking != nil {
		toSerialize["blocking"] = o.Blocking
	}
	return json.Marshal(toSerialize)
}

type NullableEventDataValidationAllOf struct {
	value *EventDataValidationAllOf
	isSet bool
}

func (v NullableEventDataValidationAllOf) Get() *EventDataValidationAllOf {
	return v.value
}

func (v *NullableEventDataValidationAllOf) Set(val *EventDataValidationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataValidationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataValidationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataValidationAllOf(val *EventDataValidationAllOf) *NullableEventDataValidationAllOf {
	return &NullableEventDataValidationAllOf{value: val, isSet: true}
}

func (v NullableEventDataValidationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataValidationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


