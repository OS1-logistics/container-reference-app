/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EventsSuccessResponse struct for EventsSuccessResponse
type EventsSuccessResponse struct {
	Data *EventsResponse `json:"data,omitempty"`
}

// NewEventsSuccessResponse instantiates a new EventsSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsSuccessResponse() *EventsSuccessResponse {
	this := EventsSuccessResponse{}
	return &this
}

// NewEventsSuccessResponseWithDefaults instantiates a new EventsSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsSuccessResponseWithDefaults() *EventsSuccessResponse {
	this := EventsSuccessResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventsSuccessResponse) GetData() EventsResponse {
	if o == nil || isNil(o.Data) {
		var ret EventsResponse
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSuccessResponse) GetDataOk() (*EventsResponse, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventsSuccessResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given EventsResponse and assigns it to the Data field.
func (o *EventsSuccessResponse) SetData(v EventsResponse) {
	o.Data = &v
}

func (o EventsSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableEventsSuccessResponse struct {
	value *EventsSuccessResponse
	isSet bool
}

func (v NullableEventsSuccessResponse) Get() *EventsSuccessResponse {
	return v.value
}

func (v *NullableEventsSuccessResponse) Set(val *EventsSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsSuccessResponse(val *EventsSuccessResponse) *NullableEventsSuccessResponse {
	return &NullableEventsSuccessResponse{value: val, isSet: true}
}

func (v NullableEventsSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


