/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// SubState struct for SubState
type SubState struct {
	// Name of the sub-state
	Name string `json:"name"`
	// Represents array of transition rules for this substate
	Transitions []StateTransitionRule `json:"transitions"`
}

// NewSubState instantiates a new SubState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubState(name string, transitions []StateTransitionRule) *SubState {
	this := SubState{}
	this.Name = name
	this.Transitions = transitions
	return &this
}

// NewSubStateWithDefaults instantiates a new SubState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubStateWithDefaults() *SubState {
	this := SubState{}
	return &this
}

// GetName returns the Name field value
func (o *SubState) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubState) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubState) SetName(v string) {
	o.Name = v
}

// GetTransitions returns the Transitions field value
func (o *SubState) GetTransitions() []StateTransitionRule {
	if o == nil {
		var ret []StateTransitionRule
		return ret
	}

	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value
// and a boolean to check if the value has been set.
func (o *SubState) GetTransitionsOk() ([]StateTransitionRule, bool) {
	if o == nil {
    return nil, false
	}
	return o.Transitions, true
}

// SetTransitions sets field value
func (o *SubState) SetTransitions(v []StateTransitionRule) {
	o.Transitions = v
}

func (o SubState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["transitions"] = o.Transitions
	}
	return json.Marshal(toSerialize)
}

type NullableSubState struct {
	value *SubState
	isSet bool
}

func (v NullableSubState) Get() *SubState {
	return v.value
}

func (v *NullableSubState) Set(val *SubState) {
	v.value = val
	v.isSet = true
}

func (v NullableSubState) IsSet() bool {
	return v.isSet
}

func (v *NullableSubState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubState(val *SubState) *NullableSubState {
	return &NullableSubState{value: val, isSet: true}
}

func (v NullableSubState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


