/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerCDC Container CDC
type ContainerCDC struct {
	Id string `json:"id"`
	// Container type defined using container type configuration APIs.
	ContainerType string `json:"containerType"`
	// Defines whether container is re-usable or not
	IsReusable *bool `json:"isReusable,omitempty"`
	// List of itmes can be added into container only if container-type is a leaf.
	Items []Item `json:"items,omitempty"`
	// Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it. There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list.
	TrackingDetails []TrackingDetail `json:"trackingDetails,omitempty"`
	// Field to represent container ID of the parent container. During the containization process, this value is assigned to represent which container contains this container.
	ParentId *string `json:"parentId,omitempty"`
	// A map to provide values for the attributes defined in Container-type configuration APIs.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Represents whether this container can contain hazardous materials or not.
	IsHazmat *bool `json:"isHazmat,omitempty"`
	// Defines whether container can be put into other containers or not
	IsContainerizable *bool `json:"isContainerizable,omitempty"`
	Event Event `json:"event"`
}

// NewContainerCDC instantiates a new ContainerCDC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerCDC(id string, containerType string, event Event) *ContainerCDC {
	this := ContainerCDC{}
	this.Id = id
	this.ContainerType = containerType
	var isReusable bool = false
	this.IsReusable = &isReusable
	var isHazmat bool = false
	this.IsHazmat = &isHazmat
	var isContainerizable bool = true
	this.IsContainerizable = &isContainerizable
	this.Event = event
	return &this
}

// NewContainerCDCWithDefaults instantiates a new ContainerCDC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerCDCWithDefaults() *ContainerCDC {
	this := ContainerCDC{}
	var isReusable bool = false
	this.IsReusable = &isReusable
	var isHazmat bool = false
	this.IsHazmat = &isHazmat
	var isContainerizable bool = true
	this.IsContainerizable = &isContainerizable
	return &this
}

// GetId returns the Id field value
func (o *ContainerCDC) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContainerCDC) SetId(v string) {
	o.Id = v
}

// GetContainerType returns the ContainerType field value
func (o *ContainerCDC) GetContainerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetContainerTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ContainerType, true
}

// SetContainerType sets field value
func (o *ContainerCDC) SetContainerType(v string) {
	o.ContainerType = v
}

// GetIsReusable returns the IsReusable field value if set, zero value otherwise.
func (o *ContainerCDC) GetIsReusable() bool {
	if o == nil || isNil(o.IsReusable) {
		var ret bool
		return ret
	}
	return *o.IsReusable
}

// GetIsReusableOk returns a tuple with the IsReusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetIsReusableOk() (*bool, bool) {
	if o == nil || isNil(o.IsReusable) {
    return nil, false
	}
	return o.IsReusable, true
}

// HasIsReusable returns a boolean if a field has been set.
func (o *ContainerCDC) HasIsReusable() bool {
	if o != nil && !isNil(o.IsReusable) {
		return true
	}

	return false
}

// SetIsReusable gets a reference to the given bool and assigns it to the IsReusable field.
func (o *ContainerCDC) SetIsReusable(v bool) {
	o.IsReusable = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ContainerCDC) GetItems() []Item {
	if o == nil || isNil(o.Items) {
		var ret []Item
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetItemsOk() ([]Item, bool) {
	if o == nil || isNil(o.Items) {
    return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ContainerCDC) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *ContainerCDC) SetItems(v []Item) {
	o.Items = v
}

// GetTrackingDetails returns the TrackingDetails field value if set, zero value otherwise.
func (o *ContainerCDC) GetTrackingDetails() []TrackingDetail {
	if o == nil || isNil(o.TrackingDetails) {
		var ret []TrackingDetail
		return ret
	}
	return o.TrackingDetails
}

// GetTrackingDetailsOk returns a tuple with the TrackingDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetTrackingDetailsOk() ([]TrackingDetail, bool) {
	if o == nil || isNil(o.TrackingDetails) {
    return nil, false
	}
	return o.TrackingDetails, true
}

// HasTrackingDetails returns a boolean if a field has been set.
func (o *ContainerCDC) HasTrackingDetails() bool {
	if o != nil && !isNil(o.TrackingDetails) {
		return true
	}

	return false
}

// SetTrackingDetails gets a reference to the given []TrackingDetail and assigns it to the TrackingDetails field.
func (o *ContainerCDC) SetTrackingDetails(v []TrackingDetail) {
	o.TrackingDetails = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ContainerCDC) GetParentId() string {
	if o == nil || isNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetParentIdOk() (*string, bool) {
	if o == nil || isNil(o.ParentId) {
    return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ContainerCDC) HasParentId() bool {
	if o != nil && !isNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ContainerCDC) SetParentId(v string) {
	o.ParentId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ContainerCDC) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
    return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ContainerCDC) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ContainerCDC) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetIsHazmat returns the IsHazmat field value if set, zero value otherwise.
func (o *ContainerCDC) GetIsHazmat() bool {
	if o == nil || isNil(o.IsHazmat) {
		var ret bool
		return ret
	}
	return *o.IsHazmat
}

// GetIsHazmatOk returns a tuple with the IsHazmat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetIsHazmatOk() (*bool, bool) {
	if o == nil || isNil(o.IsHazmat) {
    return nil, false
	}
	return o.IsHazmat, true
}

// HasIsHazmat returns a boolean if a field has been set.
func (o *ContainerCDC) HasIsHazmat() bool {
	if o != nil && !isNil(o.IsHazmat) {
		return true
	}

	return false
}

// SetIsHazmat gets a reference to the given bool and assigns it to the IsHazmat field.
func (o *ContainerCDC) SetIsHazmat(v bool) {
	o.IsHazmat = &v
}

// GetIsContainerizable returns the IsContainerizable field value if set, zero value otherwise.
func (o *ContainerCDC) GetIsContainerizable() bool {
	if o == nil || isNil(o.IsContainerizable) {
		var ret bool
		return ret
	}
	return *o.IsContainerizable
}

// GetIsContainerizableOk returns a tuple with the IsContainerizable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetIsContainerizableOk() (*bool, bool) {
	if o == nil || isNil(o.IsContainerizable) {
    return nil, false
	}
	return o.IsContainerizable, true
}

// HasIsContainerizable returns a boolean if a field has been set.
func (o *ContainerCDC) HasIsContainerizable() bool {
	if o != nil && !isNil(o.IsContainerizable) {
		return true
	}

	return false
}

// SetIsContainerizable gets a reference to the given bool and assigns it to the IsContainerizable field.
func (o *ContainerCDC) SetIsContainerizable(v bool) {
	o.IsContainerizable = &v
}

// GetEvent returns the Event field value
func (o *ContainerCDC) GetEvent() Event {
	if o == nil {
		var ret Event
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *ContainerCDC) GetEventOk() (*Event, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *ContainerCDC) SetEvent(v Event) {
	o.Event = v
}

func (o ContainerCDC) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["containerType"] = o.ContainerType
	}
	if !isNil(o.IsReusable) {
		toSerialize["isReusable"] = o.IsReusable
	}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !isNil(o.TrackingDetails) {
		toSerialize["trackingDetails"] = o.TrackingDetails
	}
	if !isNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.IsHazmat) {
		toSerialize["isHazmat"] = o.IsHazmat
	}
	if !isNil(o.IsContainerizable) {
		toSerialize["isContainerizable"] = o.IsContainerizable
	}
	if true {
		toSerialize["event"] = o.Event
	}
	return json.Marshal(toSerialize)
}

type NullableContainerCDC struct {
	value *ContainerCDC
	isSet bool
}

func (v NullableContainerCDC) Get() *ContainerCDC {
	return v.value
}

func (v *NullableContainerCDC) Set(val *ContainerCDC) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerCDC) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerCDC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerCDC(val *ContainerCDC) *NullableContainerCDC {
	return &NullableContainerCDC{value: val, isSet: true}
}

func (v NullableContainerCDC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerCDC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


