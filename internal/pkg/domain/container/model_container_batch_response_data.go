/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerBatchResponseData struct for ContainerBatchResponseData
type ContainerBatchResponseData struct {
	Meta *BatchResponseMetaData `json:"meta,omitempty"`
	Errors []BatchRecordError `json:"errors,omitempty"`
	Success []BatchResponseSuccess `json:"success,omitempty"`
}

// NewContainerBatchResponseData instantiates a new ContainerBatchResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerBatchResponseData() *ContainerBatchResponseData {
	this := ContainerBatchResponseData{}
	return &this
}

// NewContainerBatchResponseDataWithDefaults instantiates a new ContainerBatchResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerBatchResponseDataWithDefaults() *ContainerBatchResponseData {
	this := ContainerBatchResponseData{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ContainerBatchResponseData) GetMeta() BatchResponseMetaData {
	if o == nil || o.Meta == nil {
		var ret BatchResponseMetaData
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchResponseData) GetMetaOk() (*BatchResponseMetaData, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ContainerBatchResponseData) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given BatchResponseMetaData and assigns it to the Meta field.
func (o *ContainerBatchResponseData) SetMeta(v BatchResponseMetaData) {
	o.Meta = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ContainerBatchResponseData) GetErrors() []BatchRecordError {
	if o == nil || o.Errors == nil {
		var ret []BatchRecordError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchResponseData) GetErrorsOk() ([]BatchRecordError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ContainerBatchResponseData) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []BatchRecordError and assigns it to the Errors field.
func (o *ContainerBatchResponseData) SetErrors(v []BatchRecordError) {
	o.Errors = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ContainerBatchResponseData) GetSuccess() []BatchResponseSuccess {
	if o == nil || o.Success == nil {
		var ret []BatchResponseSuccess
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchResponseData) GetSuccessOk() ([]BatchResponseSuccess, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ContainerBatchResponseData) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given []BatchResponseSuccess and assigns it to the Success field.
func (o *ContainerBatchResponseData) SetSuccess(v []BatchResponseSuccess) {
	o.Success = v
}

func (o ContainerBatchResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableContainerBatchResponseData struct {
	value *ContainerBatchResponseData
	isSet bool
}

func (v NullableContainerBatchResponseData) Get() *ContainerBatchResponseData {
	return v.value
}

func (v *NullableContainerBatchResponseData) Set(val *ContainerBatchResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerBatchResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerBatchResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerBatchResponseData(val *ContainerBatchResponseData) *NullableContainerBatchResponseData {
	return &NullableContainerBatchResponseData{value: val, isSet: true}
}

func (v NullableContainerBatchResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerBatchResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


