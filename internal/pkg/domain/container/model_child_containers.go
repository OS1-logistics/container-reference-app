/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ChildContainers struct for ChildContainers
type ChildContainers struct {
	ChildContainerIDs []string `json:"childContainerIDs,omitempty"`
}

// NewChildContainers instantiates a new ChildContainers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildContainers() *ChildContainers {
	this := ChildContainers{}
	return &this
}

// NewChildContainersWithDefaults instantiates a new ChildContainers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildContainersWithDefaults() *ChildContainers {
	this := ChildContainers{}
	return &this
}

// GetChildContainerIDs returns the ChildContainerIDs field value if set, zero value otherwise.
func (o *ChildContainers) GetChildContainerIDs() []string {
	if o == nil || isNil(o.ChildContainerIDs) {
		var ret []string
		return ret
	}
	return o.ChildContainerIDs
}

// GetChildContainerIDsOk returns a tuple with the ChildContainerIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildContainers) GetChildContainerIDsOk() ([]string, bool) {
	if o == nil || isNil(o.ChildContainerIDs) {
    return nil, false
	}
	return o.ChildContainerIDs, true
}

// HasChildContainerIDs returns a boolean if a field has been set.
func (o *ChildContainers) HasChildContainerIDs() bool {
	if o != nil && !isNil(o.ChildContainerIDs) {
		return true
	}

	return false
}

// SetChildContainerIDs gets a reference to the given []string and assigns it to the ChildContainerIDs field.
func (o *ChildContainers) SetChildContainerIDs(v []string) {
	o.ChildContainerIDs = v
}

func (o ChildContainers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChildContainerIDs) {
		toSerialize["childContainerIDs"] = o.ChildContainerIDs
	}
	return json.Marshal(toSerialize)
}

type NullableChildContainers struct {
	value *ChildContainers
	isSet bool
}

func (v NullableChildContainers) Get() *ChildContainers {
	return v.value
}

func (v *NullableChildContainers) Set(val *ChildContainers) {
	v.value = val
	v.isSet = true
}

func (v NullableChildContainers) IsSet() bool {
	return v.isSet
}

func (v *NullableChildContainers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildContainers(val *ChildContainers) *NullableChildContainers {
	return &NullableChildContainers{value: val, isSet: true}
}

func (v NullableChildContainers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildContainers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


