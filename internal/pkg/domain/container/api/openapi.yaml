openapi: 3.0.3
info:
  description: '**API documentation for Container Service**'
  title: Container Service
  version: 1.0.0
servers:
- url: "https://{tenantSubdomain}.io/core/api/v2/containers"
  variables:
    tenantSubdomain:
      default: delhivery.dev.fxtrt
      description: Subdomain assigned to the tenant
paths:
  /container-types:
    get:
      description: |
        **API to get the list of all container types and their basic details.**

        <mark>**Important**</mark>: Core Attributes Configuration and State Machine Configuration of container types are not included in the response.
        | HEADER/QUERY PARAMETER | DESCRIPTION | TYPE | VALIDATION |
         | ---- | ---- | ----- | ---- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         | `limit`(query) | Number of items to return. | integer | **Default value:** 50 |
         | `offset`(query) | The number of items to skip from the start. | integer | **Default value:** 0 |
         | `select`(query) | Specifies the list of attributes to be included in the response. If not specified, all attributes are included in the response. | array[string] | **Available values:** name, isSystem, isActive, allowedOwner, ttl |
         | `query`(query) | Query criteria. | object | Refer following links for more details:<br> <br> ㅤ1. [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html) <br> ㅤ2. [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br> ㅤ3. [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br> ㅤ4. [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br> ㅤ5. [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br> ㅤ6. [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br> ㅤ7. [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html) |
         | `sortKey`(query) | Key to be used for sorting data. | string | **Default value:** createdAt |
         | `sortBy`(query) | Fetching data in ascending (asc) or descending (desc) order. | string | **Default value:** desc<br>**Available values**: desc, asc |
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: getContainerTypes
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Number of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Number of items to skip from start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: "Specifies list of attributes to be included in response (id\
          \ is always included in response). If not specified, all attributes are\
          \ included in response."
        explode: true
        in: query
        name: select
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Query criteria. Refer following links for more details:<br/>\
          \ - [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)<br/>\
          \ - [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br/>\
          \ - [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br/>\
          \ - [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br/>\
          \ - [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br/>\
          \ - [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br/>\
          \ - [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html)"
        explode: true
        in: query
        name: query
        required: false
        schema:
          $ref: '#/components/schemas/ContainerTypeFilterQuery'
        style: form
      - description: key to be used for sorting data
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
        style: form
      - description: fetching data in ascending(asc) or descending(desc) order.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          $ref: '#/components/schemas/SortBy'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerTypesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Fetch container type details based on the filters passed
      tags:
      - Container Type
    post:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **A container can be a bag or box or pallet etc. These different type of containers are known as container-types.** <br><br><mark>**Important**</mark>: <br><br>
             - Container types once created cannot be deleted. <br>
             - Once the Container type is created, its *name* and *isLeaf* property cannot be changed.
             <br><br>
            **Asynchronous API for creating a new *Container Type* by specifying the following parameters in the request body:**

           | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
           | ---- | ---- | ----- | ---- |
           | `name`* | A unique name that represents a container of this container type. | string | **pattern:** It should match a through z or A through Z, inclusive (range).<br>**minLength:** 3 **maxLength:** 64 |
           | `isLeaf` | Defines whether this container-type will have actual physical items or not. Such types of containers are termed as leaf containers. | boolean | **default:** false |
           | `allowedParent` | Rules defining the allowed container types as parent of a container type. |
           | ㅤ↳`oneOf` | List of container types allowed as parent of this container type. | string | **minItems:** 1 **maxItems:** 16<br>**minLength:** 3 **maxLength:** 64 |
           | ㅤ↳`not` | List of container types not allowed as parent of this container type. | string | **minItems:** 1 **maxItems:** 16<br>**minLength:** 3 **maxLength:** 64 |
           | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
           *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **202 - Accepted** |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: createContainerType
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerTypeCreateRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: ' Create a new container type'
      tags:
      - Container Type
  /container-types/{containerTypeName}:
    get:
      description: |
        **API to get the details of a container type by containerTypeName.**
        <mark>**Important**</mark>: Core Attributes Configuration and State Machine Configuration of the container type are not included in the response.
         | HEADER/PATH | DESCRIPTION | TYPE |
         | ---- | ---- | ----- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         | `containerTypeName`*(path) | Unique Name of the Container Type. | string |
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: getContainerTypeById
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerTypeResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get container type deatils by containerTypeName
      tags:
      - Container Type
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to update basic configuration of a container type specified by ContainerTypeName.** <br><br><mark>**Important**</mark>: Core Attributes Configuration and State Machine Configuration of the container type cannot be updated using this API.
        | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
           | ---- | ---- | ----- | ---- |
           | `allowedParent`* | Rules defining the allowed/disallowed container types (singular name) as parent of a container type. |
           | ㅤ↳`oneOf` | List of container types allowed as parent of this container type. | string | **minItems:** 1 **maxItems:** 16<br>**minLength:** 3 **maxLength:** 64 |
           | ㅤ↳`not` | List of container types not allowed as parent of this container type. | string | **minItems:** 1 **maxItems:** 16<br>**minLength:** 3 **maxLength:** 64 |
           | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
           *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **202 - Accepted** |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: updateContainerType
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerTypeUpdateRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Update container type basic deatils
      tags:
      - Container Type
  /container-types/{containerTypeName}/config/attributes:
    get:
      description: |
        **API to get the list of core attributes and their configuration of a container type specified by containerTypeName.**
         | HEADER/PATH | DESCRIPTION | TYPE |
         | ---- | ---- | ----- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         | `containerTypeName`*(path) | Unique ID of the Container Type. | string |
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: getAttributesConfig
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributesConfigResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get core attributes configurations of a container type
      tags:
      - Container Type - Attributes Config
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to update core attributes configuration of a container type specified by containerTypeName.**<br><br>**The configuration includes:**

         1. List of core attributes (names) - Data type of each core attribute.<br>
         2. Validation of core attribute values, if required, for each core attribute.

          <mark>**Important**</mark>:
          - If the attribute is already defined for the container type- The validation rules will get updated for the attribute.
          - If the attribute is not defined for the container type- It is added as a new core attribute for the container type.
          - On successful execution of the API, all updates including change in data type will take effect immediately for the container type.

          | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
           | ---- | ---- | ----- | ---- |
           | `attributes`* |
           | ㅤ↳`name`* | Name of the attribute to be updated. | string | **Example**: capacity<br>**minLength**: 3 **maxLength**: 64 |
           | ㅤ↳`dataType`* | Field for the datatype of an attribute. | string | **Example**: integer<br>**Enum**: [string, number, boolean, object, array] |
           | ㅤ↳`description` |Updated description of the attribute.|string  | **minLength**: 1 **maxLength**: 256|
           | ㅤ↳`indexed` | Field to specify if the attribute is to be indexed. Filter or search operation on the basis of a custom attribute will be only allowed if this field is set as TRUE. | boolean | **Default**: false |
           | `defaultValue` |
           | ㅤ↳`validation` | Specifies all the validations to be performed on an attribute, when a container of this type is created/updated. |
           | ㅤㅤㅤ↳`range` | Field to specify the range that the attribute value must lie. In case of "string" data type, range will be the length of string value. | number | **min**: The min value, inclusive.<br>**max**: The max value, inclusive. |
           | ㅤㅤㅤ↳`regex` | Field to specify the regex pattern that the value of an attribute MUST match. | string | **minLength**: 1 **maxLength**: 512 |
           | ㅤㅤㅤ↳`valueOneOf` | Field to specify enum values for an attribute. list of valueOneOf should be homogeneous. | Enum | **minItems**: 1 |
           | ㅤㅤㅤ↳`required` | Field to specify if the value for the attribute is mandatory or not. If TRUE, the value MUST be provided. | boolean | **Default value**: false |
           | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
           *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **202 - Accepted** |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: updateAttributesConfig
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AttributesConfigUpdateRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutErrorResponse'
          description: Error Occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutErrorResponse'
          description: Error Occurred
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutErrorResponse'
          description: Error Occurred
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutErrorResponse'
          description: Error Occurred
      summary: Update core attributes configurations for a Container type.
      tags:
      - Container Type - Attributes Config
  /container-types/{containerTypeName}/config/state-machine:
    get:
      description: |
        **API to get the current state-machine configurtion (states, sub-states, and state transition rules) of a container type specified by the containerTypeName.**
         | HEADER/PATH | DESCRIPTION | TYPE |
         | ---- | ---- | ----- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         | `containerTypeName`*(path) | Unique Name of the Container Type. | string |
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: getStateMachine
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateMachineConfigResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: ' Get state machine configuration of container type'
      tags:
      - Container Type - State Machine Config
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API is for updating the current state-machine configuration (states, sub-states, and state transition rules) of a container type specified by the containerTypeName.**

          - **Events** - Represents array of Events. An event contains event name, event data,if any.
            - **Event Name** - Represents name of the event for state transition.
            - **Event data** - data expected with the event and validation, if any, for the event data.
          - **States** List of main states with its substates and transitions.

        <mark>**Important**</mark>: The state machine cannot be partially updated. Moreover, for each non-terminal sub-state, at least one state transition rule is expected.
        | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
           | ---- | ---- | ----- | ---- |
           | `events`* | Represents an array of Events. An event contains event name, event data, if any. |
           | ㅤ↳`event`* | Represents name of the event for state transition. | string | **Example**: createdToOpened |
           | ㅤ↳`eventType` | Specifies event is transitional or not. <br>**TRANSITIONAL**- Transitonal event is an event that upon invocation it will change the state of the container.<br>**NON_TRANSITIONAL**- Transitonal event is an event that upon invocation it will not change the state of the container. | string | **default**: TRANSITIONAL<br>**Enum**: [ TRANSITIONAL, NON_TRANSITIONAL ] |
           | ㅤ↳`eventData` | Data expected with the event and validation, if any, for the event data. |
           | ㅤㅤ↳`name`* | Name of validation keys of an event. | string | **minLength**: 1 **maxLength**: 32 |
           | ㅤㅤ↳`type` | Event data type | string | **Enum**: [string, number, boolean, object, array] |
           | ㅤㅤ↳`validation` | Validation rules for a string or number value. |
           | ㅤㅤㅤ↳`range` | Field to specify the range that the attribute value must lie. In case of "string" data type, range will be the length of string value. |
           | ㅤㅤㅤㅤ↳`min` | The min value, inclusive. | number |
           | ㅤㅤㅤㅤ↳`max` | The max value, inclusive. | number |
           | ㅤㅤㅤ↳`regex` | Regex that the data should match. | string | **minLength**: 1 **maxLength**: 512 |
           | ㅤㅤㅤ↳`valueOneOf` | Enum of accepted values. | | **minItems**: 1 **maxItems**: 16 |
           | ㅤㅤㅤ↳`required` | Specifies whether the value is required or optional. | boolean | **Default**: false |
           | ㅤㅤㅤ↳`blocking` | Specifies whether we need to block the event transition in case the attribute validation is failed or not. | boolean | **Default**: true |
           | `states`* | List of main states with its sub-states and transitions. |
           | `created`* | State created. |
           | ㅤ↳`name`* | Name of the state. | string |
           | ㅤ↳`defaultSubstate`* | Represents default substate for this state. | string |
           | ㅤ↳`substates`* | | | **minItems**: 1 |
           | ㅤㅤ↳`name`* | Name of the sub-state. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`transitions`* | Represents an array of transition rules for this substate. Transition Rule for this state. Contains events and the destination state. |
           | ㅤㅤㅤ↳`event`* | Represents name of the event for state transition. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤㅤ↳`destination`* | Name of the main state and its sub-state. | string | **Example**: created<br>**minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`ttl` | Time to live associated with each state of a container. |
           | ㅤㅤㅤ↳`time`* | Time to live is associated with the state of a container. | string | **pattern**: Time string in days, hours, minutes, and seconds.<br>**minLength**: 2<br>**Example** - 30m, 1d 12h, 1d 12h 30m 45s etc.|
           | ㅤㅤㅤ↳`destination`* | Represents destination state to which this instance should be transitioned to after ttl expiry. | string |
           | ㅤㅤ↳`callback` | Represents callback URL, which can be called to get any info about state transition of a container or its terminal ttl expiry. | string | A valid URL. |
           | `opened`* | It signifies readiness of container to begin containerization process.
           | ㅤ↳`name`* | Name of the state. | string |
           | ㅤ↳`defaultSubstate`* | Represents default substate for this state. | string |
           | ㅤ↳`substates`* | | | **minItems**: 1 |
           | ㅤㅤ↳`name`* | Name of the sub-state. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`transitions`* | Represents an array of transition rules for this substate. Transition Rule for this state. Contains events and the destination state. |
           | ㅤㅤㅤ↳`event`* | Represents name of the event for state transition. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤㅤ↳`destination`* | Name of the main state and its sub-state. | string | **Example**: created<br>**minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`ttl` | Time to live associated with each state of a container. |
           | ㅤㅤㅤ↳`time`* | Time to live is associated with the state of a container. | string | **pattern**: Time string in days, hours, minutes, and seconds.<br>**minLength**: 2<br>**Example** - 30m, 1d 12h, 1d 12h 30m 45s etc.|
           | ㅤㅤㅤ↳`destination`* | Represents destination state to which this instance should be transitioned to after ttl expiry. | string |
           | ㅤㅤ↳`callback` | Represents callback URL, which can be called to get any info about state transition of a container or its terminal ttl expiry. | string | A valid URL. |
           | `closed`* | It signifies the termination of containerization process. |
           | ㅤ↳`name`* | Name of the state. | string |
           | ㅤ↳`defaultSubstate`* | Represents default substate for this state. | string |
           | ㅤ↳`substates`* | | | **minItems**: 1 |
           | ㅤㅤ↳`name`* | Name of the sub-state. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`transitions`* | Represents an array of transition rules for this substate. Transition Rule for this state. Contains events and the destination state. |
           | ㅤㅤㅤ↳`event`* | Represents name of the event for state transition. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤㅤ↳`destination`* | Name of the main state and its sub-state. | string | **Example**: created<br>**minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`ttl` | Time to live associated with each state of a container. |
           | ㅤㅤㅤ↳`time`* | Time to live is associated with the state of a container. | string | **pattern**: Time string in days, hours, minutes, and seconds.<br>**minLength**: 2<br>**Example** - 30m, 1d 12h, 1d 12h 30m 45s etc.|
           | ㅤㅤㅤ↳`destination`* | Represents destination state to which this instance should be transitioned to after ttl expiry. | string |
           | ㅤㅤ↳`callback` | Represents callback URL, which can be called to get any info about state transition of a container or its terminal ttl expiry. | string | A valid URL. |
           | `completed`* | End of the lifecycle of a container. |
           | ㅤ↳`name`* | Name of the state. | string |
           | ㅤ↳`defaultSubstate`* | Represents default substate for this state. | string |
           | ㅤ↳`substates`* | | | **minItems**: 1 |
           | ㅤㅤ↳`name`* | Name of the sub-state. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`transitions`* | Represents an array of transition rules for this substate. Transition Rule for this state. Contains events and the destination state. |
           | ㅤㅤㅤ↳`event`* | Represents name of the event for state transition. | string | **minLength**: 3 **maxLength**: 32 |
           | ㅤㅤㅤ↳`destination`* | Name of the main state and its sub-state. | string | **Example**: created<br>**minLength**: 3 **maxLength**: 32 |
           | ㅤㅤ↳`ttl` | Time to live associated with each state of a container. |
           | ㅤㅤㅤ↳`time`* | Time to live is associated with the state of a container. | string | **pattern**: Time string in days, hours, minutes, and seconds.<br>**minLength**: 2<br>**Example** - 30m, 1d 12h, 1d 12h 30m 45s etc.|
           | ㅤㅤㅤ↳`destination`* | Represents destination state to which this instance should be transitioned to after ttl expiry. | string |
           | ㅤㅤ↳`callback` | Represents callback URL, which can be called to get any info about state transition of a container or its terminal ttl expiry. | string | A valid URL. |
           | `terminalStates` | Terminal state. | sting |
           | `terminalTTL`* | Specifies the time to live for a data entry in the database. Specified for a tenant. | string | **Default**: 30d **Example**: 10d5h3m0s <br>**minLength**: 2 **maxLength**: 12 |
           | `callback` | Represents callback URL, which can be called to get any info about state transition of a container or its terminal ttl expiry. | string | A valid URL. |
           *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: updateStateMachine
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/StateMachineUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: ' Update state machine configuration of container type'
      tags:
      - Container Type - State Machine Config
  /config/state-machine/entities/{entityCode}:
    put:
      description: |
        **This API will update an entity. Events mentioned in the events list will be replaced for the entity**

         **HTTP Status Code Summary**
           | Code | Description |
           | --- | ---- |
           | **200 - OK** | Everything worked as expected. |
            | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
            | **401 - Unauthorized** | No valid API key provided. |
            | **404 - Not Found** | The requested resource doesn't exist. |
            | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: updateEntity
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Code of an entity.
        explode: false
        in: path
        name: entityCode
        required: true
        schema:
          $ref: '#/components/schemas/EntityCode'
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/EntityUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Update an Entity
      tags:
      - Container Type - State Machine Config
  /config/state-machine/events:
    get:
      description: |
        **This API will get all event with given event details.**

         **HTTP Status Code Summary**
           | Code | Description |
           | --- | ---- |
           | **200 - OK** | Everything worked as expected. |
            | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
            | **401 - Unauthorized** | No valid API key provided. |
            | **404 - Not Found** | The requested resource doesn't exist. |
            | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getAllEvents
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Number of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Number of items to skip from start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsAllSuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get all events
      tags:
      - Container Type - State Machine Config
    post:
      callbacks:
        NotifyContainerTypeStateMachineConfigUpdateStatus:
          '{$request.body#/callback.url}':
            post:
              operationId: notifyContainerTypeStateMachineConfigUpdateStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: createEvents
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/StateMachineCreateEvent'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Create events for a container-type
      tags:
      - Container Type - State Machine Config
  /config/state-machine/events/{eventCode}:
    get:
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: get event
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Code for an Event.
        explode: false
        in: path
        name: eventCode
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsSuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get events for a container-type
      tags:
      - Container Type - State Machine Config
    put:
      callbacks:
        NotifyContainerTypeStateMachineConfigUpdateStatus:
          '{$request.body#/callback.url}':
            post:
              operationId: notifyContainerTypeStateMachineConfigUpdateStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
          | **404 - Not Found** | The requested resource doesn't exist.
          | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: update event
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Code for an Event.
        explode: false
        in: path
        name: eventCode
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/StateMachineUpdateEvent'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Update events for a container-type
      tags:
      - Container Type - State Machine Config
  /config/state-machine/events/orphan:
    get:
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getOrphanEvent
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsOrphanResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: API to get list of orphan event codes (not associated with any reason
        code).
      tags:
      - Container Type - State Machine Config
  /config/state-machine/reasons:
    get:
      description: |
        **This API will get all reason.**

         **HTTP Status Code Summary**
           | Code | Description |
           | --- | ---- |
           | **200 - OK** | Everything worked as expected. |
            | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
            | **401 - Unauthorized** | No valid API key provided. |
            | **404 - Not Found** | The requested resource doesn't exist. |
            | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getAllReasons
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Number of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Number of items to skip from start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonsAllSuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get all reasons
      tags:
      - Container Type - State Machine Config
    post:
      callbacks:
        NotifyContainerTypeStateMachineConfigUpdateStatus:
          '{$request.body#/callback.url}':
            post:
              operationId: notifyContainerTypeStateMachineConfigUpdateStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
          | **404 - Not Found** | The requested resource doesn't exist. |
          | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: createReason
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ReasonCreateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: API to get list of orphan event codes (not associated with any reason
        code).
      tags:
      - Container Type - State Machine Config
  /config/state-machine/reasons/{reasonCode}:
    get:
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getReason
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Code for a Reason.
        explode: false
        in: path
        name: reasonCode
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonsSuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: API to get list of orphan event codes (not associated with any reason
        code).
      tags:
      - Container Type - State Machine Config
    put:
      callbacks:
        NotifyContainerTypeStateMachineConfigUpdateStatus:
          '{$request.body#/callback.url}':
            post:
              operationId: notifyContainerTypeStateMachineConfigUpdateStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: updateReason
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Code for a Reason.
        explode: false
        in: path
        name: reasonCode
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ReasonUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: API to get list of orphan event codes (not associated with any reason
        code).
      tags:
      - Container Type - State Machine Config
  /config/state-machine/reason/orphan:
    get:
      description: |
        **This API is for create events based on given details.**

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getOrphanReason
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonsOrphanResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: API to get list of orphan event codes (not associated with any reason
        code).
      tags:
      - Container Type - State Machine Config
  /{containerTypeName}/filter:
    get:
      description: "**API to get information of all containers of container type based\
        \ on the filters specified.**\n |  HEADER/QUERY PARAMETER   |   DESCRIPTION\
        \  |   TYPE    |  VALIDATION   |\n  |---  |---  |---  |---  |\n  |  `X-COREOS-REQUEST-ID`*(header)\
        \   |  Unique request ID.   |  string      |     |\n  |  `X-COREOS-TID `*(header)\
        \   |   Tenant ID.  |  string      |     |\n  | `X-COREOS-ACCESS`*(header)\
        \ | Core-OS access token. | string  | \n  |\n  | `limit`(query) | Number of\
        \ items to return. | integer  | ㅤ**Default value**: 50 |\n  | `offset`(query)\
        \ | The number of items to skip from start. | integer | ㅤ**Default value**:\
        \ 0 |\n  | `select`(query) | Specifies the list of attributes to be included\
        \ in the response. If not specified, all attributes are included in the response.|\
        \ array[string] | ㅤ**Available values**: name, isSystem, <br>ㅤisActive, allowedOwner,\
        \ ttl |\n  | `query`(query) | Query criteria. | object | ㅤRefer following\
        \ links for more details:<br> <br> ㅤ1. [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)\
        \ <br> ㅤ2. [multi_match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html)<br>\
        \ ㅤ3. [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br>\
        \ ㅤ4. [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br>\
        \ ㅤ5. [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br>\
        \ ㅤ6. [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br>\
        \ ㅤ7. [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br>\
        \ ㅤ8. [fuzzy](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html)<br>\
        \ ㅤ9. [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html)<br>\
        \  10. [wildcard](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html)<br>\
        \  11. [match_phrase](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html)<br>\
        \  12. [match_phrase_prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html)\
        \ |\n  | `sortKey`(query) | Key to be used for sorting data. | string |  **Default\
        \ value**: createdAt |\n  | `sortBy`(query) | Fetching data in ascending (asc)\
        \ or descending (desc) order. | string | **Available values**: desc, asc<br>**Default\
        \ value**: desc |\n  | `containerType`*(query) | Type of container. | string\
        \ |\n  *This is required.\n   <br><br>\n   **HTTP Status Code Summary**\n\
        \   | Code | Description |\n   | ---- | ---------- |\n   | **200 - OK** |\
        \ Everything worked as expected. |\n   | **400 - Bad Request** | The request\
        \ was unacceptable, often due to missing a required parameter. |\n   | **401\
        \ - Unauthorized** | No valid API key provided. |\n   | **404 - Not Found**\
        \ | The requested resource doesn't exist. |\n   | **503 - Server Error** |\
        \ Something went wrong. (These are rare.) |\n"
      operationId: getContainers
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Number of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Number of items to skip from start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: "Specifies list of attributes to be included in response (id\
          \ is always included in response). If not specified, all attributes are\
          \ included in response."
        explode: true
        in: query
        name: select
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Query criteria. Refer following links for more details:<br/>\
          \ - [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)<br/>\
          \ - [multi_match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html)<br/>\
          \ - [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br/>\
          \ - [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br/>\
          \ - [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br/>\
          \ - [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br/>\
          \ - [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br/>\
          \ - [fuzzy](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html)<br/>\
          \ - [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html)<br/>\
          \ - [wildcard](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html)<br/>\
          \ - [match_phrase](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html)<br/>\
          \ - [match_phrase_prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html)"
        explode: true
        in: query
        name: query
        required: false
        schema:
          $ref: '#/components/schemas/Query'
        style: form
      - description: key to be used for sorting data
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
        style: form
      - description: fetching data in ascending(asc) or descending(desc) order.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          $ref: '#/components/schemas/SortBy'
        style: form
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Fetch container details based on the filters passed.
      tags:
      - Container
  /{containerTypeName}:
    post:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to create a new container of a particular containerType(given in request):**

          | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
          | ---- | ----- | ---- | --- |
          | `containerType`* | Container type defined using container type configuration APIs. | string | **pattern**: It should match a through z or A through Z, inclusive (range).<br>**minLength**: 3 **maxLength**: 64<br>**Example**: bag |
          | `trackingDetails` | Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it. There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list. |
          | ㅤ↳`operator`* | Field to specify the owner of the tracking ID. | string | **minLength**: 3 **maxLength**: 64<br>**Example**: Delhivery |
          | ㅤ↳`trackingId`* | | string | **minLength**: 1 **maxLength**: 128<br>**Example**: 132121232423232 |
          | ㅤ↳`isPrimary` | It defines whether it is a primary tracking ID or not. If not defined we assume first tracking ID as primary tracking ID. | boolean | **Default**: false |
          | `attributes` | A map to provide values for the attributes defined in Container-type configuration APIs. |
          | `items` | List of items can be added into a container only if the container-type is a leaf. |
          | ㅤ↳`name`* | Name of the item. | string | **minLength**: 3 **maxLength**: 128<br>**Example**: pant/shirt |
          | ㅤ↳`code` | Code of the item. | string |  **minLength**: 3 **maxLength**: 128 |
          | ㅤ↳`cost`* | Cost of the item. |
          | ㅤㅤ↳`unit` | Represents unit price of the item. |
          | ㅤㅤㅤ↳`amount` | The value of the amount; accurate to three decimal places. | number |
          | ㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
          | ㅤㅤ↳`total`* | Represents total price of the item. |
          | ㅤㅤㅤ↳`amount` | The value of the amount; accurate to three decimal places. | number |
          | ㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
          | ㅤ↳`quantity` |
          | ㅤㅤ↳`value` | A number quantifying measurement. | integer |
          | ㅤㅤ↳`unit` | Unit for measurement. | string | **Enum**: [cm, m, l, ml, nos, g, kg, mm] |
          | `isHazmat` | Represents whether this container can contain hazardous materials or not. | boolean | **Default**: false |
          | `isContainerizable` | Defines whether container can be put into other containers or not. | boolean | **Default**: true |
          | `callback` | Represents callback URL, which can be to notify status(success/failed) of API. | object | {url: "string", meta: "string"} |
          *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **202 - Accepted** |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: createContainer
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerCreateRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Create a container
      tags:
      - Container
  /{containerTypeName}/{containerId}:
    get:
      description: |
        **API to get information (base & core attribute values) of a container specified by containerId.**
         | HEADER/PATH/QUERY | DESCRIPTION | TYPE |
         | ---- | ---- | ----- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         |
         | `containerId`*(path) | Unique ID of Container. | string |
         | `containerType`*(query) | Type of container. | string |
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong. (These are rare.) |
      operationId: getContainerById
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Unique id of Container
        explode: false
        in: path
        name: containerId
        required: true
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Fetch details of container
      tags:
      - Container
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to update the attributes of container.**


         | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
         | ---- | ---- | --- | --- |
         | `trackingDetails` | Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it. There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list. |
         | ㅤ↳`operator` | Field to specify the owner of the tracking ID. | string | **minLength**: 3 **maxLength**: 64<br>**Example**: Delhivery |
         | ㅤ↳`trackingId`* | | string | **minLength**: 1 **maxLength**: 128<br>**Example**: 132121232423232 |
          | ㅤ↳`isPrimary` | It defines whether it is a primary tracking id or not. If not defined we assume first tracking id as primary tracking id. | boolean | **Default**: false |
          | `attributes` | A map to provide values for the attributes defined in Container-type configuration APIs. |
          | `items` | List of items can be added into a container only if the container-type is a leaf. |
          | ㅤ↳`name`* | Name of the item. | string | **minLength**: 3 **maxLength**: 128<br>**Example**: pant/shirt |
          | ㅤ↳`code` | Code of the item. | string |  **minLength**: 3 **maxLength**: 128 |
          | ㅤ↳`cost`* | Cost of the item. |
          | ㅤㅤ↳`unit` | Represents unit price of the item. |
          | ㅤㅤㅤ↳`amount` | The value of the amount; accurate to three decimal places. | number |
          | ㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
          | ㅤㅤ↳`total`* | Represents total price of the item. |
          | ㅤㅤㅤ↳`amount` | The value of the amount; accurate to three decimal places. | number |
          | ㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
          | ㅤ↳`quantity` |
          | ㅤㅤ↳`value` | A number quantifying measurement. | integer |
          | ㅤㅤ↳`unit` | Unit for measurement. | string | **Enum**: [cm, m, l, ml, nos, g, kg, mm] |
          | `callback` | Represents callback URL, which can be to notify status(success/failed) of API. | object | {url: "string", meta: "string"} |
          *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **202 - Accepted** |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: updateContainerById
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Unique id of Container
        explode: false
        in: path
        name: containerId
        required: true
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerUpdateRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Update attribute of Container
      tags:
      - Container
  /{containerId}/child:
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: "**Grouping together container into a container. The container\
        \ that goes inside another container is said to be containerized.**\n- **containerId**\
        \ - The child container ID that needs to be add in parent container.\n- **parentId**\
        \ - The parent container ID that needs to be add as parent of a container.\n\
        \          \n- **action** - field to represent action to be performed on the\
        \ container.\n\n\n | PARAMETER | DESCRIPTION | TYPE | VALIDATION |\n | ---\
        \ | --- | --- | --- |\n | `parentId`* | Field to represent container ID of\
        \ the parent container. During the containerization process, this value is\
        \ assigned to represent which container contains this container. | string\
        \ | **Example**- box:9c9b1138-7cdd-11eb-9439-0242ac130002 |\n | `action`*\
        \ | field to represent action to be performed on the container.field to represent\
        \ action to be performed on the container.\n | `callback` | Represents callback\
        \ URL, which can be to notify status(success/failed) of API. | string | A\
        \ valid URL. |\n*This is required.\n   <br><br>\n   **HTTP Status Code Summary**\n\
        \   | Code | Description |\n   | ---- | ---------- |\n   | **202 - Accepted**\
        \ |\n   | **400 - Bad Request** | The request was unacceptable, often due\
        \ to missing a required parameter. |\n   | **401 - Unauthorized** | No valid\
        \ API key provided. |\n   | **404 - Not Found** | The requested resource doesn't\
        \ exist. |\n   | **503 - Server Error** | Something went wrong.. (These are\
        \ rare.) |\n"
      operationId: ContainerizeContainerById
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Unique id of Container
        explode: false
        in: path
        name: containerId
        required: true
        schema:
          example: container:9c9b1138-7cdd-11eb-9439-0242ac130002
          pattern: "^[a-zA-Z]{3,16}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ParentIdRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildContainerResponse'
          description: Containerization or decontainerization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: containerization/decontainerization of the container
      tags:
      - Container
  /tracking/{trackingId}:
    get:
      description: |
        **Container is a physical entity which must have a trackingId(scannableId, photoId, RFId) associated with it.**<br><br>**This api will fetch all the details of container specified by trackingId(scannableId, photoId, RFId).**
         | HEADER/PATH/QUERY | DESCRIPTION | TYPE |
         | ---- | ---- | ----- |
         | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
         | `trackingId`*(path) | Tracking ID of container. | string|
         *This is required.
           <br><br>
           **HTTP Status Code Summary**
           | Code | Description |
           | ---- | ---------- |
           | **200 - OK** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
           | **401 - Unauthorized** | No valid API key provided. |
           | **404 - Not Found** | The requested resource doesn't exist. |
           | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: getContainerByTrackingId
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Tracking id of container
        explode: false
        in: path
        name: trackingId
        required: true
        schema:
          minimum: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerTrackingResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Fetch details of container by trackingId
      tags:
      - Container
  /{containerTypeName}/{containerId}/state:
    get:
      description: "**API to get the current state of a container.**\n\n | HEADER/PATH\
        \ | DESCRIPTION | TYPE |\n | ---- | ---- | ----- |\n | `X-COREOS-REQUEST-ID`*(header)\
        \ | Unique request ID. | string |\n | `X-COREOS-TID`*(header) | Tenant ID.\
        \ | string |\n | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string\
        \ |\n \n | `containerId`*(path) | Unique ID of Container. | string|\n *This\
        \ is required.\n   <br><br>\n   **HTTP Status Code Summary**\n   | Code |\
        \ Description |\n   | ---- | ---------- |\n   | **200 - OK** | Everything\
        \ worked as expected. |\n   | **400 - Bad Request** | The request was unacceptable,\
        \ often due to missing a required parameter. |\n   | **401 - Unauthorized**\
        \ | No valid API key provided. |\n   | **404 - Not Found** | The requested\
        \ resource doesn't exist. |\n   | **503 - Server Error** | Something went\
        \ wrong.. (These are rare.) |\n"
      operationId: getContainerState
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Unique id of Container
        explode: false
        in: path
        name: containerId
        required: true
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerStateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get the current state of a container
      tags:
      - Container State
  /{containerTypeName}/{containerId}/state/event:
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerStateEventCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **This API will apply an event to an instance. If the event is
        transitionable, then the instance will transition to the particular
        state. Otherwise it will remain in the existing state.**

        | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
        | ---- | ---- | ----- | ---- |
        | `name`* | Represents name of the event for state transition. | string | **minLength**: 3 **maxLength**: 64 |
        | `timestamp` | Represents the timestamp of the event occured. | integer |
        | `propagate` | Propagate flag indicates whether these events need to propagate on child containers or not. | boolean | **Default**: false |
        | `data` | Represents event data values, if any, for this event. |
        | `source` | Represents the source which triggered the event. It can be an app, a user or some location from where the event was triggered. |
        | ㅤ↳`appId`* | Application ID which is responsible for calling this event. | string | **minLength**: 1 **maxLength**: 64 |
         | ㅤ↳`userId` | User ID which is responsible for calling this event. | string | **minLength**: 1 **maxLength**: 64 |
         | ㅤ↳`locId` | LocationId of the event. | string |
         | `callback` | Represents callback URL, which can be called to get any info about state change of a container and notify status(success/failed) of API. | string | A valid URL. |
         *This is required.
          <br><br>
          **HTTP Status Code Summary**
          | Code | Description |
          | ---- | ---------- |
          | **200 - OK** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
          | **404 - Not Found** | The requested resource doesn't exist. |
          | **503 - Server Error** | Something went wrong.. (These are rare.) |
      operationId: updateContainerState
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Unique id of Container
        explode: false
        in: path
        name: containerId
        required: true
        schema:
          type: string
        style: simple
      - description: A unique name to represent type of a container.
        explode: false
        in: path
        name: containerTypeName
        required: true
        schema:
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,64}$"
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerStateUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerStateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Apply event on the container.
      tags:
      - Container State
  /{containerType}/batch:
    post:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerBatchCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to create Container in batch via JSON payload for a container type.**
        | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
        | - | - | - | - |
        | `payload` | Array of container creation request. | | **maxItems**: 1024 **minItems**: 1 |
         | ㅤ↳`refID`* | Reference ID received for each container create request. | string |
         | `trackingDetails` | Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it.<br>There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list. |
         | ㅤㅤ↳`operator`* | Field to specify the owner of the tracking ID. | string | **minLength**: 3 **maxLength**: 64<br>**example**: Delhivery |
         | ㅤㅤ↳`trackingId`* | Tracking ID. | string | **minLength**: 1 **maxLength**: 128<br>**example**: 132121232423232 |
         | ㅤㅤ↳`isPrimary`* | It defines whether it is a primary tracking ID or not. If none of the tracking details is set as primary we assume first tracking ID as a primary tracking ID. | boolean | **default**: false |
         | ㅤ↳`attributes` | A map to provide values for the attributes defined in Container-type configuration APIs. |
         | ㅤ↳`items` | List of items can be added into a container only if the container-type is a leaf. |
         | ㅤㅤ↳`name`* | Name of the item. | string | **minLength**: 3 **maxLength**: 128<br>**example**: pant/shirt |
         | ㅤㅤ↳`code` | Code of the item. | string | **minLength**: 3 **maxLength**: 128 |
         | ㅤㅤ↳`cost`* | cost of the item. |
         | ㅤㅤㅤ↳`unit` | Represents unit price of the item.. |
         | ㅤㅤㅤㅤ↳`amount` | The value of the amount accurate to three decimal places. | number |
         | ㅤㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
         | ㅤㅤㅤ↳`total`* | Represents total price of the item. |
         | ㅤㅤㅤㅤ↳`amount` | The value of the amount accurate to three decimal places. | number |
         | ㅤㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
         | ㅤㅤ↳`quantity` |
         | ㅤㅤㅤ↳`value` | A number quantifying measurement. | integer |
         | ㅤㅤㅤ↳`unit` | Unit for measurement. | string | **​​Enum**: [ cm, m, l, ml, nos, g, kg, mm ] |
         | ㅤ↳`isHazmat` | Represents whether this container can contain hazardous materials or not. | boolean | **default**: false |
           | ㅤ↳`isContainerizable` | Defines whether containers can be put into other containers or not. | boolean | **default**: true |
           | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
           *This is required.

           **HTTP Status Code Summary**

          | Code | Description |
              | --- | ---- |
           | **202 - Accepted** | Everything worked as expected. |
           | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
            | **401 - Unauthorized** | No valid API key provided. |
            | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerCreateBatchRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Create container in batches
      tags:
      - Container - Batch Processing
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerBatchCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to update Container in batch via JSON payload.**

        | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
        | - | - | - | - |
        | `payload` | Array of container update request. |
         | ㅤ↳`containerId` | unique identifier of each container. | string |
         | ㅤ↳`data` | Attributes that define a container and can be modified after container creation. |
         | `trackingDetails` | Field to represent tracking ID (such as AWB) for a container which is usually pasted on the container and used for scanning it.<br>There can be multiple tracking IDs for a container, owned by different operators and hence it will be stored as a list. |
           | ㅤㅤ↳`operator`* | Field to specify the owner of the tracking ID. | string | **minLength**: 3 **maxLength**: 64<br>**example**: Delhivery |
           | ㅤㅤ↳`trackingId`* | Tracking ID. | string | **minLength**: 1 **maxLength**: 128<br>**example**: 132121232423232 |
           | ㅤㅤ↳`isPrimary`* | It defines whether it is a primary tracking ID or not. If none of the tracking details is set as primary we assume first tracking ID as a primary tracking id. | boolean | **default**: false |
           | ㅤ↳`attributes` | A map to provide values for the attributes defined in Container-type configuration APIs. |
           | ㅤ↳`items` | List of items can be added into container only if container-type is a leaf. |
             | ㅤㅤ↳`name`* | Name of the item. | string | **minLength**: 3 **maxLength**: 128<br>**example**: pant/shirt |
             | ㅤㅤ↳`code` | Code of the item. | string | **minLength**: 3 **maxLength**: 128 |
           | ㅤㅤ↳`cost`* | cost of the item. |
           | ㅤㅤㅤ↳`unit` | Represents unit price of the item.. |
           | ㅤㅤㅤㅤ↳`amount` | The value of the amount accurate to three decimal places. | number |
           | ㅤㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
           | ㅤㅤㅤ↳`total`* | Represents total price of the item. |
           | ㅤㅤㅤㅤ↳`amount` | The value of the amount accurate to three decimal places. | number |
           | ㅤㅤㅤㅤ↳`currency` | Currency of the price of the item. | string |
           | ㅤㅤ↳`quantity` |
           | ㅤㅤㅤ↳`value` | A number quantifying measurement. | integer |
           | ㅤㅤㅤ↳`unit` | Unit for measurement. | string | ​​**Enum**: [ cm, m, l, ml, nos, g, kg, mm ] |
           | ㅤㅤ↳`callback` | Represents callback URL, which can be to notify status(success/failed) of API. | string | A valid URL |
           | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
           *This is required.

           **HTTP Status Code Summary**
          | Code | Description |
          | --- | ---- |
            | **202 - Accepted** | Everything worked as expected. |
            | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
            | **401 - Unauthorized** | No valid API key provided. |
             | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerUpdateBatchRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Perform update operation on container in batches
      tags:
      - Container - Batch Processing
  /{containerType}/batch/status:
    get:
      description: |
        **API to get the status of batch request.**
        | HEADER/PATH/QUERY | DESCRIPTION | TYPE |
        | - | - | - |
         | `X-COREOS-REQUEST-ID`*(header) | Unique Request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | core-os access token. | string |
         | `containerType`*(path) | Type of container. | string |
         | `batchId`*(query) | Unique ID of batch request. | string |


         *This is required.

         **HTTP Status Code Summary**
          | Code | Description |
          | --- | ---- |
            | **200 - Ok** | Everything worked as expected. |
          | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
          | **401 - Unauthorized** | No valid API key provided. |
         | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getStatusOfBatchRequest
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: Unique id of batch request.
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          $ref: '#/components/schemas/BatchId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerBatchResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get the status of batch  request
      tags:
      - Container - Batch Processing
  /{containerType}/batch/upload:
    post:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerBatchCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to create container in batch through CSV file upload.**

        | PARAMETER | DESCRIPTION | TYPE | Example |
         | - | - | - | - |
         | `file`* || string($binary) |
         | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |

         *This is required.

         **HTTP Status Code Summary**
          | Code | Description |
          | --- | ---- |
           | **202 - Accepted** | Everything worked as expected. |
         | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
         | **401 - Unauthorized** | No valid API key provided. |
         | **404 - Not Found** | The requested resource doesn't exist. |
         | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: recordFileUploadCreateRequest
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerFileUploadRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Perform create operation on container via file upload
      tags:
      - Container - Batch Processing
    put:
      callbacks:
        NotifyContainersApiStatus:
          '{$request.body#/callback}':
            post:
              operationId: notifyContainersApiStatus_Post
              requestBody:
                $ref: '#/components/requestBodies/ContainerBatchCallbackRequest'
              responses:
                "200":
                  description: received notification
              x-callback-request: true
      description: |
        **API to update container in batch through CSV file upload.**
        | PARAMETER | DESCRIPTION | TYPE | Example |
         | - | - | - | - |
         | `file`* || string($binary) |
         | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |

         *This is required.

         **HTTP Status Code Summary**
          | Code | Description |
          | --- | ---- |
           | **202 - Accepted** | Everything worked as expected. |
         | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
         | **401 - Unauthorized** | No valid API key provided. |
         | **404 - Not Found** | The requested resource doesn't exist. |
         | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: recordFileUploadUpdateRequest
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: App requesting for the attributes.
        explode: false
        in: header
        name: X-COREOS-ORIGIN-TOKEN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ContainerFileUploadRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSuccessResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Perform update operation on container via file upload
      tags:
      - Container - Batch Processing
  /{containerType}/batch/upload/status:
    get:
      description: |
        **API to get the status of batch file request.**
        | HEADER/PATH/QUERY | DESCRIPTION | TYPE |
         | - | - | - |
         | `X-COREOS-REQUEST-ID`*(header) | Unique Request ID. | string |
         | `X-COREOS-TID`*(header) | Tenant ID. | string |
         | `X-COREOS-ACCESS`*(header) | core-os access token. | string |
         | `containerType`*(path) | Type of container. | string |
         | `batchId`*(query) | Unique ID of batch request. | string |

         *This is required.

         **HTTP Status Code Summary**
         | Code | Description |
         | --- | ---- |
         | **200 - OK** | Everything worked as expected. |
         | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
         | **401 - Unauthorized** | No valid API key provided. |
          | **503 - Server Errors** | Something went wrong on our end. (These are rare.) |
      operationId: getStatusOfBatchUploadRequest
      parameters:
      - description: Unique request id.
        explode: false
        in: header
        name: X-COREOS-REQUEST-ID
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant id
        explode: false
        in: header
        name: X-COREOS-TID
        required: true
        schema:
          example: delhivery1234
          type: string
        style: simple
      - description: Core-os access token
        explode: false
        in: header
        name: X-COREOS-ACCESS
        required: true
        schema:
          type: string
        style: simple
      - description: Core-os user info
        explode: false
        in: header
        name: X-COREOS-USERINFO
        required: false
        schema:
          type: string
        style: simple
      - description: Type of container
        explode: false
        in: path
        name: containerType
        required: true
        schema:
          example: bag
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        style: simple
      - description: Unique id of batch request.
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          $ref: '#/components/schemas/BatchId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerBatchResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server Error
      summary: Get the status of batch file request
      tags:
      - Container - Batch Processing
components:
  parameters:
    ContainerTypeFilterQuery:
      description: "Query criteria. Refer following links for more details:<br/> -\
        \ [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)<br/>\
        \ - [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br/>\
        \ - [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br/>\
        \ - [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br/>\
        \ - [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br/>\
        \ - [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br/>\
        \ - [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html)"
      explode: true
      in: query
      name: query
      required: false
      schema:
        $ref: '#/components/schemas/ContainerTypeFilterQuery'
      style: form
    RequestId:
      description: Unique request id.
      explode: false
      in: header
      name: X-COREOS-REQUEST-ID
      required: true
      schema:
        type: string
      style: simple
    TenantId:
      description: Tenant id
      explode: false
      in: header
      name: X-COREOS-TID
      required: true
      schema:
        example: delhivery1234
        type: string
      style: simple
    EntityCode:
      description: Code of an entity.
      explode: false
      in: path
      name: entityCode
      required: true
      schema:
        $ref: '#/components/schemas/EntityCode'
      style: simple
    AccessToken:
      description: Core-os access token
      explode: false
      in: header
      name: X-COREOS-ACCESS
      required: true
      schema:
        type: string
      style: simple
    RequestingApp:
      description: App requesting for the attributes.
      explode: false
      in: header
      name: X-COREOS-ORIGIN-TOKEN
      required: true
      schema:
        type: string
      style: simple
    UserInfoToken:
      description: Core-os user info
      explode: false
      in: header
      name: X-COREOS-USERINFO
      required: false
      schema:
        type: string
      style: simple
    ContainerType:
      description: Type of container
      explode: false
      in: path
      name: containerType
      required: true
      schema:
        example: bag
        pattern: "^[a-zA-Z]{3,16}$"
        type: string
      style: simple
    ContainerTypeQuery:
      description: Type of container
      explode: true
      in: query
      name: containerType
      required: false
      schema:
        example: bag
        pattern: "^[a-zA-Z]{3,16}$"
        type: string
      style: form
    SortBy:
      description: fetching data in ascending(asc) or descending(desc) order.
      explode: true
      in: query
      name: sortBy
      required: false
      schema:
        $ref: '#/components/schemas/SortBy'
      style: form
    SortKey:
      description: key to be used for sorting data
      explode: true
      in: query
      name: sortKey
      required: false
      schema:
        $ref: '#/components/schemas/SortKey'
      style: form
    ContainerTypeId:
      description: Unique id of Container Type.
      explode: false
      in: path
      name: containerTypeId
      required: true
      schema:
        pattern: "^[a-zA-Z]{3,16}$"
        type: string
      style: simple
    ContainerTypeName:
      description: A unique name to represent type of a container.
      explode: false
      in: path
      name: containerTypeName
      required: true
      schema:
        example: bag
        maxLength: 64
        minLength: 3
        pattern: "^[a-zA-Z]{3,64}$"
        type: string
      style: simple
    ContainerId:
      description: Unique id of Container
      explode: false
      in: path
      name: containerId
      required: true
      schema:
        example: container:9c9b1138-7cdd-11eb-9439-0242ac130002
        pattern: "^[a-zA-Z]{3,16}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        type: string
      style: simple
    ContainerScanId:
      description: Unique id of Container
      explode: false
      in: path
      name: containerId
      required: true
      schema:
        type: string
      style: simple
    ContainerTypePath:
      description: Type of container
      explode: false
      in: path
      name: containerId
      required: true
      schema:
        example: bag
        pattern: "^[a-zA-Z]{3,16}$"
        type: string
      style: simple
    TrackingId:
      description: Tracking id of container
      explode: false
      in: path
      name: trackingId
      required: true
      schema:
        minimum: 1
        type: string
      style: simple
    PageSize:
      description: Number of items to return.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 50
        maximum: 100
        minimum: 1
        type: integer
      style: form
    PageOffset:
      description: Number of items to skip from start.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    StartDateTime:
      description: Start time of the change log in unix epoch format.
      explode: true
      in: query
      name: from
      required: true
      schema:
        example: 1615428351
        type: integer
      style: form
    Duration:
      description: Number of days for which change log is to be returned.
      explode: true
      in: query
      name: duration
      required: false
      schema:
        default: 1
        maximum: 31
        minimum: 1
        type: integer
      style: form
    SelectFields:
      description: "Specifies list of attributes to be included in response (id is\
        \ always included in response). If not specified, all attributes are included\
        \ in response."
      explode: true
      in: query
      name: select
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    BatchId:
      description: Unique id of batch request.
      explode: true
      in: query
      name: batchId
      required: true
      schema:
        $ref: '#/components/schemas/BatchId'
      style: form
    EventCode:
      description: Code for an Event.
      explode: false
      in: path
      name: eventCode
      required: true
      schema:
        type: string
      style: simple
    ReasonCode:
      description: Code for a Reason.
      explode: false
      in: path
      name: reasonCode
      required: true
      schema:
        type: string
      style: simple
    Query:
      description: "Query criteria. Refer following links for more details:<br/> -\
        \ [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)<br/>\
        \ - [multi_match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html)<br/>\
        \ - [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br/>\
        \ - [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br/>\
        \ - [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br/>\
        \ - [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)<br/>\
        \ - [exists](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html)<br/>\
        \ - [fuzzy](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html)<br/>\
        \ - [prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html)<br/>\
        \ - [wildcard](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html)<br/>\
        \ - [match_phrase](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html)<br/>\
        \ - [match_phrase_prefix](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html)"
      explode: true
      in: query
      name: query
      required: false
      schema:
        $ref: '#/components/schemas/Query'
      style: form
  requestBodies:
    ContainerBatchCallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerBatchCallbackResponse'
    ContainerCallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerCallbackResponse'
    ContainerStateCallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerStateCallbackResponse'
    ContainerStateEventCallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerStateEventCallbackResponse'
    TenantCallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TenantCallbackResponse'
    CallbackRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CallbackResponse'
      required: true
    ContainerTypeCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTypeCreateRequest'
      description: Create new container type
      required: true
    ContainerTypeUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTypeUpdateRequest'
      description: Update Container type configuration
      required: true
    AttributesConfigUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttributesConfigUpdateRequest'
      description: Update core attributes of particular type of container
      required: true
    StateMachineUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StateMachineUpdateRequest'
      description: Update container type state machine
      required: true
    ContainerCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerCreateRequest'
      description: Create new container
      required: true
    ContainerUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerUpdateRequest'
      description: Update container
      required: true
    ParentIdRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParentIdRequest'
      description: parent id
      required: true
    ContainerStateUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerStateUpdateRequest'
      description: Event for container state transition.
      required: true
    ContainerCreateBatchRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerCreationBatchRequest'
      description: Create new containers by batch request
      required: true
    ContainerUpdateBatchRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerUpdateBatchRequest'
      description: update batch request for container type
      required: true
    ContainerFileUploadRequest:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/ContainerDataFileUpdateRequest'
      description: upload file request for container type.
      required: true
    EntityUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityUpdateRequest'
      required: true
    StateMachineCreateEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventCreateRequest'
      description: Create new State Machine Event.
      required: true
    StateMachineUpdateEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventUpdateRequest'
      description: Create new State Machine Event.
      required: true
    ReasonCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReasonCreateRequest'
      required: true
    ReasonUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReasonUpdateRequest'
      required: true
    EntityStateValidationRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityStateValidationRequest'
      required: true
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Error Occurred
    ServerErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Server Error
    BadRequestErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad Request
    UnauthorizedErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized
    NotFoundErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Not Found
    SuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
      description: Accepted
    ReasonsAllSuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReasonsAllSuccessResponse'
      description: OK
    EventsAllSuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsAllSuccessResponse'
      description: OK
    PostErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostErrorResponse'
      description: Error Occurred
    GetErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetErrorResponse'
      description: Error Occurred
    PutErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutErrorResponse'
      description: Error Occurred
    AttributesConfigResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttributesConfigResponse'
      description: OK
    StateMachineConfigResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StateMachineConfigResponse'
      description: OK
    EventsSuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsSuccessResponse'
      description: OK
    EventsOrphanResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsOrphanResponse'
      description: OK
    ReasonsSuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReasonsSuccessResponse'
      description: OK
    ReasonsOrphanResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReasonsOrphanResponse'
      description: OK
    EntityStateValidationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityStateValidationResponse'
      description: OK
    ContainersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainersResponse'
      description: OK
    ContainerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerResponse'
      description: OK
    ContainerStateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerStateResponse'
      description: OK
    ContainerTypeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTypeResponse'
      description: OK
    ContainerTypesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTypesResponse'
      description: OK
    ChildContainerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChildContainerResponse'
      description: Containerization or decontainerization
    ContainerChangeLogResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerChangeLogResponse'
      description: Container change log
    ContainerTypeChangeLogResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTypeChangeLogResponse'
      description: Container change log
    TenantResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TenantResponse'
      description: Tenant Response
    ContainerBatchResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerBatchResponse'
      description: OK
    BatchSuccessResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BatchSuccessResponse'
      description: Accepted
    ContainerTrackingResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerTrackingResponse'
      description: OK
  schemas:
    Error:
      description: Error Information
      properties:
        code:
          description: Error code
          type: string
        description:
          description: Error description
          type: string
        additionalInfo:
          description: Additional information related to the error
          type: object
      required:
      - code
      - description
      type: object
    EventSource:
      description: "Represents the source which triggered the event. It can be an\
        \ app, a user or some location from where the event was triggered."
      example:
        appId: appId
        userId: userId
        locId: locId
      properties:
        appId:
          description: application ID which is responsible for calling this event.
          maxLength: 64
          minLength: 1
          type: string
        userId:
          description: user ID which is responsible for calling this event.
          maxLength: 64
          minLength: 1
          type: string
        locId:
          description: locationId of the event.
          type: string
      required:
      - appId
      type: object
    DataType:
      description: Field for the datatype of an attribute.
      enum:
      - string
      - number
      - boolean
      - object
      - array
      example: integer
      type: string
    SortKey:
      default: createdAt
      description: key to be used for sorting
      example: containerType
      type: string
    SortBy:
      default: desc
      description: ordering of data
      enum:
      - desc
      - asc
      type: string
    EventType:
      default: TRANSITIONAL
      description: |
        Specifies event is transitional or not<br>
           - TRANSITIONAL - Transitonal event is an event that upon invocation it will change the state of the                         container.<br>
           - NON_TRANSITIONAL - Transitonal event is an event that upon invocation it will not change the state of the                     container.
      enum:
      - TRANSITIONAL
      - NON_TRANSITIONAL
      type: string
    Child:
      description: Specifies this request perform containerization or decontainerization.
      enum:
      - CONTAINERIZE
      - DECONTAINERIZE
      type: string
    Method:
      description: HTTP method requested on the API endpoint
      enum:
      - POST
      - GET
      - PUT
      type: string
    Match:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    MultiMatch:
      properties:
        query:
          type: string
        fields:
          items:
            type: string
          type: array
      type: object
    Term:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Fuzzy:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Prefix:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Wildcard:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    MatchPhrase:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    MatchPhrasePrefix:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Exists:
      properties:
        key:
          type: string
      type: object
    Terms:
      properties:
        key:
          type: string
        values:
          items:
            type: string
          type: array
      type: object
    RangeQuery:
      properties:
        key:
          type: string
        relation:
          type: string
        value:
          type: string
      type: object
    Regex:
      properties:
        key:
          type: string
        regex:
          type: string
      type: object
    Query:
      properties:
        match:
          description: The match query is the standard query for performing a full-text
            search.
          items:
            $ref: '#/components/schemas/Match'
          type: array
        multi_match:
          description: The multi-match query builds on the match query allows multi-field
            queries.
          items:
            $ref: '#/components/schemas/MultiMatch'
          type: array
        term:
          description: The Term query returns fields that contain an exact term in
            a provided field.
          items:
            $ref: '#/components/schemas/Term'
          type: array
        terms:
          description: "The Terms query returns field that contain one or more exact\
            \ terms in a provided field. The terms query is the same as the term query,\
            \ except you can search for multiple values."
          items:
            $ref: '#/components/schemas/Terms'
          type: array
        range:
          description: The Range query returns fields that contain terms within a
            provided range.
          items:
            $ref: '#/components/schemas/RangeQuery'
          type: array
        regexp:
          description: The Regexp query returns fields that contain terms matching
            a regular expression.
          items:
            $ref: '#/components/schemas/Regex'
          type: array
        exists:
          items:
            $ref: '#/components/schemas/Exists'
          type: array
        fuzzy:
          items:
            $ref: '#/components/schemas/Fuzzy'
          type: array
        prefix:
          items:
            $ref: '#/components/schemas/Prefix'
          type: array
        wildcard:
          items:
            $ref: '#/components/schemas/Wildcard'
          type: array
        match_phrase:
          items:
            $ref: '#/components/schemas/MatchPhrase'
          type: array
        match_phrase_prefix:
          items:
            $ref: '#/components/schemas/MatchPhrasePrefix'
          type: array
      type: object
    ReadOnlyAttributes:
      description: ReadOnly attributes of a container.
      properties:
        id:
          readOnly: true
          type: string
      required:
      - id
      - state
      type: object
    EntityCode:
      description: Unique code of an entity.
      pattern: "^(?!0000|^$)([0-9][0-9][0-9][0-9])$"
      type: string
    ContainerTypeFilterQuery:
      properties:
        match:
          description: The match query is the standard query for performing a full-text
            search.
          items:
            $ref: '#/components/schemas/Match'
          type: array
        term:
          description: The Term query returns fields that contain an exact term in
            a provided field.
          items:
            $ref: '#/components/schemas/Term'
          type: array
        terms:
          description: "The Terms query returns field that contain one or more exact\
            \ terms in a provided field. The terms query is the same as the term query,\
            \ except you can search for multiple values."
          items:
            $ref: '#/components/schemas/Terms'
          type: array
        range:
          description: The Range query returns fields that contain terms within a
            provided range.
          items:
            $ref: '#/components/schemas/RangeQuery'
          type: array
        regexp:
          description: The Regexp query returns fields that contain terms matching
            a regular expression.
          items:
            $ref: '#/components/schemas/Regex'
          type: array
        exists:
          items:
            $ref: '#/components/schemas/Exists'
          type: array
        prefix:
          items:
            $ref: '#/components/schemas/Prefix'
          type: array
      type: object
    UniqueId:
      description: Unique ID.
      maxLength: 64
      minLength: 1
      type: string
    AppID:
      description: App ID.
      type: string
    BatchId:
      description: Unique UUID of a batch request.
      maxLength: 64
      minLength: 1
      pattern: "^batch:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      type: string
    EventCreateRequest:
      example:
        reasonCodes:
        - R-nnnn
        - R-nnnn
        isEnabled: true
        containerTypeNames:
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        dataValidations:
        - name: name
          type: null
          validation: null
        - name: name
          type: null
          validation: null
        description: description
        eventType: null
      properties:
        description:
          description: Short description of the event. Max length 64 characters.
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        reasonCodes:
          description: List of valid reason codes that can raise this event code
          items:
            example: R-nnnn
            type: string
          type: array
        containerTypeNames:
          description: List of containerTypeNames where this event can be applied
          items:
            type: string
          maxItems: 999
          minItems: 1
          type: array
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        dataValidations:
          description: "Data expected along with the event and their respective validations,\
            \ if any."
          items:
            $ref: '#/components/schemas/EventDataItem'
          type: array
      required:
      - description
      type: object
    EventUpdateRequest:
      example:
        reasonCodes:
        - R-nnnn
        - R-nnnn
        isEnabled: true
        containerTypeNames:
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        - containerTypeNames
        dataValidations:
        - name: name
          type: null
          validation: null
        - name: name
          type: null
          validation: null
        description: description
        eventType: null
      properties:
        description:
          description: Short description of the event. Max length 64 characters.
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        reasonCodes:
          description: List of valid reason codes that can raise this event code
          items:
            example: R-nnnn
            type: string
          type: array
        containerTypeNames:
          description: List of valid containerTypeNames where this event can be applied
          items:
            type: string
          maxItems: 999
          minItems: 1
          type: array
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        dataValidations:
          description: "Data expected along with the event and their respective validations,\
            \ if any."
          items:
            $ref: '#/components/schemas/EventDataItem'
          type: array
      required:
      - description
      type: object
    EventsSuccessResponse:
      allOf:
      - $ref: '#/components/schemas/EventsSuccessResponse_allOf'
    EventsResponse:
      properties:
        description:
          description: Short description of the event. Max length 64 characters.
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        reasons:
          description: List of valid reason codes that can raise this event code
          items:
            $ref: '#/components/schemas/ReasonMetaData'
          type: array
        entities:
          description: List of valid entities where this event can be applied
          items:
            $ref: '#/components/schemas/EntitiesMetaData'
          type: array
        isSystemDefined:
          description: True - If the event is system generated. False - If the event
            is custom generated
          type: boolean
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        dataValidations:
          description: "Data expected along with the event and their respective validations,\
            \ if any."
          items:
            $ref: '#/components/schemas/EventDataItem'
          type: array
        eventCode:
          description: Event Code
          type: string
      type: object
    ReasonMetaData:
      properties:
        reasonCode:
          type: string
        description:
          type: string
    EntitiesMetaData:
      properties:
        entityCode:
          type: string
        description:
          type: string
        name:
          type: string
    EventsOrphanResponse:
      allOf:
      - $ref: '#/components/schemas/EventsOrphanResponse_allOf'
    EventOrphanResponse:
      properties:
        description:
          description: Short description of the event. Max length 64 characters.
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        validCurrentStates:
          description: List of valid current states of the entity when this event
            code can be applied.
          items:
            type: string
          type: array
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        dataValidations:
          description: "Data expected along with the event and their respective validations,\
            \ if any."
          items:
            $ref: '#/components/schemas/EventDataItem'
          type: array
        eventCode:
          description: event code.
          type: string
        enityCode:
          description: Entity Code
          type: string
      type: object
    ReasonCreateRequest:
      description: Create reason
      example:
        isEnabled: true
        description: description
      properties:
        description:
          description: Short description of the reason. Max length 64 characters.
          type: string
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
      required:
      - description
      type: object
    ReasonUpdateRequest:
      description: Update reason
      example:
        isEnabled: true
        description: description
      properties:
        description:
          description: Short description of the reason. Max length 64 characters.
          type: string
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
      required:
      - description
      type: object
    ReasonsSuccessResponse:
      allOf:
      - $ref: '#/components/schemas/ReasonsSuccessResponse_allOf'
    ReasonsOrphanResponse:
      allOf:
      - $ref: '#/components/schemas/ReasonsOrphanResponse_allOf'
    ReasonResponse:
      properties:
        description:
          description: Short description of the reason. Max length 64 characters.
          type: string
        isEnabled:
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        reasonCode:
          description: reason Code
          type: string
      type: object
    EntityStateValidationRequest:
      description: Validate an entity state
      properties:
        reasonCode:
          description: reasonCode.
          type: string
        eventCode:
          description: event code.
          type: string
        state:
          description: given state.
          type: string
      required:
      - eventCode
      - reasonCode
      - state
      type: object
    EntityStateValidationResponse:
      allOf:
      - $ref: '#/components/schemas/EntityStateValidationResponse_allOf'
    ActionBy:
      properties:
        id:
          description: Unique ID.
          maxLength: 64
          minLength: 1
          type: string
        name:
          maxLength: 256
          type: string
        appID:
          description: App ID.
          type: string
      required:
      - id
      type: object
    ActionInfo:
      properties:
        createdAt:
          format: int64
          type: integer
        createdBy:
          $ref: '#/components/schemas/ActionBy'
        updatedAt:
          format: int64
          type: integer
        updatedBy:
          $ref: '#/components/schemas/ActionBy'
      required:
      - createdAt
      - createdBy
      - updatedAt
      - updatedBy
      type: object
    ChildContainers:
      properties:
        childContainerIDs:
          items:
            type: string
          type: array
      type: object
    TerminalTTL:
      description: Specifies the time to live for a data entry in the database. Specified
        for a tenant.
      example: 10d5h3m0s
      maxLength: 12
      minLength: 2
      pattern: "^(\\d{0,2}(?:d\\s*))?(\\d{0,2}(?:h\\s*))?(\\d{0,2}(?:m\\s*))?(\\d{0,2}(?:s\\\
        s*))?$"
      type: string
    StateMachineConfig:
      description: Container type state-machine configuration
      properties:
        states:
          $ref: '#/components/schemas/States'
      required:
      - states
      type: object
    States:
      properties:
        created:
          $ref: '#/components/schemas/CreatedState'
        opened:
          $ref: '#/components/schemas/OpenedState'
        closed:
          $ref: '#/components/schemas/ClosedState'
        completed:
          $ref: '#/components/schemas/CompletedState'
      required:
      - closed
      - completed
      - created
      - opened
      type: object
    CreatedState:
      allOf:
      - $ref: '#/components/schemas/State'
      description: Created State
    OpenedState:
      allOf:
      - $ref: '#/components/schemas/State'
      description: It's signifies readiness of container to begin containerization
        process.
    ClosedState:
      allOf:
      - $ref: '#/components/schemas/State'
      description: It's signifies the termination of containerization process.
    CompletedState:
      allOf:
      - $ref: '#/components/schemas/State'
      - $ref: '#/components/schemas/CompletedState_allOf'
      description: End of the lifecycle of a container.
    TrackingDetails:
      description: "Field to represent tracking ID (such as AWB) for a container which\
        \ is usually pasted on the container and used for scanning it. There can be\
        \ multiple tracking IDs for a container, owned by different operators and\
        \ hence it will be stored as a list."
      items:
        $ref: '#/components/schemas/TrackingDetail'
      maxItems: 16
      type: array
    TrackingDetail:
      properties:
        operator:
          description: Field to specify the owner of the tracking ID.
          example: Delhivery
          maxLength: 64
          minLength: 3
          type: string
        trackingId:
          example: "132121232423232"
          maxLength: 128
          minLength: 1
          type: string
        isPrimary:
          default: false
          description: it defines whether it is a primary tracking id or not. If not
            defined we assume first tracking id as primary tracking id.
          type: boolean
        timestamp:
          description: Represents a date time as number of seconds elapsed since 00:00Hrs
            of 1st January 1970 UTC.
          format: int64
          type: integer
      required:
      - operator
      - trackingId
      type: object
    Items:
      description: List of itmes can be added into container only if container-type
        is a leaf.
      items:
        $ref: '#/components/schemas/Item'
      type: array
    Item:
      properties:
        name:
          description: Name of the item.
          example: pant/shirt
          maxLength: 128
          minLength: 3
          type: string
        code:
          description: Code of the item.
          maxLength: 128
          minLength: 3
          type: string
        cost:
          $ref: '#/components/schemas/cost'
        quantity:
          $ref: '#/components/schemas/quantity'
      required:
      - cost
      - name
      type: object
    cost:
      description: cost of the item.
      properties:
        unit:
          $ref: '#/components/schemas/cost_unit'
        total:
          $ref: '#/components/schemas/cost_total'
      required:
      - total
      type: object
    quantity:
      properties:
        value:
          description: A number quantifying measurement
          type: integer
        unit:
          $ref: '#/components/schemas/unit'
      type: object
    unit:
      description: Unit for measuremnet.
      enum:
      - cm
      - m
      - l
      - ml
      - nos
      - g
      - kg
      - mm
      type: string
    State:
      properties:
        name:
          description: Name of the state
          type: string
        defaultSubstate:
          description: Represents default substate for this state
          type: string
        subStates:
          items:
            $ref: '#/components/schemas/SubState'
          minItems: 1
          type: array
      required:
      - defaultSubstate
      - name
      - subStates
      type: object
    SubState:
      properties:
        name:
          description: Name of the sub-state
          maxLength: 32
          minLength: 3
          type: string
        transitions:
          description: Represents array of transition rules for this substate
          items:
            $ref: '#/components/schemas/StateTransitionRule'
          type: array
      required:
      - name
      - transitions
      type: object
    StateTransitionRule:
      description: State Transition Rule
      properties:
        eventCode:
          description: Event Code of the format:E-yyy. E - Prefix indicating that
            this is an event code.  yyy - 3 digit event code string ranging from 001
            to 999
          pattern: "^(?!E-000|^$)(E[-][0-9][0-9][0-9])"
          type: string
        destination:
          description: Name of the main state and its substate of destination state
          maxLength: 32
          minLength: 3
          type: string
        reasonCode:
          description: Reason Code of the format:R-nnnn R - Prefix indicating that
            this is a reason code nnnn - 4 digit reason code string ranging from 0001
            to 9999
          pattern: "^(?!R-0000|^$)(R[-][0-9][0-9][0-9][0-9])"
          type: string
      required:
      - destination
      - eventCode
      type: object
    EventCode:
      description: Event Code of the format:E-yyy. E - Prefix indicating that this
        is an event code.  yyy - 3 digit event code string ranging from 001 to 999
      pattern: "^(?!E-000|^$)(E[-][0-9][0-9][0-9])"
      type: string
    ReasonCode:
      description: Reason Code of the format:R-nnnn R - Prefix indicating that this
        is a reason code nnnn - 4 digit reason code string ranging from 0001 to 9999
      pattern: "^(?!R-0000|^$)(R[-][0-9][0-9][0-9][0-9])"
      type: string
    EventDataType:
      enum:
      - string
      - number
      - boolean
      - object
      - array
      type: string
    EventDataItem:
      example:
        name: name
        type: null
        validation: null
      properties:
        name:
          description: Name of validation keys of an event.
          maxLength: 32
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/EventDataType'
        validation:
          $ref: '#/components/schemas/EventDataValidation'
      required:
      - name
      type: object
    EventDataValidation:
      allOf:
      - $ref: '#/components/schemas/Validation'
      - $ref: '#/components/schemas/EventDataValidation_allOf'
    Validation:
      description: Validation rules for a string or number value
      properties:
        range:
          $ref: '#/components/schemas/Range'
        regex:
          description: Regex that the data should match
          maxItems: 16
          maxLength: 512
          minItems: 1
          minLength: 1
          type: string
        required:
          default: false
          description: Specifies whether the value is required or optional
          type: boolean
      type: object
    ContainerTypeUpdateRequest:
      description: Update container type configuration
      example:
        allowedParent:
          oneOf:
          - oneOf
          - oneOf
          - oneOf
          - oneOf
          - oneOf
          not:
          - not
          - not
          - not
          - not
          - not
        callback:
          meta: "{}"
          url: https://delhivery.requestcatcher.com/
      properties:
        allowedParent:
          $ref: '#/components/schemas/ContainerTypeAllowedParent'
        callback:
          $ref: '#/components/schemas/ContainerTypeUpdateRequest_callback'
      required:
      - allowedParent
      type: object
    StateMachineConfigResponseData:
      allOf:
      - $ref: '#/components/schemas/ContainerTypeBasicProperties'
      - $ref: '#/components/schemas/StateMachineConfig'
      - $ref: '#/components/schemas/ActionInfo'
    ContainerTypeBasicProperties:
      properties:
        id:
          type: string
        name:
          example: bag
          pattern: "^[a-z]{1,16}$"
          type: string
      type: object
    ContainerTypeConfigResponse:
      allOf:
      - $ref: '#/components/schemas/ContainerType'
      - $ref: '#/components/schemas/ActionInfo'
      - $ref: '#/components/schemas/AttributesConfig'
      example:
        entityCode: entityCode
        id: id
      properties:
        entityCode:
          description: uniqueCode for each container type
          type: string
        id:
          type: string
      type: object
    ContainerType:
      allOf:
      - $ref: '#/components/schemas/BaseContainerType'
    ContainerTypeAllowedParent:
      description: Rules defining the allowed container types as parent of a container
        type
      example:
        oneOf:
        - oneOf
        - oneOf
        - oneOf
        - oneOf
        - oneOf
        not:
        - not
        - not
        - not
        - not
        - not
      minProperties: 1
      properties:
        oneOf:
          description: List of container types allowed as parent of this container
            type
          items:
            maxLength: 64
            minLength: 3
            pattern: "^[a-z]{1,16}$"
            type: string
          maxItems: 16
          minItems: 1
          type: array
        not:
          description: List of container types *not* allowed as parent of this container
            type
          items:
            maxLength: 64
            minLength: 3
            pattern: "^[a-z]{1,16}$"
            type: string
          maxItems: 16
          minItems: 1
          type: array
      type: object
    StateMachineConfigResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data: null
      properties:
        data:
          $ref: '#/components/schemas/StateMachineConfigResponseData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    AttributesConfigResponseData:
      allOf:
      - $ref: '#/components/schemas/ContainerType'
      - $ref: '#/components/schemas/AttributesConfigGet'
      - $ref: '#/components/schemas/ActionInfo'
    AttributesConfigResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data: null
      properties:
        data:
          $ref: '#/components/schemas/AttributesConfigResponseData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    BaseContainerType:
      properties:
        name:
          description: A unique name to represent type of a container.
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-z]{1,16}$"
          type: string
        isLeaf:
          default: false
          description: Defines whether this container-type will have actual physical
            items or not. Such type of containers is termed as leaf container.
          type: boolean
        isActive:
          default: false
          description: Define the particular container type is active or not.
          type: boolean
        allowedParent:
          $ref: '#/components/schemas/ContainerTypeAllowedParent'
        ownerAppId:
          type: string
      required:
      - name
      type: object
    AttributesConfig:
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/AttributeConfig'
          minItems: 1
          type: array
      required:
      - attributes
      type: object
    Description:
      maxLength: 256
      minLength: 1
      type: string
    AttributeConfig:
      properties:
        name:
          description: Field to define attribute name.
          example: capacity
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z_]{1,32}$"
          type: string
        dataType:
          $ref: '#/components/schemas/DataType'
        description:
          maxLength: 256
          minLength: 1
          type: string
        indexed:
          description: Field to specify if the attribute is to be indexed. Filter
            or search operation on basis of a custom attribute will be only allowed
            if this field is set as TRUE.
          type: boolean
        isReadPublic:
          default: false
          description: Access Parameter for the Attribute
          type: boolean
        defaultValue:
          $ref: '#/components/schemas/AttributeConfig_defaultValue'
        validation:
          $ref: '#/components/schemas/AttributeValidation'
      required:
      - dataType
      - name
      type: object
    AttributesConfigGet:
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/AttributeConfigGet'
          minItems: 1
          type: array
      required:
      - attributes
      type: object
    AttributeConfigGet:
      properties:
        name:
          description: Field to define attribute name.
          example: capacity
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z_]{1,32}$"
          type: string
        dataType:
          $ref: '#/components/schemas/DataType'
        description:
          maxLength: 256
          minLength: 1
          type: string
        indexed:
          description: Field to specify if the attribute is to be indexed. Filter
            or search operation on basis of a custom attribute will be only allowed
            if this field is set as TRUE.
          type: boolean
        isReadPublic:
          default: false
          description: Access Parameter for the Attribute
          type: boolean
        ownerAppId:
          type: string
        defaultValue:
          $ref: '#/components/schemas/AttributeConfig_defaultValue'
        validation:
          $ref: '#/components/schemas/AttributeValidation'
      required:
      - dataType
      - name
      type: object
    AttributeValidation:
      description: "Specifies all the validations to be performed on an attribute,\
        \ when a container of this type is created/updated."
      properties:
        range:
          $ref: '#/components/schemas/Range'
        regex:
          description: Field to specify the regex pattern that the value of an attribute
            MUST match.this validation alllowed only for string type of attributes.
          maxLength: 512
          minLength: 1
          type: string
        valueOneOf:
          description: Field to specify enum values for an attribute. list of valueOneOf
            should be homogeneous.
          items:
            $ref: '#/components/schemas/AttributeConfig_defaultValue'
          minItems: 1
          type: array
        required:
          default: false
          description: "Field to specify if the value for the attribute is mandatory\
            \ or not. If TRUE, the value MUST be provided."
          type: boolean
      type: object
    Range:
      description: "Field to specify the range that the attribute value must lie.\
        \ In case of \"string\" datatype, range will be the length of string value.\
        \ this validation allowed only for string and number type of attributes."
      properties:
        min:
          description: "The min value, inclusive."
          type: number
        max:
          description: "The max value, inclusive."
          type: number
      type: object
    Request:
      example:
        method: null
        queryString: queryString
        body: "{}"
        uri: uri
      properties:
        uri:
          description: The API end point where the request was received.
          type: string
        method:
          $ref: '#/components/schemas/Method'
        queryString:
          description: Query string received by the server
          type: string
        body:
          type: object
      required:
      - uri
      type: object
    BaseContainerTypeCreateRequest:
      properties:
        name:
          description: A unique name to represent type of a container.
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-zA-Z]{3,16}$"
          type: string
        isLeaf:
          default: false
          description: Defines whether this container-type will have actual physical
            items or not. Such type of containers is termed as leaf container.
          type: boolean
        allowedParent:
          $ref: '#/components/schemas/ContainerTypeAllowedParent'
      required:
      - name
      type: object
    ContainerTypeCreateRequest:
      allOf:
      - $ref: '#/components/schemas/BaseContainerTypeCreateRequest'
      description: Create new container type
      example:
        entityCode: entityCode
        callback:
          meta: "{}"
          url: https://delhivery.requestcatcher.com/
      properties:
        callback:
          $ref: '#/components/schemas/Callback'
        entityCode:
          description: Unique code of an entity.
          pattern: "^(?!0000|^$)([0-9][0-9][0-9][0-9])$"
          type: string
    AttributesConfigUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/AttributesConfig'
      example:
        callback: "{}"
      properties:
        callback:
          properties:
            url:
              example: https://delhivery.requestcatcher.com/
              format: uri
              type: string
            meta:
              type: object
          type: object
    ContainerCreateRequest:
      allOf:
      - $ref: '#/components/schemas/ContainerCreateAttributes'
      example:
        callback: "{}"
      properties:
        callback:
          properties:
            url:
              example: https://delhivery.requestcatcher.com/
              format: uri
              type: string
            meta:
              type: object
          type: object
    ContainerCreateBatchRequest:
      allOf:
      - $ref: '#/components/schemas/ContainerCreateAttributes'
    ContainerUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/ContainerUpdateAttributes'
      example:
        callback: "{}"
      properties:
        callback:
          properties:
            url:
              example: https://delhivery.requestcatcher.com/
              format: uri
              type: string
            meta:
              type: object
          type: object
    ParentIdRequest:
      allOf:
      - $ref: '#/components/schemas/ParentId'
      example:
        callback: "{}"
      properties:
        callback:
          properties:
            url:
              example: https://delhivery.requestcatcher.com/
              format: uri
              type: string
            meta:
              anyOf:
              - type: string
              - type: object
              - items:
                  type: object
                type: array
          type: object
    ParentId:
      properties:
        parentId:
          description: "Field to represent container ID of the parent container. During\
            \ the containerization process, this value is assigned to represent which\
            \ container contains this container."
          example: box:9c9b1138-7cdd-11eb-9439-0242ac130002
          type: string
        action:
          description: Field to represent action to be performed on the container.
          enum:
          - CONTAINERIZE
          - DECONTAINERIZE
          example: CONTAINERIZE
          type: string
      required:
      - action
      - parentId
      type: object
    ContainerStateUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/Event'
      - $ref: '#/components/schemas/EventCallback'
      description: Event for container state transition.
    StateMachineUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/StateMachineConfig'
      description: Update state machine config
    ContainerBaseAttributes:
      description: Base attributes that defines a container. This attributes are set
        on container creation and cannot be updated.
      properties:
        containerType:
          description: Container type defined using container type configuration APIs.
          example: bag
          maxLength: 64
          minLength: 3
          pattern: "^[a-z]{1,16}$"
          type: string
        isReusable:
          default: false
          description: Defines whether container is re-usable or not
          type: boolean
      required:
      - containerType
      type: object
    ContainerBatchBaseAttributes:
      description: Base attributes that defines a container. This attributes are set
        on container creation and cannot be updated.
      properties:
        refID:
          description: Reference Id received for each container create request
          type: string
      required:
      - refID
      type: object
    ContainerAttributes:
      description: Attributes that define a container and can be modified after container
        creation.
      properties:
        items:
          description: List of itmes can be added into container only if container-type
            is a leaf.
          items:
            $ref: '#/components/schemas/Item'
          type: array
        trackingDetails:
          description: "Field to represent tracking ID (such as AWB) for a container\
            \ which is usually pasted on the container and used for scanning it. There\
            \ can be multiple tracking IDs for a container, owned by different operators\
            \ and hence it will be stored as a list."
          items:
            $ref: '#/components/schemas/TrackingDetail'
          maxItems: 16
          type: array
        parentId:
          description: "Field to represent container ID of the parent container. During\
            \ the containization process, this value is assigned to represent which\
            \ container contains this container."
          example: 123e4567-e89b-42d3-a456-556642440000
          type: string
        attributes:
          description: A map to provide values for the attributes defined in Container-type
            configuration APIs.
          type: object
        isHazmat:
          default: false
          description: Represents whether this container can contain hazardous materials
            or not.
          type: boolean
        isContainerizable:
          default: true
          description: Defines whether container can be put into other containers
            or not
          type: boolean
      type: object
    ContainerUpdateAttributes:
      description: Attributes that define a container and can be modified after container
        creation.
      properties:
        trackingDetails:
          description: "Field to represent tracking ID (such as AWB) for a container\
            \ which is usually pasted on the container and used for scanning it. There\
            \ can be multiple tracking IDs for a container, owned by different operators\
            \ and hence it will be stored as a list."
          items:
            $ref: '#/components/schemas/ContainerUpdateAttributes_trackingDetails_inner'
          type: array
        attributes:
          description: A map to provide values for the attributes defined in Container-type
            configuration APIs.
          type: object
        items:
          description: List of itmes can be added into container only if container-type
            is a leaf.
          items:
            $ref: '#/components/schemas/Item'
          type: array
      type: object
    TrackingData:
      example:
        pendingContainers:
        - pendingContainers
        - pendingContainers
        tracking:
        - containerId:
          - containerId
          - containerId
        - containerId:
          - containerId
          - containerId
      properties:
        tracking:
          items:
            $ref: '#/components/schemas/ContainerEvents'
          type: array
        pendingContainers:
          items:
            type: string
          type: array
      type: object
    ContainerEvents:
      example:
        containerId:
        - containerId
        - containerId
      properties:
        containerId:
          items:
            type: string
          type: array
      type: object
    CallbackResponse:
      properties:
        id:
          description: Unique ID.
          maxLength: 64
          minLength: 1
          type: string
        status:
          example: failed/success
          type: string
        reason:
          type: string
      required:
      - id
      - status
      type: object
    ContainerCreateAttributes:
      description: Attributes that define a container and can be modified after container
        creation.
      properties:
        trackingDetails:
          description: "Field to represent tracking ID (such as AWB) for a container\
            \ which is usually pasted on the container and used for scanning it. There\
            \ can be multiple tracking IDs for a container, owned by different operators\
            \ and hence it will be stored as a list."
          items:
            $ref: '#/components/schemas/ContainerCreateAttributes_trackingDetails_inner'
          type: array
        attributes:
          description: A map to provide values for the attributes defined in Container-type
            configuration APIs.
          type: object
        items:
          description: List of itmes can be added into container only if container-type
            is a leaf.
          items:
            $ref: '#/components/schemas/Item'
          type: array
        scannableId:
          type: string
        isHazmat:
          default: false
          description: Represents whether this container can contain hazardous materials
            or not.
          type: boolean
        isContainerizable:
          default: true
          description: Defines whether container can be put into other containers
            or not
          type: boolean
        isReusable:
          default: false
          description: Defines whether container is re-usable or not
          type: boolean
      required:
      - scannableId
      type: object
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    GetErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ErrorResponse'
      - $ref: '#/components/schemas/GetErrorResponse_allOf'
    PostErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ErrorResponse'
    PutErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ErrorResponse'
    ContainerTypeResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data: null
      properties:
        data:
          $ref: '#/components/schemas/ContainerTypeResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ContainerTypeMetaResponse:
      allOf:
      - $ref: '#/components/schemas/ContainerType'
      - $ref: '#/components/schemas/ActionInfo'
      properties:
        entityCode:
          description: uniqueCode for each container type
          type: string
      type: object
    ContainerTypesResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data:
          meta:
            totalElements: 0.8008281904610115
          containerTypes:
          - entityCode: entityCode
            id: id
          - entityCode: entityCode
            id: id
      properties:
        data:
          $ref: '#/components/schemas/ContainerTypesResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ContainerResponseData:
      allOf:
      - $ref: '#/components/schemas/Container'
      - $ref: '#/components/schemas/ActionInfo'
    ContainerByIdResponseData:
      allOf:
      - $ref: '#/components/schemas/Container'
      - $ref: '#/components/schemas/ActionInfo'
      - $ref: '#/components/schemas/ChildContainers'
    ContainersResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data:
          meta:
            totalElements: 0.8008281904610115
          containers:
          - null
          - null
      properties:
        data:
          $ref: '#/components/schemas/ContainersResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ContainerResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data: null
      properties:
        data:
          $ref: '#/components/schemas/ContainerByIdResponseData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    Container:
      allOf:
      - $ref: '#/components/schemas/ReadOnlyAttributes'
      - $ref: '#/components/schemas/ContainerBaseAttributes'
      - $ref: '#/components/schemas/ContainerAttributes'
    ContainerChangeLogResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/ContainerChangeLogResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ContainerTrackingResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data:
          pendingContainers:
          - pendingContainers
          - pendingContainers
          tracking:
          - containerId:
            - containerId
            - containerId
          - containerId:
            - containerId
            - containerId
      properties:
        data:
          $ref: '#/components/schemas/TrackingData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    CallbackStatus:
      description: status of execution of api.
      enum:
      - success
      - failed
      type: string
    ChangeAction:
      description: Action for data auditing
      enum:
      - CREATE
      - UPDATE
      - GET
      - DELETE
      type: string
    BaseChange:
      properties:
        action:
          $ref: '#/components/schemas/ChangeAction'
        actionTime:
          format: int64
          type: integer
        actionBy:
          $ref: '#/components/schemas/ActionBy'
      required:
      - action
      - actionBy
      - actionTime
      type: object
    ContainerTypeChangeLog:
      allOf:
      - $ref: '#/components/schemas/BaseChange'
      - $ref: '#/components/schemas/ContainerTypeChangeLog_allOf'
      description: Container type change information.
    ContainerTypeChangeLogResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/ContainerTypeChangeLogResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    SuccessResponse:
      allOf:
      - $ref: '#/components/schemas/SuccessResponse_allOf'
    ReasonsAllSuccessResponse:
      allOf:
      - $ref: '#/components/schemas/ReasonsOrphanResponse_allOf'
    EventsAllSuccessResponse:
      allOf:
      - $ref: '#/components/schemas/EventsAllSuccessResponse_allOf'
    ContainerCDC:
      allOf:
      - $ref: '#/components/schemas/Container'
      - $ref: '#/components/schemas/ContainerCDC_allOf'
      description: Container CDC
    ContainerBaseChangeLogResponse:
      allOf:
      - $ref: '#/components/schemas/BaseChange'
      - $ref: '#/components/schemas/ContainerBaseChangeLogResponse_allOf'
    ContainerStateResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data:
          terminalTtl: 6
          stateChange: true
          id: 123e4567-e89b-42d3-a456-556642440000
          state: created:created
          event:
            eventCode: eventCode
            data: "{}"
            propagate: false
            reasonCode: reasonCode
            source:
              appId: appId
              userId: userId
              locId: locId
            timestamp: 0
      properties:
        data:
          $ref: '#/components/schemas/ContainerState'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ChildContainerResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data:
          id: id
          operation: null
      properties:
        data:
          $ref: '#/components/schemas/ChildContainerResponse_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    ContainerState:
      example:
        terminalTtl: 6
        stateChange: true
        id: 123e4567-e89b-42d3-a456-556642440000
        state: created:created
        event:
          eventCode: eventCode
          data: "{}"
          propagate: false
          reasonCode: reasonCode
          source:
            appId: appId
            userId: userId
            locId: locId
          timestamp: 0
      properties:
        id:
          example: 123e4567-e89b-42d3-a456-556642440000
          type: string
        state:
          description: Represents state of the container.The value will of the format
            <state>:<substate>
          example: created:created
          maxLength: 64
          minLength: 3
          type: string
        event:
          $ref: '#/components/schemas/Event'
        stateChange:
          description: Describes if the state is changed.
          type: boolean
        terminalTtl:
          description: Describes terminal ttl if the state is a terminal state
          type: integer
      type: object
    StateRepresentation:
      description: Represents state of the container.The value will of the format
        <state>:<substate>
      example: created:created
      maxLength: 64
      minLength: 3
      type: string
    Event:
      example:
        eventCode: eventCode
        data: "{}"
        propagate: false
        reasonCode: reasonCode
        source:
          appId: appId
          userId: userId
          locId: locId
        timestamp: 0
      properties:
        eventCode:
          description: Event Code of the format:E-yyy. E - Prefix indicating that
            this is an event code.  yyy - 3 digit event code string ranging from 001
            to 999
          pattern: "^(?!E-000|^$)(E[-][0-9][0-9][0-9])"
          type: string
        reasonCode:
          description: Reason Code of the format:R-nnnn R - Prefix indicating that
            this is a reason code nnnn - 4 digit reason code string ranging from 0001
            to 9999
          pattern: "^(?!R-0000|^$)(R[-][0-9][0-9][0-9][0-9])"
          type: string
        timestamp:
          description: Represents the timestamp of the event occured.
          type: integer
        propagate:
          default: false
          description: propagate flag indicate whether these events need to propogate
            on child containers or not.
          type: boolean
        data:
          description: "Represents event data values, if any, for this event"
          type: object
        source:
          $ref: '#/components/schemas/EventSource'
      required:
      - data
      - eventCode
      - source
      - timestamp
      type: object
    EventCallback:
      properties:
        callback:
          $ref: '#/components/schemas/ContainerTypeUpdateRequest_callback'
      type: object
    Callback:
      example:
        meta: "{}"
        url: https://delhivery.requestcatcher.com/
      properties:
        url:
          example: https://delhivery.requestcatcher.com/
          format: uri
          type: string
        meta:
          type: object
      type: object
    TenantResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/TenantResponseData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    TenantResponseData:
      allOf:
      - $ref: '#/components/schemas/TenantConfig'
      - $ref: '#/components/schemas/ActionInfo'
    TenantConfig:
      description: Attributes associated with each tenant.
      properties:
        name:
          type: string
        isActive:
          type: boolean
        attributes:
          $ref: '#/components/schemas/TenantAttributes'
      type: object
    TenantAttributes:
      description: "Optional attributes provided by tenants, that can be updated"
      properties:
        terminalTTL:
          description: Specifies the time to live for a data entry in the database.
            Specified for a tenant.
          example: 10d5h3m0s
          maxLength: 12
          minLength: 2
          pattern: "^(\\d{0,2}(?:d\\s*))?(\\d{0,2}(?:h\\s*))?(\\d{0,2}(?:m\\s*))?(\\\
            d{0,2}(?:s\\s*))?$"
          type: string
      type: object
    ContainerBatchResponseData:
      allOf:
      - $ref: '#/components/schemas/BatchResponse'
    ContainerCreationBatchRequest:
      description: Object containing payload and call back url for container creation
        request
      example:
        payload:
        - null
        - null
        - null
        - null
        - null
        callback:
          meta: "{}"
          url: url
      properties:
        payload:
          description: Array of container creation request
          items:
            $ref: '#/components/schemas/ContainerCreateBatchRequest'
          maxItems: 1024
          minItems: 1
          type: array
        callback:
          $ref: '#/components/schemas/BatchCallbackURL'
      type: object
    ContainerCallbackResponse:
      description: "Represents callback url, which can be called to notify the status\
        \ of API request."
      example:
        reason: reason
        data:
          id: id
        containerType: containerType
        tenantId: tenantId
        status: null
      properties:
        tenantId:
          description: tenant id.
          type: string
        containerType:
          description: container type.
          type: string
        status:
          $ref: '#/components/schemas/CallbackStatus'
        reason:
          description: failure reason in case of execution is failed.
          type: string
        data:
          $ref: '#/components/schemas/ContainerCallbackResponse_data'
      type: object
    ContainerStateCallbackResponse:
      description: "Represents callback url, which can be called to notify the status\
        \ of API request."
      properties:
        tenantId:
          description: tenant id.
          type: string
        containerType:
          description: container type.
          type: string
        status:
          $ref: '#/components/schemas/CallbackStatus'
        reason:
          description: failure reason in case of execution is failed.
          type: string
        data:
          $ref: '#/components/schemas/ContainerStateCallbackResponse_data'
      type: object
    ContainerStateEventCallbackResponse:
      description: "Represents callback url, which can be called to notify the status\
        \ of API request."
      example:
        reason: reason
        data:
          id: 123e4567-e89b-42d3-a456-556642440000
          state: created:created
          event:
            data: "{}"
            name: name
            propagate: false
            source:
              appId: appId
              userId: userId
              locId: locId
            timestamp: 0
        containerType: containerType
        tenantId: tenantId
        status: null
      properties:
        tenantId:
          description: tenant id.
          type: string
        containerType:
          description: container type.
          type: string
        status:
          $ref: '#/components/schemas/CallbackStatus'
        reason:
          description: failure reason in case of execution is failed.
          type: string
        data:
          $ref: '#/components/schemas/ContainerStateEventCallbackResponse_data'
      type: object
    ContainerBatchCallbackResponse:
      description: "Represents callback url, which can be called to notify the status\
        \ of API request."
      example:
        reason: reason
        data: null
        containerType: containerType
        tenantId: tenantId
        status: null
      properties:
        tenantId:
          description: tenant id.
          type: string
        containerType:
          description: container type.
          type: string
        status:
          $ref: '#/components/schemas/CallbackStatus'
        reason:
          description: failure reason in case of execution is failed.
          type: string
        data:
          $ref: '#/components/schemas/ContainerBatchResponseData'
      type: object
    TenantCallbackResponse:
      allOf:
      - $ref: '#/components/schemas/BaseCallbackResponse'
      properties:
        tenantId:
          description: tenant id.
          type: string
      type: object
    BaseCallbackResponse:
      properties:
        tenantId:
          description: tenant id.
          type: string
        status:
          $ref: '#/components/schemas/CallbackStatus'
        reason:
          description: failure reason in case of execution is failed.
          type: string
        data:
          description: request data
          type: object
      type: object
    ContainerUpdateBatchRequest:
      description: Object containing payload and call back url for container update
        request
      example:
        payload:
        - data:
            callback: "{}"
          containerId: containerId
        - data:
            callback: "{}"
          containerId: containerId
        callback:
          meta: "{}"
          url: url
      properties:
        payload:
          description: Array of container update request
          items:
            $ref: '#/components/schemas/ContainerBatchUpdate'
          type: array
        callback:
          $ref: '#/components/schemas/BatchCallbackURL'
      type: object
    BatchResponse:
      properties:
        meta:
          $ref: '#/components/schemas/BatchResponseMetaData'
        errors:
          items:
            $ref: '#/components/schemas/BatchRecordError'
          type: array
        success:
          items:
            $ref: '#/components/schemas/BatchResponseSuccess'
          type: array
      type: object
    BatchResponseMetaData:
      properties:
        status:
          description: status of batch request
          type: string
        success:
          description: total number of successful record.
          format: int64
          type: integer
        failed:
          description: total number of failed records.
          format: int64
          type: integer
        total:
          description: total number of record.
          format: int64
          type: integer
      type: object
    BatchRecordError:
      properties:
        refID:
          description: reference ID of container create batch request.
          type: string
        reason:
          description: failure reason of record.
          type: string
      type: object
    BatchResponseSuccess:
      properties:
        refID:
          description: reference ID of container create batch request.
          type: string
        id:
          description: "unique identifier of each record, in this case it will be\
            \ id of the container."
          type: string
      type: object
    ContainerBatchResponse:
      example:
        request:
          method: null
          queryString: queryString
          body: "{}"
          uri: uri
        data: null
      properties:
        data:
          $ref: '#/components/schemas/ContainerBatchResponseData'
        request:
          $ref: '#/components/schemas/Request'
      type: object
    EntityUpdateRequest:
      description: Update entity
      example:
        isEnabled: true
        description: description
        events:
        - events
        - events
        - events
        - events
        - events
      properties:
        description:
          description: Short description of the entity. Max length 64 characters.
          type: string
        events:
          description: List of valid events that can be applied on this entity
          items:
            type: string
          maxItems: 999
          minItems: 1
          type: array
        isEnabled:
          default: true
          description: True - Entity is valid & usable. False - Entity is not usable
          type: boolean
      required:
      - description
      - events
      type: object
    ContainerDataFileUpdateRequest:
      properties:
        file:
          format: binary
          type: string
        callback:
          $ref: '#/components/schemas/ContainerTypeUpdateRequest_callback'
      required:
      - file
      type: object
    BatchSuccessResponse:
      allOf:
      - $ref: '#/components/schemas/BatchSuccessResponse_allOf'
    ContainerBatchUpdate:
      example:
        data:
          callback: "{}"
        containerId: containerId
      properties:
        containerId:
          description: unique identifier of each container
          type: string
        data:
          $ref: '#/components/schemas/ContainerUpdateRequest'
      type: object
    BatchCallbackURL:
      example:
        meta: "{}"
        url: url
      properties:
        url:
          description: URL to notify the outcome of the batch request.
          type: string
        meta:
          type: object
      type: object
    EventsSuccessResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/EventsResponse'
      type: object
      example: null
    EventsOrphanResponse_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/EventOrphanResponse'
          type: array
      type: object
      example: null
    ReasonsSuccessResponse_allOf_data:
      properties:
        description:
          description: Short description of the reason. Max length 64 characters.
          type: string
        isEnabled:
          default: true
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
        reasonCode:
          description: Reason Code
          type: string
      type: object
      example: null
    ReasonsSuccessResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/ReasonsSuccessResponse_allOf_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
      example: null
    ReasonsOrphanResponse_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReasonResponse'
          type: array
        request:
          $ref: '#/components/schemas/Request'
      type: object
      example: null
    EntityStateValidationResponse_allOf_data:
      properties:
        valid:
          description: True - Event Code is valid & usable. False - Event Code is
            not usable
          type: boolean
      type: object
      example: null
    EntityStateValidationResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/EntityStateValidationResponse_allOf_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
      example: null
    CompletedState_allOf:
      properties:
        terminalStates:
          description: terminal-state
          items:
            type: string
          type: array
      type: object
      example: null
    cost_unit:
      description: Represents unit price of the item.
      properties:
        amount:
          description: The value of amount accurate to three decimal places.
          type: number
        currency:
          description: Currency of the price of the item.
          type: string
      type: object
    cost_total:
      description: Represents total price of the item.
      properties:
        amount:
          description: The value of amount accurate to three decimal places.
          type: number
        currency:
          description: Currency of the price of the item.
          type: string
      type: object
    EventDataValidation_allOf:
      properties:
        blocking:
          default: true
          description: Specifies whether we need to block the event transition in
            case the attribute validation is failed or not.
          type: boolean
      type: object
      example: null
    ContainerTypeUpdateRequest_callback:
      example:
        meta: "{}"
        url: https://delhivery.requestcatcher.com/
      properties:
        url:
          example: https://delhivery.requestcatcher.com/
          format: uri
          type: string
        meta:
          type: object
      type: object
    AttributeConfig_defaultValue:
      anyOf:
      - type: number
      - type: string
      - type: boolean
    ContainerUpdateAttributes_trackingDetails_inner:
      properties:
        operator:
          description: Field to specify the owner of the tracking ID.
          example: Delhivery
          maxLength: 64
          minLength: 3
          type: string
        trackingId:
          example: "132121232423232"
          maxLength: 128
          minLength: 1
          type: string
        isPrimary:
          default: false
          description: it defines whether it is a primary tracking id or not. If not
            defined we assume first tracking id as primary tracking id.
          type: boolean
      required:
      - operator
      - trackingId
      type: object
    ContainerCreateAttributes_trackingDetails_inner:
      properties:
        operator:
          description: Field to specify the owner of the tracking ID.
          example: Delhivery
          maxLength: 64
          minLength: 3
          type: string
        trackingId:
          example: "132121232423232"
          maxLength: 128
          minLength: 1
          type: string
        isPrimary:
          default: false
          description: It defines whether it is a primary tracking id or not. If non
            of tracking details is set as primary we assume first tracking id as a
            primary tracking id.
          type: boolean
      required:
      - operator
      - trackingId
      type: object
    GetErrorResponse_allOf_data:
      properties:
        id:
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
      type: object
      example: null
    GetErrorResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/GetErrorResponse_allOf_data'
      type: object
      example: null
    ContainerTypeResponse_data:
      allOf:
      - $ref: '#/components/schemas/ContainerTypeMetaResponse'
    ContainerTypesResponse_data_meta:
      example:
        totalElements: 0.8008281904610115
      properties:
        totalElements:
          type: number
      type: object
    ContainerTypesResponse_data:
      example:
        meta:
          totalElements: 0.8008281904610115
        containerTypes:
        - entityCode: entityCode
          id: id
        - entityCode: entityCode
          id: id
      properties:
        meta:
          $ref: '#/components/schemas/ContainerTypesResponse_data_meta'
        containerTypes:
          items:
            $ref: '#/components/schemas/ContainerTypeConfigResponse'
          type: array
      type: object
    ContainersResponse_data:
      example:
        meta:
          totalElements: 0.8008281904610115
        containers:
        - null
        - null
      properties:
        meta:
          $ref: '#/components/schemas/ContainerTypesResponse_data_meta'
        containers:
          items:
            $ref: '#/components/schemas/ContainerResponseData'
          type: array
      type: object
    ContainerChangeLogResponse_data:
      properties:
        meta:
          $ref: '#/components/schemas/ContainerTypesResponse_data_meta'
        log:
          items:
            $ref: '#/components/schemas/ContainerBaseChangeLogResponse'
          type: array
      type: object
    ContainerTypeChangeLog_allOf:
      properties:
        cdc:
          description: Container type change log data.
          type: object
      required:
      - cdc
      type: object
      example: null
    ContainerTypeChangeLogResponse_data:
      properties:
        meta:
          $ref: '#/components/schemas/ContainerTypesResponse_data_meta'
        log:
          items:
            $ref: '#/components/schemas/ContainerTypeChangeLog'
          type: array
      type: object
    SuccessResponse_allOf_data:
      properties:
        id:
          description: Unique ID. Combination of entity name and UUID.
          maxLength: 128
          minLength: 1
          type: string
      type: object
      example: null
    SuccessResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/SuccessResponse_allOf_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
      example: null
    EventsAllSuccessResponse_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/EventsResponse'
          type: array
      type: object
      example: null
    ContainerCDC_allOf:
      properties:
        event:
          $ref: '#/components/schemas/Event'
      required:
      - event
      type: object
      example: null
    ContainerBaseChangeLogResponse_allOf:
      properties:
        cdc:
          $ref: '#/components/schemas/ContainerCDC'
      required:
      - cdc
      type: object
      example: null
    ChildContainerResponse_data:
      example:
        id: id
        operation: null
      properties:
        id:
          description: container id
          type: string
        operation:
          $ref: '#/components/schemas/Child'
      type: object
    ContainerCallbackResponse_data:
      description: response data
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    ContainerStateCallbackResponse_data:
      properties:
        id:
          example: 123e4567-e89b-42d3-a456-556642440000
          type: string
        state:
          description: Represents state of the container.The value will of the format
            <state>:<substate>
          example: created:created
          maxLength: 64
          minLength: 3
          type: string
      type: object
    ContainerStateEventCallbackResponse_data_event:
      example:
        data: "{}"
        name: name
        propagate: false
        source:
          appId: appId
          userId: userId
          locId: locId
        timestamp: 0
      properties:
        name:
          description: Represents name of the event for state transition
          maxLength: 64
          minLength: 3
          type: string
        timestamp:
          description: Represents the timestamp of the event occured.
          type: integer
        propagate:
          default: false
          description: propagate flag indicate whether these events need to propogate
            on child containers or not.
          type: boolean
        data:
          description: "Represents event data values, if any, for this event"
          type: object
        source:
          $ref: '#/components/schemas/EventSource'
      required:
      - name
      type: object
    ContainerStateEventCallbackResponse_data:
      example:
        id: 123e4567-e89b-42d3-a456-556642440000
        state: created:created
        event:
          data: "{}"
          name: name
          propagate: false
          source:
            appId: appId
            userId: userId
            locId: locId
          timestamp: 0
      properties:
        id:
          example: 123e4567-e89b-42d3-a456-556642440000
          type: string
        state:
          description: Represents state of the container.The value will of the format
            <state>:<substate>
          example: created:created
          maxLength: 64
          minLength: 3
          type: string
        event:
          $ref: '#/components/schemas/ContainerStateEventCallbackResponse_data_event'
      type: object
    BatchSuccessResponse_allOf_data:
      properties:
        id:
          description: Unique UUID of a batch request.
          maxLength: 64
          minLength: 1
          pattern: "^batch:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          type: string
      type: object
      example: null
    BatchSuccessResponse_allOf:
      properties:
        data:
          $ref: '#/components/schemas/BatchSuccessResponse_allOf_data'
        request:
          $ref: '#/components/schemas/Request'
      type: object
      example: null
