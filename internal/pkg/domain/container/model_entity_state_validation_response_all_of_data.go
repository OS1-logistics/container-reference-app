/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EntityStateValidationResponseAllOfData struct for EntityStateValidationResponseAllOfData
type EntityStateValidationResponseAllOfData struct {
	// True - Event Code is valid & usable. False - Event Code is not usable
	Valid *bool `json:"valid,omitempty"`
}

// NewEntityStateValidationResponseAllOfData instantiates a new EntityStateValidationResponseAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityStateValidationResponseAllOfData() *EntityStateValidationResponseAllOfData {
	this := EntityStateValidationResponseAllOfData{}
	return &this
}

// NewEntityStateValidationResponseAllOfDataWithDefaults instantiates a new EntityStateValidationResponseAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityStateValidationResponseAllOfDataWithDefaults() *EntityStateValidationResponseAllOfData {
	this := EntityStateValidationResponseAllOfData{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *EntityStateValidationResponseAllOfData) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityStateValidationResponseAllOfData) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *EntityStateValidationResponseAllOfData) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *EntityStateValidationResponseAllOfData) SetValid(v bool) {
	o.Valid = &v
}

func (o EntityStateValidationResponseAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableEntityStateValidationResponseAllOfData struct {
	value *EntityStateValidationResponseAllOfData
	isSet bool
}

func (v NullableEntityStateValidationResponseAllOfData) Get() *EntityStateValidationResponseAllOfData {
	return v.value
}

func (v *NullableEntityStateValidationResponseAllOfData) Set(val *EntityStateValidationResponseAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityStateValidationResponseAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityStateValidationResponseAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityStateValidationResponseAllOfData(val *EntityStateValidationResponseAllOfData) *NullableEntityStateValidationResponseAllOfData {
	return &NullableEntityStateValidationResponseAllOfData{value: val, isSet: true}
}

func (v NullableEntityStateValidationResponseAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityStateValidationResponseAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


