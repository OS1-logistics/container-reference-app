/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerBatchCallbackResponse Represents callback url, which can be called to notify the status of API request.
type ContainerBatchCallbackResponse struct {
	// tenant id.
	TenantId *string `json:"tenantId,omitempty"`
	// container type.
	ContainerType *string `json:"containerType,omitempty"`
	Status *CallbackStatus `json:"status,omitempty"`
	// failure reason in case of execution is failed.
	Reason *string `json:"reason,omitempty"`
	Data *ContainerBatchResponseData `json:"data,omitempty"`
}

// NewContainerBatchCallbackResponse instantiates a new ContainerBatchCallbackResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerBatchCallbackResponse() *ContainerBatchCallbackResponse {
	this := ContainerBatchCallbackResponse{}
	return &this
}

// NewContainerBatchCallbackResponseWithDefaults instantiates a new ContainerBatchCallbackResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerBatchCallbackResponseWithDefaults() *ContainerBatchCallbackResponse {
	this := ContainerBatchCallbackResponse{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ContainerBatchCallbackResponse) GetTenantId() string {
	if o == nil || isNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchCallbackResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || isNil(o.TenantId) {
    return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ContainerBatchCallbackResponse) HasTenantId() bool {
	if o != nil && !isNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ContainerBatchCallbackResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetContainerType returns the ContainerType field value if set, zero value otherwise.
func (o *ContainerBatchCallbackResponse) GetContainerType() string {
	if o == nil || isNil(o.ContainerType) {
		var ret string
		return ret
	}
	return *o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchCallbackResponse) GetContainerTypeOk() (*string, bool) {
	if o == nil || isNil(o.ContainerType) {
    return nil, false
	}
	return o.ContainerType, true
}

// HasContainerType returns a boolean if a field has been set.
func (o *ContainerBatchCallbackResponse) HasContainerType() bool {
	if o != nil && !isNil(o.ContainerType) {
		return true
	}

	return false
}

// SetContainerType gets a reference to the given string and assigns it to the ContainerType field.
func (o *ContainerBatchCallbackResponse) SetContainerType(v string) {
	o.ContainerType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContainerBatchCallbackResponse) GetStatus() CallbackStatus {
	if o == nil || isNil(o.Status) {
		var ret CallbackStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchCallbackResponse) GetStatusOk() (*CallbackStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContainerBatchCallbackResponse) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CallbackStatus and assigns it to the Status field.
func (o *ContainerBatchCallbackResponse) SetStatus(v CallbackStatus) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ContainerBatchCallbackResponse) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchCallbackResponse) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
    return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ContainerBatchCallbackResponse) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ContainerBatchCallbackResponse) SetReason(v string) {
	o.Reason = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ContainerBatchCallbackResponse) GetData() ContainerBatchResponseData {
	if o == nil || isNil(o.Data) {
		var ret ContainerBatchResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchCallbackResponse) GetDataOk() (*ContainerBatchResponseData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ContainerBatchCallbackResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ContainerBatchResponseData and assigns it to the Data field.
func (o *ContainerBatchCallbackResponse) SetData(v ContainerBatchResponseData) {
	o.Data = &v
}

func (o ContainerBatchCallbackResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !isNil(o.ContainerType) {
		toSerialize["containerType"] = o.ContainerType
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableContainerBatchCallbackResponse struct {
	value *ContainerBatchCallbackResponse
	isSet bool
}

func (v NullableContainerBatchCallbackResponse) Get() *ContainerBatchCallbackResponse {
	return v.value
}

func (v *NullableContainerBatchCallbackResponse) Set(val *ContainerBatchCallbackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerBatchCallbackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerBatchCallbackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerBatchCallbackResponse(val *ContainerBatchCallbackResponse) *NullableContainerBatchCallbackResponse {
	return &NullableContainerBatchCallbackResponse{value: val, isSet: true}
}

func (v NullableContainerBatchCallbackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerBatchCallbackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


