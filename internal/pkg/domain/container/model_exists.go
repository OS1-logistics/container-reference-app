/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// Exists struct for Exists
type Exists struct {
	Key *string `json:"key,omitempty"`
}

// NewExists instantiates a new Exists object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExists() *Exists {
	this := Exists{}
	return &this
}

// NewExistsWithDefaults instantiates a new Exists object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistsWithDefaults() *Exists {
	this := Exists{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Exists) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exists) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
    return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Exists) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Exists) SetKey(v string) {
	o.Key = &v
}

func (o Exists) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableExists struct {
	value *Exists
	isSet bool
}

func (v NullableExists) Get() *Exists {
	return v.value
}

func (v *NullableExists) Set(val *Exists) {
	v.value = val
	v.isSet = true
}

func (v NullableExists) IsSet() bool {
	return v.isSet
}

func (v *NullableExists) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExists(val *Exists) *NullableExists {
	return &NullableExists{value: val, isSet: true}
}

func (v NullableExists) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExists) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


