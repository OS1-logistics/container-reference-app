/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerStateEventCallbackResponseData struct for ContainerStateEventCallbackResponseData
type ContainerStateEventCallbackResponseData struct {
	Id *string `json:"id,omitempty"`
	// Represents state of the container.The value will of the format <state>:<substate>
	State *string `json:"state,omitempty"`
	Event *ContainerStateEventCallbackResponseDataEvent `json:"event,omitempty"`
}

// NewContainerStateEventCallbackResponseData instantiates a new ContainerStateEventCallbackResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerStateEventCallbackResponseData() *ContainerStateEventCallbackResponseData {
	this := ContainerStateEventCallbackResponseData{}
	return &this
}

// NewContainerStateEventCallbackResponseDataWithDefaults instantiates a new ContainerStateEventCallbackResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerStateEventCallbackResponseDataWithDefaults() *ContainerStateEventCallbackResponseData {
	this := ContainerStateEventCallbackResponseData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContainerStateEventCallbackResponseData) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStateEventCallbackResponseData) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContainerStateEventCallbackResponseData) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContainerStateEventCallbackResponseData) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ContainerStateEventCallbackResponseData) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStateEventCallbackResponseData) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ContainerStateEventCallbackResponseData) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ContainerStateEventCallbackResponseData) SetState(v string) {
	o.State = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *ContainerStateEventCallbackResponseData) GetEvent() ContainerStateEventCallbackResponseDataEvent {
	if o == nil || isNil(o.Event) {
		var ret ContainerStateEventCallbackResponseDataEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStateEventCallbackResponseData) GetEventOk() (*ContainerStateEventCallbackResponseDataEvent, bool) {
	if o == nil || isNil(o.Event) {
    return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *ContainerStateEventCallbackResponseData) HasEvent() bool {
	if o != nil && !isNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given ContainerStateEventCallbackResponseDataEvent and assigns it to the Event field.
func (o *ContainerStateEventCallbackResponseData) SetEvent(v ContainerStateEventCallbackResponseDataEvent) {
	o.Event = &v
}

func (o ContainerStateEventCallbackResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return json.Marshal(toSerialize)
}

type NullableContainerStateEventCallbackResponseData struct {
	value *ContainerStateEventCallbackResponseData
	isSet bool
}

func (v NullableContainerStateEventCallbackResponseData) Get() *ContainerStateEventCallbackResponseData {
	return v.value
}

func (v *NullableContainerStateEventCallbackResponseData) Set(val *ContainerStateEventCallbackResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerStateEventCallbackResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerStateEventCallbackResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerStateEventCallbackResponseData(val *ContainerStateEventCallbackResponseData) *NullableContainerStateEventCallbackResponseData {
	return &NullableContainerStateEventCallbackResponseData{value: val, isSet: true}
}

func (v NullableContainerStateEventCallbackResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerStateEventCallbackResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


