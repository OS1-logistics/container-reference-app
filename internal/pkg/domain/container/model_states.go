/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// States struct for States
type States struct {
	Created CreatedState `json:"created"`
	Opened OpenedState `json:"opened"`
	Closed ClosedState `json:"closed"`
	Completed CompletedState `json:"completed"`
}

// NewStates instantiates a new States object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStates(created CreatedState, opened OpenedState, closed ClosedState, completed CompletedState) *States {
	this := States{}
	this.Created = created
	this.Opened = opened
	this.Closed = closed
	this.Completed = completed
	return &this
}

// NewStatesWithDefaults instantiates a new States object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatesWithDefaults() *States {
	this := States{}
	return &this
}

// GetCreated returns the Created field value
func (o *States) GetCreated() CreatedState {
	if o == nil {
		var ret CreatedState
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *States) GetCreatedOk() (*CreatedState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *States) SetCreated(v CreatedState) {
	o.Created = v
}

// GetOpened returns the Opened field value
func (o *States) GetOpened() OpenedState {
	if o == nil {
		var ret OpenedState
		return ret
	}

	return o.Opened
}

// GetOpenedOk returns a tuple with the Opened field value
// and a boolean to check if the value has been set.
func (o *States) GetOpenedOk() (*OpenedState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Opened, true
}

// SetOpened sets field value
func (o *States) SetOpened(v OpenedState) {
	o.Opened = v
}

// GetClosed returns the Closed field value
func (o *States) GetClosed() ClosedState {
	if o == nil {
		var ret ClosedState
		return ret
	}

	return o.Closed
}

// GetClosedOk returns a tuple with the Closed field value
// and a boolean to check if the value has been set.
func (o *States) GetClosedOk() (*ClosedState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Closed, true
}

// SetClosed sets field value
func (o *States) SetClosed(v ClosedState) {
	o.Closed = v
}

// GetCompleted returns the Completed field value
func (o *States) GetCompleted() CompletedState {
	if o == nil {
		var ret CompletedState
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *States) GetCompletedOk() (*CompletedState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *States) SetCompleted(v CompletedState) {
	o.Completed = v
}

func (o States) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["opened"] = o.Opened
	}
	if true {
		toSerialize["closed"] = o.Closed
	}
	if true {
		toSerialize["completed"] = o.Completed
	}
	return json.Marshal(toSerialize)
}

type NullableStates struct {
	value *States
	isSet bool
}

func (v NullableStates) Get() *States {
	return v.value
}

func (v *NullableStates) Set(val *States) {
	v.value = val
	v.isSet = true
}

func (v NullableStates) IsSet() bool {
	return v.isSet
}

func (v *NullableStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStates(val *States) *NullableStates {
	return &NullableStates{value: val, isSet: true}
}

func (v NullableStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


