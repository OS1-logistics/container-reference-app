/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// Regex struct for Regex
type Regex struct {
	Key *string `json:"key,omitempty"`
	Regex *string `json:"regex,omitempty"`
}

// NewRegex instantiates a new Regex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegex() *Regex {
	this := Regex{}
	return &this
}

// NewRegexWithDefaults instantiates a new Regex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegexWithDefaults() *Regex {
	this := Regex{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Regex) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regex) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
    return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Regex) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Regex) SetKey(v string) {
	o.Key = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *Regex) GetRegex() string {
	if o == nil || isNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regex) GetRegexOk() (*string, bool) {
	if o == nil || isNil(o.Regex) {
    return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *Regex) HasRegex() bool {
	if o != nil && !isNil(o.Regex) {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *Regex) SetRegex(v string) {
	o.Regex = &v
}

func (o Regex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}
	return json.Marshal(toSerialize)
}

type NullableRegex struct {
	value *Regex
	isSet bool
}

func (v NullableRegex) Get() *Regex {
	return v.value
}

func (v *NullableRegex) Set(val *Regex) {
	v.value = val
	v.isSet = true
}

func (v NullableRegex) IsSet() bool {
	return v.isSet
}

func (v *NullableRegex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegex(val *Regex) *NullableRegex {
	return &NullableRegex{value: val, isSet: true}
}

func (v NullableRegex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


