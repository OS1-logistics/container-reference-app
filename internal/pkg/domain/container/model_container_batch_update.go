/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ContainerBatchUpdate struct for ContainerBatchUpdate
type ContainerBatchUpdate struct {
	// unique identifier of each container
	ContainerId *string `json:"containerId,omitempty"`
	Data *ContainerUpdateRequest `json:"data,omitempty"`
}

// NewContainerBatchUpdate instantiates a new ContainerBatchUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerBatchUpdate() *ContainerBatchUpdate {
	this := ContainerBatchUpdate{}
	return &this
}

// NewContainerBatchUpdateWithDefaults instantiates a new ContainerBatchUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerBatchUpdateWithDefaults() *ContainerBatchUpdate {
	this := ContainerBatchUpdate{}
	return &this
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *ContainerBatchUpdate) GetContainerId() string {
	if o == nil || o.ContainerId == nil {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchUpdate) GetContainerIdOk() (*string, bool) {
	if o == nil || o.ContainerId == nil {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *ContainerBatchUpdate) HasContainerId() bool {
	if o != nil && o.ContainerId != nil {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *ContainerBatchUpdate) SetContainerId(v string) {
	o.ContainerId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ContainerBatchUpdate) GetData() ContainerUpdateRequest {
	if o == nil || o.Data == nil {
		var ret ContainerUpdateRequest
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerBatchUpdate) GetDataOk() (*ContainerUpdateRequest, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ContainerBatchUpdate) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ContainerUpdateRequest and assigns it to the Data field.
func (o *ContainerBatchUpdate) SetData(v ContainerUpdateRequest) {
	o.Data = &v
}

func (o ContainerBatchUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainerId != nil {
		toSerialize["containerId"] = o.ContainerId
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableContainerBatchUpdate struct {
	value *ContainerBatchUpdate
	isSet bool
}

func (v NullableContainerBatchUpdate) Get() *ContainerBatchUpdate {
	return v.value
}

func (v *NullableContainerBatchUpdate) Set(val *ContainerBatchUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerBatchUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerBatchUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerBatchUpdate(val *ContainerBatchUpdate) *NullableContainerBatchUpdate {
	return &NullableContainerBatchUpdate{value: val, isSet: true}
}

func (v NullableContainerBatchUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerBatchUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


