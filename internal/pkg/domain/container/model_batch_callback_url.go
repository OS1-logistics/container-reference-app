/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// BatchCallbackURL struct for BatchCallbackURL
type BatchCallbackURL struct {
	// URL to notify the outcome of the batch request.
	Url *string `json:"url,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
}

// NewBatchCallbackURL instantiates a new BatchCallbackURL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchCallbackURL() *BatchCallbackURL {
	this := BatchCallbackURL{}
	return &this
}

// NewBatchCallbackURLWithDefaults instantiates a new BatchCallbackURL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchCallbackURLWithDefaults() *BatchCallbackURL {
	this := BatchCallbackURL{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *BatchCallbackURL) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchCallbackURL) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *BatchCallbackURL) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *BatchCallbackURL) SetUrl(v string) {
	o.Url = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *BatchCallbackURL) GetMeta() map[string]interface{} {
	if o == nil || isNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchCallbackURL) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Meta) {
    return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *BatchCallbackURL) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *BatchCallbackURL) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o BatchCallbackURL) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableBatchCallbackURL struct {
	value *BatchCallbackURL
	isSet bool
}

func (v NullableBatchCallbackURL) Get() *BatchCallbackURL {
	return v.value
}

func (v *NullableBatchCallbackURL) Set(val *BatchCallbackURL) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchCallbackURL) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchCallbackURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchCallbackURL(val *BatchCallbackURL) *NullableBatchCallbackURL {
	return &NullableBatchCallbackURL{value: val, isSet: true}
}

func (v NullableBatchCallbackURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchCallbackURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


