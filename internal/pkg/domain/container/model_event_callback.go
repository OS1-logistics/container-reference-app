/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// EventCallback struct for EventCallback
type EventCallback struct {
	Callback *ContainerTypeUpdateRequestCallback `json:"callback,omitempty"`
}

// NewEventCallback instantiates a new EventCallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventCallback() *EventCallback {
	this := EventCallback{}
	return &this
}

// NewEventCallbackWithDefaults instantiates a new EventCallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventCallbackWithDefaults() *EventCallback {
	this := EventCallback{}
	return &this
}

// GetCallback returns the Callback field value if set, zero value otherwise.
func (o *EventCallback) GetCallback() ContainerTypeUpdateRequestCallback {
	if o == nil || o.Callback == nil {
		var ret ContainerTypeUpdateRequestCallback
		return ret
	}
	return *o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventCallback) GetCallbackOk() (*ContainerTypeUpdateRequestCallback, bool) {
	if o == nil || o.Callback == nil {
		return nil, false
	}
	return o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *EventCallback) HasCallback() bool {
	if o != nil && o.Callback != nil {
		return true
	}

	return false
}

// SetCallback gets a reference to the given ContainerTypeUpdateRequestCallback and assigns it to the Callback field.
func (o *EventCallback) SetCallback(v ContainerTypeUpdateRequestCallback) {
	o.Callback = &v
}

func (o EventCallback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Callback != nil {
		toSerialize["callback"] = o.Callback
	}
	return json.Marshal(toSerialize)
}

type NullableEventCallback struct {
	value *EventCallback
	isSet bool
}

func (v NullableEventCallback) Get() *EventCallback {
	return v.value
}

func (v *NullableEventCallback) Set(val *EventCallback) {
	v.value = val
	v.isSet = true
}

func (v NullableEventCallback) IsSet() bool {
	return v.isSet
}

func (v *NullableEventCallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventCallback(val *EventCallback) *NullableEventCallback {
	return &NullableEventCallback{value: val, isSet: true}
}

func (v NullableEventCallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventCallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


