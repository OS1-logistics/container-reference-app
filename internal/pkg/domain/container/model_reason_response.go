/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ReasonResponse struct for ReasonResponse
type ReasonResponse struct {
	// Short description of the reason. Max length 64 characters.
	Description *string `json:"description,omitempty"`
	// True - Event Code is valid & usable. False - Event Code is not usable
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// reason Code
	ReasonCode *string `json:"reasonCode,omitempty"`
}

// NewReasonResponse instantiates a new ReasonResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonResponse() *ReasonResponse {
	this := ReasonResponse{}
	return &this
}

// NewReasonResponseWithDefaults instantiates a new ReasonResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonResponseWithDefaults() *ReasonResponse {
	this := ReasonResponse{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReasonResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReasonResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReasonResponse) SetDescription(v string) {
	o.Description = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *ReasonResponse) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonResponse) GetIsEnabledOk() (*bool, bool) {
	if o == nil || o.IsEnabled == nil {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ReasonResponse) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *ReasonResponse) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ReasonResponse) GetReasonCode() string {
	if o == nil || o.ReasonCode == nil {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonResponse) GetReasonCodeOk() (*string, bool) {
	if o == nil || o.ReasonCode == nil {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ReasonResponse) HasReasonCode() bool {
	if o != nil && o.ReasonCode != nil {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *ReasonResponse) SetReasonCode(v string) {
	o.ReasonCode = &v
}

func (o ReasonResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IsEnabled != nil {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if o.ReasonCode != nil {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	return json.Marshal(toSerialize)
}

type NullableReasonResponse struct {
	value *ReasonResponse
	isSet bool
}

func (v NullableReasonResponse) Get() *ReasonResponse {
	return v.value
}

func (v *NullableReasonResponse) Set(val *ReasonResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonResponse(val *ReasonResponse) *NullableReasonResponse {
	return &NullableReasonResponse{value: val, isSet: true}
}

func (v NullableReasonResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


