/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// ReasonsSuccessResponseAllOf struct for ReasonsSuccessResponseAllOf
type ReasonsSuccessResponseAllOf struct {
	Data *ReasonsSuccessResponseAllOfData `json:"data,omitempty"`
	Request *Request `json:"request,omitempty"`
}

// NewReasonsSuccessResponseAllOf instantiates a new ReasonsSuccessResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonsSuccessResponseAllOf() *ReasonsSuccessResponseAllOf {
	this := ReasonsSuccessResponseAllOf{}
	return &this
}

// NewReasonsSuccessResponseAllOfWithDefaults instantiates a new ReasonsSuccessResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonsSuccessResponseAllOfWithDefaults() *ReasonsSuccessResponseAllOf {
	this := ReasonsSuccessResponseAllOf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ReasonsSuccessResponseAllOf) GetData() ReasonsSuccessResponseAllOfData {
	if o == nil || o.Data == nil {
		var ret ReasonsSuccessResponseAllOfData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonsSuccessResponseAllOf) GetDataOk() (*ReasonsSuccessResponseAllOfData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ReasonsSuccessResponseAllOf) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ReasonsSuccessResponseAllOfData and assigns it to the Data field.
func (o *ReasonsSuccessResponseAllOf) SetData(v ReasonsSuccessResponseAllOfData) {
	o.Data = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ReasonsSuccessResponseAllOf) GetRequest() Request {
	if o == nil || o.Request == nil {
		var ret Request
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonsSuccessResponseAllOf) GetRequestOk() (*Request, bool) {
	if o == nil || o.Request == nil {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ReasonsSuccessResponseAllOf) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Request and assigns it to the Request field.
func (o *ReasonsSuccessResponseAllOf) SetRequest(v Request) {
	o.Request = &v
}

func (o ReasonsSuccessResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Request != nil {
		toSerialize["request"] = o.Request
	}
	return json.Marshal(toSerialize)
}

type NullableReasonsSuccessResponseAllOf struct {
	value *ReasonsSuccessResponseAllOf
	isSet bool
}

func (v NullableReasonsSuccessResponseAllOf) Get() *ReasonsSuccessResponseAllOf {
	return v.value
}

func (v *NullableReasonsSuccessResponseAllOf) Set(val *ReasonsSuccessResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonsSuccessResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonsSuccessResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonsSuccessResponseAllOf(val *ReasonsSuccessResponseAllOf) *NullableReasonsSuccessResponseAllOf {
	return &NullableReasonsSuccessResponseAllOf{value: val, isSet: true}
}

func (v NullableReasonsSuccessResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonsSuccessResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


