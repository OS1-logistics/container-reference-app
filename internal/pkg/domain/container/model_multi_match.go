/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// MultiMatch struct for MultiMatch
type MultiMatch struct {
	Query *string `json:"query,omitempty"`
	Fields []string `json:"fields,omitempty"`
}

// NewMultiMatch instantiates a new MultiMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiMatch() *MultiMatch {
	this := MultiMatch{}
	return &this
}

// NewMultiMatchWithDefaults instantiates a new MultiMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiMatchWithDefaults() *MultiMatch {
	this := MultiMatch{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *MultiMatch) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiMatch) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *MultiMatch) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *MultiMatch) SetQuery(v string) {
	o.Query = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *MultiMatch) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiMatch) GetFieldsOk() ([]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *MultiMatch) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *MultiMatch) SetFields(v []string) {
	o.Fields = v
}

func (o MultiMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableMultiMatch struct {
	value *MultiMatch
	isSet bool
}

func (v NullableMultiMatch) Get() *MultiMatch {
	return v.value
}

func (v *NullableMultiMatch) Set(val *MultiMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiMatch(val *MultiMatch) *NullableMultiMatch {
	return &NullableMultiMatch{value: val, isSet: true}
}

func (v NullableMultiMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


