/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerdomain

import (
	"encoding/json"
)

// TrackingData struct for TrackingData
type TrackingData struct {
	Tracking []ContainerEvents `json:"tracking,omitempty"`
	PendingContainers []string `json:"pendingContainers,omitempty"`
}

// NewTrackingData instantiates a new TrackingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingData() *TrackingData {
	this := TrackingData{}
	return &this
}

// NewTrackingDataWithDefaults instantiates a new TrackingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingDataWithDefaults() *TrackingData {
	this := TrackingData{}
	return &this
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *TrackingData) GetTracking() []ContainerEvents {
	if o == nil || isNil(o.Tracking) {
		var ret []ContainerEvents
		return ret
	}
	return o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingData) GetTrackingOk() ([]ContainerEvents, bool) {
	if o == nil || isNil(o.Tracking) {
    return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *TrackingData) HasTracking() bool {
	if o != nil && !isNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given []ContainerEvents and assigns it to the Tracking field.
func (o *TrackingData) SetTracking(v []ContainerEvents) {
	o.Tracking = v
}

// GetPendingContainers returns the PendingContainers field value if set, zero value otherwise.
func (o *TrackingData) GetPendingContainers() []string {
	if o == nil || isNil(o.PendingContainers) {
		var ret []string
		return ret
	}
	return o.PendingContainers
}

// GetPendingContainersOk returns a tuple with the PendingContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingData) GetPendingContainersOk() ([]string, bool) {
	if o == nil || isNil(o.PendingContainers) {
    return nil, false
	}
	return o.PendingContainers, true
}

// HasPendingContainers returns a boolean if a field has been set.
func (o *TrackingData) HasPendingContainers() bool {
	if o != nil && !isNil(o.PendingContainers) {
		return true
	}

	return false
}

// SetPendingContainers gets a reference to the given []string and assigns it to the PendingContainers field.
func (o *TrackingData) SetPendingContainers(v []string) {
	o.PendingContainers = v
}

func (o TrackingData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !isNil(o.PendingContainers) {
		toSerialize["pendingContainers"] = o.PendingContainers
	}
	return json.Marshal(toSerialize)
}

type NullableTrackingData struct {
	value *TrackingData
	isSet bool
}

func (v NullableTrackingData) Get() *TrackingData {
	return v.value
}

func (v *NullableTrackingData) Set(val *TrackingData) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingData) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingData(val *TrackingData) *NullableTrackingData {
	return &NullableTrackingData{value: val, isSet: true}
}

func (v NullableTrackingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


