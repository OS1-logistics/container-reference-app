/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// AppUpdateRequest struct for AppUpdateRequest
type AppUpdateRequest struct {
	// Description of the app.
	Description NullableString `json:"description,omitempty"`
	// When `isActive` = False, the app will be ignored for update.
	IsActive *bool `json:"isActive,omitempty"`
	// If app is not mapped to any other tenant, deleted the app.
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// Array of redirect URIs allowed.
	RedirectUri []string `json:"redirectUri,omitempty"`
	// Client ID of the app.
	ClientId *string `json:"clientId,omitempty"`
	ClientSecret *AppUpdateRequestClientSecret `json:"clientSecret,omitempty"`
}

// NewAppUpdateRequest instantiates a new AppUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUpdateRequest() *AppUpdateRequest {
	this := AppUpdateRequest{}
	return &this
}

// NewAppUpdateRequestWithDefaults instantiates a new AppUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUpdateRequestWithDefaults() *AppUpdateRequest {
	this := AppUpdateRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUpdateRequest) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AppUpdateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AppUpdateRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AppUpdateRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AppUpdateRequest) GetIsActive() bool {
	if o == nil || isNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUpdateRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || isNil(o.IsActive) {
    return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasIsActive() bool {
	if o != nil && !isNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AppUpdateRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *AppUpdateRequest) GetIsDeleted() bool {
	if o == nil || isNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUpdateRequest) GetIsDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.IsDeleted) {
    return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasIsDeleted() bool {
	if o != nil && !isNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *AppUpdateRequest) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *AppUpdateRequest) GetRedirectUri() []string {
	if o == nil || isNil(o.RedirectUri) {
		var ret []string
		return ret
	}
	return o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUpdateRequest) GetRedirectUriOk() ([]string, bool) {
	if o == nil || isNil(o.RedirectUri) {
    return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasRedirectUri() bool {
	if o != nil && !isNil(o.RedirectUri) {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given []string and assigns it to the RedirectUri field.
func (o *AppUpdateRequest) SetRedirectUri(v []string) {
	o.RedirectUri = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *AppUpdateRequest) GetClientId() string {
	if o == nil || isNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUpdateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientId) {
    return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasClientId() bool {
	if o != nil && !isNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *AppUpdateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *AppUpdateRequest) GetClientSecret() AppUpdateRequestClientSecret {
	if o == nil || isNil(o.ClientSecret) {
		var ret AppUpdateRequestClientSecret
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUpdateRequest) GetClientSecretOk() (*AppUpdateRequestClientSecret, bool) {
	if o == nil || isNil(o.ClientSecret) {
    return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *AppUpdateRequest) HasClientSecret() bool {
	if o != nil && !isNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given AppUpdateRequestClientSecret and assigns it to the ClientSecret field.
func (o *AppUpdateRequest) SetClientSecret(v AppUpdateRequestClientSecret) {
	o.ClientSecret = &v
}

func (o AppUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !isNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !isNil(o.RedirectUri) {
		toSerialize["redirectUri"] = o.RedirectUri
	}
	if !isNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !isNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	return json.Marshal(toSerialize)
}

type NullableAppUpdateRequest struct {
	value *AppUpdateRequest
	isSet bool
}

func (v NullableAppUpdateRequest) Get() *AppUpdateRequest {
	return v.value
}

func (v *NullableAppUpdateRequest) Set(val *AppUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUpdateRequest(val *AppUpdateRequest) *NullableAppUpdateRequest {
	return &NullableAppUpdateRequest{value: val, isSet: true}
}

func (v NullableAppUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


