/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// PermissionResponse struct for PermissionResponse
type PermissionResponse struct {
	// Unique ID for permission assigned at the time of creation.
	PermissionId *string `json:"permissionId,omitempty"`
	// Named action that describes the operation permitted to be performed.
	Action *string `json:"action,omitempty"`
	// Unique ID of the app to which this permission belong. Format of ID is platform:app:<appName>.
	AppId interface{} `json:"appId,omitempty"`
	ResourceId *string `json:"resourceId,omitempty"`
	HttpMethod *string `json:"httpMethod,omitempty"`
	// Description of the permission.
	Description *string `json:"description,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// NewPermissionResponse instantiates a new PermissionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionResponse() *PermissionResponse {
	this := PermissionResponse{}
	return &this
}

// NewPermissionResponseWithDefaults instantiates a new PermissionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionResponseWithDefaults() *PermissionResponse {
	this := PermissionResponse{}
	return &this
}

// GetPermissionId returns the PermissionId field value if set, zero value otherwise.
func (o *PermissionResponse) GetPermissionId() string {
	if o == nil || o.PermissionId == nil {
		var ret string
		return ret
	}
	return *o.PermissionId
}

// GetPermissionIdOk returns a tuple with the PermissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetPermissionIdOk() (*string, bool) {
	if o == nil || o.PermissionId == nil {
		return nil, false
	}
	return o.PermissionId, true
}

// HasPermissionId returns a boolean if a field has been set.
func (o *PermissionResponse) HasPermissionId() bool {
	if o != nil && o.PermissionId != nil {
		return true
	}

	return false
}

// SetPermissionId gets a reference to the given string and assigns it to the PermissionId field.
func (o *PermissionResponse) SetPermissionId(v string) {
	o.PermissionId = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PermissionResponse) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PermissionResponse) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *PermissionResponse) SetAction(v string) {
	o.Action = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PermissionResponse) GetAppId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionResponse) GetAppIdOk() (*interface{}, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return &o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *PermissionResponse) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given interface{} and assigns it to the AppId field.
func (o *PermissionResponse) SetAppId(v interface{}) {
	o.AppId = v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *PermissionResponse) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *PermissionResponse) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *PermissionResponse) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *PermissionResponse) GetHttpMethod() string {
	if o == nil || o.HttpMethod == nil {
		var ret string
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetHttpMethodOk() (*string, bool) {
	if o == nil || o.HttpMethod == nil {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *PermissionResponse) HasHttpMethod() bool {
	if o != nil && o.HttpMethod != nil {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given string and assigns it to the HttpMethod field.
func (o *PermissionResponse) SetHttpMethod(v string) {
	o.HttpMethod = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PermissionResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PermissionResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PermissionResponse) SetDescription(v string) {
	o.Description = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *PermissionResponse) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *PermissionResponse) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *PermissionResponse) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *PermissionResponse) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionResponse) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *PermissionResponse) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *PermissionResponse) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

func (o PermissionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PermissionId != nil {
		toSerialize["permissionId"] = o.PermissionId
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	if o.HttpMethod != nil {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionResponse struct {
	value *PermissionResponse
	isSet bool
}

func (v NullablePermissionResponse) Get() *PermissionResponse {
	return v.value
}

func (v *NullablePermissionResponse) Set(val *PermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionResponse(val *PermissionResponse) *NullablePermissionResponse {
	return &NullablePermissionResponse{value: val, isSet: true}
}

func (v NullablePermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


