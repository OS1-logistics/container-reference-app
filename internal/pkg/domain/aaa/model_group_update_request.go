/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// GroupUpdateRequest struct for GroupUpdateRequest
type GroupUpdateRequest struct {
	Description *string `json:"description,omitempty"`
	Users *GroupUpdateRequestUsers `json:"users,omitempty"`
	// When `isActive` = False, the group will be ignored from updating until is `isActive` = True.
	IsActive *bool `json:"isActive,omitempty"`
	// When `isDeleted` = True, the group will be deleted and can't be accessed.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// NewGroupUpdateRequest instantiates a new GroupUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupUpdateRequest() *GroupUpdateRequest {
	this := GroupUpdateRequest{}
	return &this
}

// NewGroupUpdateRequestWithDefaults instantiates a new GroupUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupUpdateRequestWithDefaults() *GroupUpdateRequest {
	this := GroupUpdateRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupUpdateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupUpdateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *GroupUpdateRequest) GetUsers() GroupUpdateRequestUsers {
	if o == nil || o.Users == nil {
		var ret GroupUpdateRequestUsers
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdateRequest) GetUsersOk() (*GroupUpdateRequestUsers, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *GroupUpdateRequest) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given GroupUpdateRequestUsers and assigns it to the Users field.
func (o *GroupUpdateRequest) SetUsers(v GroupUpdateRequestUsers) {
	o.Users = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *GroupUpdateRequest) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdateRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *GroupUpdateRequest) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *GroupUpdateRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *GroupUpdateRequest) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdateRequest) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *GroupUpdateRequest) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *GroupUpdateRequest) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

func (o GroupUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	return json.Marshal(toSerialize)
}

type NullableGroupUpdateRequest struct {
	value *GroupUpdateRequest
	isSet bool
}

func (v NullableGroupUpdateRequest) Get() *GroupUpdateRequest {
	return v.value
}

func (v *NullableGroupUpdateRequest) Set(val *GroupUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUpdateRequest(val *GroupUpdateRequest) *NullableGroupUpdateRequest {
	return &NullableGroupUpdateRequest{value: val, isSet: true}
}

func (v NullableGroupUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


