/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// RoleUpdateRequest struct for RoleUpdateRequest
type RoleUpdateRequest struct {
	// Description of the role (for example, role created for admin users).
	Description *string `json:"description,omitempty"`
	// When `assignPermissions` =true, permissions will be added to the role. When `assignPermissions`= false, provided permissions will be removed from role.
	AssignPermissions *bool `json:"assignPermissions,omitempty"`
	// Permissions attached with this role. It contains array of permission IDs.
	Permissions []string `json:"permissions,omitempty"`
	// When `isActive` = False, the role will be ignored for granting permissions.
	IsActive *bool `json:"isActive,omitempty"`
	// When `isDeleted` = true, the role will be deleted and can't be accessed.
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// Boolean value indicates if the role can be granted to other apps or services.
	CanGrantToApps *bool `json:"canGrantToApps,omitempty"`
	// Boolean value indicates if this Role can be granted to user groups.
	CanGrantToUsers *bool `json:"canGrantToUsers,omitempty"`
	// Security level of the the role. Default is OPEN. Used to restrict the access level for the role.
	SecurityLevel *string `json:"securityLevel,omitempty"`
}

// NewRoleUpdateRequest instantiates a new RoleUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUpdateRequest() *RoleUpdateRequest {
	this := RoleUpdateRequest{}
	return &this
}

// NewRoleUpdateRequestWithDefaults instantiates a new RoleUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUpdateRequestWithDefaults() *RoleUpdateRequest {
	this := RoleUpdateRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetAssignPermissions returns the AssignPermissions field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetAssignPermissions() bool {
	if o == nil || isNil(o.AssignPermissions) {
		var ret bool
		return ret
	}
	return *o.AssignPermissions
}

// GetAssignPermissionsOk returns a tuple with the AssignPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetAssignPermissionsOk() (*bool, bool) {
	if o == nil || isNil(o.AssignPermissions) {
    return nil, false
	}
	return o.AssignPermissions, true
}

// HasAssignPermissions returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasAssignPermissions() bool {
	if o != nil && !isNil(o.AssignPermissions) {
		return true
	}

	return false
}

// SetAssignPermissions gets a reference to the given bool and assigns it to the AssignPermissions field.
func (o *RoleUpdateRequest) SetAssignPermissions(v bool) {
	o.AssignPermissions = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleUpdateRequest) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleUpdateRequest) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
    return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasPermissions() bool {
	if o != nil && isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *RoleUpdateRequest) SetPermissions(v []string) {
	o.Permissions = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetIsActive() bool {
	if o == nil || isNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || isNil(o.IsActive) {
    return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasIsActive() bool {
	if o != nil && !isNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *RoleUpdateRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetIsDeleted() bool {
	if o == nil || isNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetIsDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.IsDeleted) {
    return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasIsDeleted() bool {
	if o != nil && !isNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *RoleUpdateRequest) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetCanGrantToApps returns the CanGrantToApps field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetCanGrantToApps() bool {
	if o == nil || isNil(o.CanGrantToApps) {
		var ret bool
		return ret
	}
	return *o.CanGrantToApps
}

// GetCanGrantToAppsOk returns a tuple with the CanGrantToApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetCanGrantToAppsOk() (*bool, bool) {
	if o == nil || isNil(o.CanGrantToApps) {
    return nil, false
	}
	return o.CanGrantToApps, true
}

// HasCanGrantToApps returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasCanGrantToApps() bool {
	if o != nil && !isNil(o.CanGrantToApps) {
		return true
	}

	return false
}

// SetCanGrantToApps gets a reference to the given bool and assigns it to the CanGrantToApps field.
func (o *RoleUpdateRequest) SetCanGrantToApps(v bool) {
	o.CanGrantToApps = &v
}

// GetCanGrantToUsers returns the CanGrantToUsers field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetCanGrantToUsers() bool {
	if o == nil || isNil(o.CanGrantToUsers) {
		var ret bool
		return ret
	}
	return *o.CanGrantToUsers
}

// GetCanGrantToUsersOk returns a tuple with the CanGrantToUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetCanGrantToUsersOk() (*bool, bool) {
	if o == nil || isNil(o.CanGrantToUsers) {
    return nil, false
	}
	return o.CanGrantToUsers, true
}

// HasCanGrantToUsers returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasCanGrantToUsers() bool {
	if o != nil && !isNil(o.CanGrantToUsers) {
		return true
	}

	return false
}

// SetCanGrantToUsers gets a reference to the given bool and assigns it to the CanGrantToUsers field.
func (o *RoleUpdateRequest) SetCanGrantToUsers(v bool) {
	o.CanGrantToUsers = &v
}

// GetSecurityLevel returns the SecurityLevel field value if set, zero value otherwise.
func (o *RoleUpdateRequest) GetSecurityLevel() string {
	if o == nil || isNil(o.SecurityLevel) {
		var ret string
		return ret
	}
	return *o.SecurityLevel
}

// GetSecurityLevelOk returns a tuple with the SecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRequest) GetSecurityLevelOk() (*string, bool) {
	if o == nil || isNil(o.SecurityLevel) {
    return nil, false
	}
	return o.SecurityLevel, true
}

// HasSecurityLevel returns a boolean if a field has been set.
func (o *RoleUpdateRequest) HasSecurityLevel() bool {
	if o != nil && !isNil(o.SecurityLevel) {
		return true
	}

	return false
}

// SetSecurityLevel gets a reference to the given string and assigns it to the SecurityLevel field.
func (o *RoleUpdateRequest) SetSecurityLevel(v string) {
	o.SecurityLevel = &v
}

func (o RoleUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.AssignPermissions) {
		toSerialize["assignPermissions"] = o.AssignPermissions
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if !isNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !isNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !isNil(o.CanGrantToApps) {
		toSerialize["canGrantToApps"] = o.CanGrantToApps
	}
	if !isNil(o.CanGrantToUsers) {
		toSerialize["canGrantToUsers"] = o.CanGrantToUsers
	}
	if !isNil(o.SecurityLevel) {
		toSerialize["securityLevel"] = o.SecurityLevel
	}
	return json.Marshal(toSerialize)
}

type NullableRoleUpdateRequest struct {
	value *RoleUpdateRequest
	isSet bool
}

func (v NullableRoleUpdateRequest) Get() *RoleUpdateRequest {
	return v.value
}

func (v *NullableRoleUpdateRequest) Set(val *RoleUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUpdateRequest(val *RoleUpdateRequest) *NullableRoleUpdateRequest {
	return &NullableRoleUpdateRequest{value: val, isSet: true}
}

func (v NullableRoleUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


