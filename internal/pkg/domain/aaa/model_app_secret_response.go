/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// AppSecretResponse struct for AppSecretResponse
type AppSecretResponse struct {
	// Unique ID of the app.
	AppId *string `json:"appId,omitempty"`
	// Unique client-id of the app as registered on keycloak
	ClientId *string `json:"clientId,omitempty"`
	Secret *AppCreateRequestClientSecret `json:"secret,omitempty"`
}

// NewAppSecretResponse instantiates a new AppSecretResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppSecretResponse() *AppSecretResponse {
	this := AppSecretResponse{}
	return &this
}

// NewAppSecretResponseWithDefaults instantiates a new AppSecretResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppSecretResponseWithDefaults() *AppSecretResponse {
	this := AppSecretResponse{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *AppSecretResponse) GetAppId() string {
	if o == nil || isNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSecretResponse) GetAppIdOk() (*string, bool) {
	if o == nil || isNil(o.AppId) {
    return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *AppSecretResponse) HasAppId() bool {
	if o != nil && !isNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *AppSecretResponse) SetAppId(v string) {
	o.AppId = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *AppSecretResponse) GetClientId() string {
	if o == nil || isNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSecretResponse) GetClientIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientId) {
    return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *AppSecretResponse) HasClientId() bool {
	if o != nil && !isNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *AppSecretResponse) SetClientId(v string) {
	o.ClientId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *AppSecretResponse) GetSecret() AppCreateRequestClientSecret {
	if o == nil || isNil(o.Secret) {
		var ret AppCreateRequestClientSecret
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSecretResponse) GetSecretOk() (*AppCreateRequestClientSecret, bool) {
	if o == nil || isNil(o.Secret) {
    return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *AppSecretResponse) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given AppCreateRequestClientSecret and assigns it to the Secret field.
func (o *AppSecretResponse) SetSecret(v AppCreateRequestClientSecret) {
	o.Secret = &v
}

func (o AppSecretResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !isNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableAppSecretResponse struct {
	value *AppSecretResponse
	isSet bool
}

func (v NullableAppSecretResponse) Get() *AppSecretResponse {
	return v.value
}

func (v *NullableAppSecretResponse) Set(val *AppSecretResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSecretResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSecretResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSecretResponse(val *AppSecretResponse) *NullableAppSecretResponse {
	return &NullableAppSecretResponse{value: val, isSet: true}
}

func (v NullableAppSecretResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSecretResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


