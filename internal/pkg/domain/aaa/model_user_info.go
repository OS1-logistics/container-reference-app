/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// UserInfo struct for UserInfo
type UserInfo struct {
	// User nick name. Its combination of first name and last name.
	Nickname *string `json:"nickname,omitempty"`
	Email *string `json:"email,omitempty"`
	MobileNumber *MobileNumber `json:"mobileNumber,omitempty"`
	// First name of the user.
	FirstName *string `json:"firstName,omitempty"`
	// Middle name of the user.
	MiddleName *string `json:"middleName,omitempty"`
	// Last Name of the user.
	LastName *string `json:"lastName,omitempty"`
	// User ID of the user.
	UserId *string `json:"userId,omitempty"`
	// Tenant ID of the user.
	TenantId *string `json:"tenantId,omitempty"`
	// Participant ID of the user.
	ParticipantId *string `json:"participantId,omitempty"`
}

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo() *UserInfo {
	this := UserInfo{}
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *UserInfo) GetNickname() string {
	if o == nil || isNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetNicknameOk() (*string, bool) {
	if o == nil || isNil(o.Nickname) {
    return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *UserInfo) HasNickname() bool {
	if o != nil && !isNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *UserInfo) SetNickname(v string) {
	o.Nickname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserInfo) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserInfo) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetMobileNumber returns the MobileNumber field value if set, zero value otherwise.
func (o *UserInfo) GetMobileNumber() MobileNumber {
	if o == nil || isNil(o.MobileNumber) {
		var ret MobileNumber
		return ret
	}
	return *o.MobileNumber
}

// GetMobileNumberOk returns a tuple with the MobileNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetMobileNumberOk() (*MobileNumber, bool) {
	if o == nil || isNil(o.MobileNumber) {
    return nil, false
	}
	return o.MobileNumber, true
}

// HasMobileNumber returns a boolean if a field has been set.
func (o *UserInfo) HasMobileNumber() bool {
	if o != nil && !isNil(o.MobileNumber) {
		return true
	}

	return false
}

// SetMobileNumber gets a reference to the given MobileNumber and assigns it to the MobileNumber field.
func (o *UserInfo) SetMobileNumber(v MobileNumber) {
	o.MobileNumber = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserInfo) GetFirstName() string {
	if o == nil || isNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetFirstNameOk() (*string, bool) {
	if o == nil || isNil(o.FirstName) {
    return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserInfo) HasFirstName() bool {
	if o != nil && !isNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserInfo) SetFirstName(v string) {
	o.FirstName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *UserInfo) GetMiddleName() string {
	if o == nil || isNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetMiddleNameOk() (*string, bool) {
	if o == nil || isNil(o.MiddleName) {
    return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *UserInfo) HasMiddleName() bool {
	if o != nil && !isNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *UserInfo) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserInfo) GetLastName() string {
	if o == nil || isNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLastNameOk() (*string, bool) {
	if o == nil || isNil(o.LastName) {
    return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserInfo) HasLastName() bool {
	if o != nil && !isNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserInfo) SetLastName(v string) {
	o.LastName = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserInfo) GetUserId() string {
	if o == nil || isNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || isNil(o.UserId) {
    return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserInfo) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *UserInfo) GetTenantId() string {
	if o == nil || isNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetTenantIdOk() (*string, bool) {
	if o == nil || isNil(o.TenantId) {
    return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *UserInfo) HasTenantId() bool {
	if o != nil && !isNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *UserInfo) SetTenantId(v string) {
	o.TenantId = &v
}

// GetParticipantId returns the ParticipantId field value if set, zero value otherwise.
func (o *UserInfo) GetParticipantId() string {
	if o == nil || isNil(o.ParticipantId) {
		var ret string
		return ret
	}
	return *o.ParticipantId
}

// GetParticipantIdOk returns a tuple with the ParticipantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetParticipantIdOk() (*string, bool) {
	if o == nil || isNil(o.ParticipantId) {
    return nil, false
	}
	return o.ParticipantId, true
}

// HasParticipantId returns a boolean if a field has been set.
func (o *UserInfo) HasParticipantId() bool {
	if o != nil && !isNil(o.ParticipantId) {
		return true
	}

	return false
}

// SetParticipantId gets a reference to the given string and assigns it to the ParticipantId field.
func (o *UserInfo) SetParticipantId(v string) {
	o.ParticipantId = &v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.MobileNumber) {
		toSerialize["mobileNumber"] = o.MobileNumber
	}
	if !isNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !isNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !isNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !isNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !isNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !isNil(o.ParticipantId) {
		toSerialize["participantId"] = o.ParticipantId
	}
	return json.Marshal(toSerialize)
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


