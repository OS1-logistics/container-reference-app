/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// EmailPayload struct for EmailPayload
type EmailPayload struct {
	// Email of the user.
	EmailId *string `json:"emailId,omitempty"`
	Mobile *AuthReqOtpRequestMobile `json:"mobile,omitempty"`
	// The six digit number that the user may have received on their mobile or email.
	Otp string `json:"otp"`
	// The resource or API which needs to be authenticated using the OTP.
	Audience string `json:"audience"`
	// Can be only one of email or sms. If email is provided in this field then `emailId` key has to be present. If SMS is provided in this field then mobile object has to be present in the request payload.
	Mode *string `json:"mode,omitempty"`
}

// NewEmailPayload instantiates a new EmailPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailPayload(otp string, audience string) *EmailPayload {
	this := EmailPayload{}
	this.Otp = otp
	this.Audience = audience
	return &this
}

// NewEmailPayloadWithDefaults instantiates a new EmailPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailPayloadWithDefaults() *EmailPayload {
	this := EmailPayload{}
	return &this
}

// GetEmailId returns the EmailId field value if set, zero value otherwise.
func (o *EmailPayload) GetEmailId() string {
	if o == nil || o.EmailId == nil {
		var ret string
		return ret
	}
	return *o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPayload) GetEmailIdOk() (*string, bool) {
	if o == nil || o.EmailId == nil {
		return nil, false
	}
	return o.EmailId, true
}

// HasEmailId returns a boolean if a field has been set.
func (o *EmailPayload) HasEmailId() bool {
	if o != nil && o.EmailId != nil {
		return true
	}

	return false
}

// SetEmailId gets a reference to the given string and assigns it to the EmailId field.
func (o *EmailPayload) SetEmailId(v string) {
	o.EmailId = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *EmailPayload) GetMobile() AuthReqOtpRequestMobile {
	if o == nil || o.Mobile == nil {
		var ret AuthReqOtpRequestMobile
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPayload) GetMobileOk() (*AuthReqOtpRequestMobile, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *EmailPayload) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given AuthReqOtpRequestMobile and assigns it to the Mobile field.
func (o *EmailPayload) SetMobile(v AuthReqOtpRequestMobile) {
	o.Mobile = &v
}

// GetOtp returns the Otp field value
func (o *EmailPayload) GetOtp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Otp
}

// GetOtpOk returns a tuple with the Otp field value
// and a boolean to check if the value has been set.
func (o *EmailPayload) GetOtpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Otp, true
}

// SetOtp sets field value
func (o *EmailPayload) SetOtp(v string) {
	o.Otp = v
}

// GetAudience returns the Audience field value
func (o *EmailPayload) GetAudience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value
// and a boolean to check if the value has been set.
func (o *EmailPayload) GetAudienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audience, true
}

// SetAudience sets field value
func (o *EmailPayload) SetAudience(v string) {
	o.Audience = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *EmailPayload) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPayload) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *EmailPayload) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *EmailPayload) SetMode(v string) {
	o.Mode = &v
}

func (o EmailPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailId != nil {
		toSerialize["emailId"] = o.EmailId
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	if true {
		toSerialize["otp"] = o.Otp
	}
	if true {
		toSerialize["audience"] = o.Audience
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return json.Marshal(toSerialize)
}

type NullableEmailPayload struct {
	value *EmailPayload
	isSet bool
}

func (v NullableEmailPayload) Get() *EmailPayload {
	return v.value
}

func (v *NullableEmailPayload) Set(val *EmailPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailPayload(val *EmailPayload) *NullableEmailPayload {
	return &NullableEmailPayload{value: val, isSet: true}
}

func (v NullableEmailPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


