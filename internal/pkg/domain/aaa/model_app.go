/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// App struct for App
type App struct {
	// Description of the application.
	Description NullableString `json:"description,omitempty"`
	// Set if app is private and can be allocated only to the Tenant specified in the field `privateTenantId`.
	IsPrivateApp bool `json:"isPrivateApp"`
	// Will be ignored if `isPrivate` is false.
	PrivateTenantId *string `json:"privateTenantId,omitempty"`
	// When `isActive` = False OR `isDeleted` = False, the role will be ignored for granting permissions.
	IsActive bool `json:"isActive"`
	// Array of allowed redirect URIs.
	RedirectUri []string `json:"redirectUri,omitempty"`
	// Unique ID of the App. Format of ID is platform:app:<appName>
	AppId interface{} `json:"appId"`
	// Type of app.
	AppType string `json:"appType"`
	// Name of the app. Starts with alphabet and may contain hypen.
	AppName string `json:"appName"`
	// `clientId` of the app.
	ClientId *string `json:"clientId,omitempty"`
	// SDS ID where client secret is stored. Secrets are applicable for backend and internal apps only.
	SecretId NullableString `json:"secretId,omitempty"`
}

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(isPrivateApp bool, isActive bool, appId interface{}, appType string, appName string) *App {
	this := App{}
	this.IsPrivateApp = isPrivateApp
	this.IsActive = isActive
	this.AppId = appId
	this.AppType = appType
	this.AppName = appName
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	var isPrivateApp bool = false
	this.IsPrivateApp = isPrivateApp
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *App) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *App) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *App) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *App) UnsetDescription() {
	o.Description.Unset()
}

// GetIsPrivateApp returns the IsPrivateApp field value
func (o *App) GetIsPrivateApp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivateApp
}

// GetIsPrivateAppOk returns a tuple with the IsPrivateApp field value
// and a boolean to check if the value has been set.
func (o *App) GetIsPrivateAppOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsPrivateApp, true
}

// SetIsPrivateApp sets field value
func (o *App) SetIsPrivateApp(v bool) {
	o.IsPrivateApp = v
}

// GetPrivateTenantId returns the PrivateTenantId field value if set, zero value otherwise.
func (o *App) GetPrivateTenantId() string {
	if o == nil || isNil(o.PrivateTenantId) {
		var ret string
		return ret
	}
	return *o.PrivateTenantId
}

// GetPrivateTenantIdOk returns a tuple with the PrivateTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPrivateTenantIdOk() (*string, bool) {
	if o == nil || isNil(o.PrivateTenantId) {
    return nil, false
	}
	return o.PrivateTenantId, true
}

// HasPrivateTenantId returns a boolean if a field has been set.
func (o *App) HasPrivateTenantId() bool {
	if o != nil && !isNil(o.PrivateTenantId) {
		return true
	}

	return false
}

// SetPrivateTenantId gets a reference to the given string and assigns it to the PrivateTenantId field.
func (o *App) SetPrivateTenantId(v string) {
	o.PrivateTenantId = &v
}

// GetIsActive returns the IsActive field value
func (o *App) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *App) GetIsActiveOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *App) SetIsActive(v bool) {
	o.IsActive = v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *App) GetRedirectUri() []string {
	if o == nil || isNil(o.RedirectUri) {
		var ret []string
		return ret
	}
	return o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetRedirectUriOk() ([]string, bool) {
	if o == nil || isNil(o.RedirectUri) {
    return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *App) HasRedirectUri() bool {
	if o != nil && !isNil(o.RedirectUri) {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given []string and assigns it to the RedirectUri field.
func (o *App) SetRedirectUri(v []string) {
	o.RedirectUri = v
}

// GetAppId returns the AppId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *App) GetAppId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetAppIdOk() (*interface{}, bool) {
	if o == nil || isNil(o.AppId) {
    return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *App) SetAppId(v interface{}) {
	o.AppId = v
}

// GetAppType returns the AppType field value
func (o *App) GetAppType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppType
}

// GetAppTypeOk returns a tuple with the AppType field value
// and a boolean to check if the value has been set.
func (o *App) GetAppTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AppType, true
}

// SetAppType sets field value
func (o *App) SetAppType(v string) {
	o.AppType = v
}

// GetAppName returns the AppName field value
func (o *App) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *App) GetAppNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *App) SetAppName(v string) {
	o.AppName = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *App) GetClientId() string {
	if o == nil || isNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetClientIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientId) {
    return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *App) HasClientId() bool {
	if o != nil && !isNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *App) SetClientId(v string) {
	o.ClientId = &v
}

// GetSecretId returns the SecretId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetSecretId() string {
	if o == nil || isNil(o.SecretId.Get()) {
		var ret string
		return ret
	}
	return *o.SecretId.Get()
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetSecretIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SecretId.Get(), o.SecretId.IsSet()
}

// HasSecretId returns a boolean if a field has been set.
func (o *App) HasSecretId() bool {
	if o != nil && o.SecretId.IsSet() {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given NullableString and assigns it to the SecretId field.
func (o *App) SetSecretId(v string) {
	o.SecretId.Set(&v)
}
// SetSecretIdNil sets the value for SecretId to be an explicit nil
func (o *App) SetSecretIdNil() {
	o.SecretId.Set(nil)
}

// UnsetSecretId ensures that no value is present for SecretId, not even an explicit nil
func (o *App) UnsetSecretId() {
	o.SecretId.Unset()
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["isPrivateApp"] = o.IsPrivateApp
	}
	if !isNil(o.PrivateTenantId) {
		toSerialize["privateTenantId"] = o.PrivateTenantId
	}
	if true {
		toSerialize["isActive"] = o.IsActive
	}
	if !isNil(o.RedirectUri) {
		toSerialize["redirectUri"] = o.RedirectUri
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["appType"] = o.AppType
	}
	if true {
		toSerialize["appName"] = o.AppName
	}
	if !isNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if o.SecretId.IsSet() {
		toSerialize["secretId"] = o.SecretId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


