/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
	"fmt"
)

// IdentityLoginType Connection type for the user.
type IdentityLoginType string

// List of IdentityLoginType
const (
	IDENTITYLOGINTYPE_GOOGLE IdentityLoginType = "google"
	IDENTITYLOGINTYPE_GITHUB IdentityLoginType = "github"
	IDENTITYLOGINTYPE_SAML IdentityLoginType = "saml"
)

// All allowed values of IdentityLoginType enum
var AllowedIdentityLoginTypeEnumValues = []IdentityLoginType{
	"google",
	"github",
	"saml",
}

func (v *IdentityLoginType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityLoginType(value)
	for _, existing := range AllowedIdentityLoginTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityLoginType", value)
}

// NewIdentityLoginTypeFromValue returns a pointer to a valid IdentityLoginType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityLoginTypeFromValue(v string) (*IdentityLoginType, error) {
	ev := IdentityLoginType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityLoginType: valid values are %v", v, AllowedIdentityLoginTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityLoginType) IsValid() bool {
	for _, existing := range AllowedIdentityLoginTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityLoginType value
func (v IdentityLoginType) Ptr() *IdentityLoginType {
	return &v
}

type NullableIdentityLoginType struct {
	value *IdentityLoginType
	isSet bool
}

func (v NullableIdentityLoginType) Get() *IdentityLoginType {
	return v.value
}

func (v *NullableIdentityLoginType) Set(val *IdentityLoginType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityLoginType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityLoginType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityLoginType(val *IdentityLoginType) *NullableIdentityLoginType {
	return &NullableIdentityLoginType{value: val, isSet: true}
}

func (v NullableIdentityLoginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityLoginType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

