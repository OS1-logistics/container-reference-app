/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaadomain

import (
	"encoding/json"
)

// UserEnableRequest struct for UserEnableRequest
type UserEnableRequest struct {
	// Email of the user.
	Email *string `json:"email,omitempty"`
	Mobile *MobileNumber `json:"mobile,omitempty"`
}

// NewUserEnableRequest instantiates a new UserEnableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEnableRequest() *UserEnableRequest {
	this := UserEnableRequest{}
	return &this
}

// NewUserEnableRequestWithDefaults instantiates a new UserEnableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEnableRequestWithDefaults() *UserEnableRequest {
	this := UserEnableRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserEnableRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEnableRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserEnableRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserEnableRequest) SetEmail(v string) {
	o.Email = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *UserEnableRequest) GetMobile() MobileNumber {
	if o == nil || o.Mobile == nil {
		var ret MobileNumber
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEnableRequest) GetMobileOk() (*MobileNumber, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *UserEnableRequest) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given MobileNumber and assigns it to the Mobile field.
func (o *UserEnableRequest) SetMobile(v MobileNumber) {
	o.Mobile = &v
}

func (o UserEnableRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	return json.Marshal(toSerialize)
}

type NullableUserEnableRequest struct {
	value *UserEnableRequest
	isSet bool
}

func (v NullableUserEnableRequest) Get() *UserEnableRequest {
	return v.value
}

func (v *NullableUserEnableRequest) Set(val *UserEnableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEnableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEnableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEnableRequest(val *UserEnableRequest) *NullableUserEnableRequest {
	return &NullableUserEnableRequest{value: val, isSet: true}
}

func (v NullableUserEnableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEnableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


