/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// Events Represents array of Events
type Events struct {
	// Represents name of the event for state transition
	Event string `json:"event"`
	EventType *EventType `json:"eventType,omitempty"`
	EventData []EventDataItem `json:"eventData,omitempty"`
}

// NewEvents instantiates a new Events object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvents(event string) *Events {
	this := Events{}
	this.Event = event
	var eventType EventType = EVENTTYPE_TRANSITIONAL
	this.EventType = &eventType
	return &this
}

// NewEventsWithDefaults instantiates a new Events object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsWithDefaults() *Events {
	this := Events{}
	var eventType EventType = EVENTTYPE_TRANSITIONAL
	this.EventType = &eventType
	return &this
}

// GetEvent returns the Event field value
func (o *Events) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *Events) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *Events) SetEvent(v string) {
	o.Event = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Events) GetEventType() EventType {
	if o == nil || o.EventType == nil {
		var ret EventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Events) GetEventTypeOk() (*EventType, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Events) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given EventType and assigns it to the EventType field.
func (o *Events) SetEventType(v EventType) {
	o.EventType = &v
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *Events) GetEventData() []EventDataItem {
	if o == nil || o.EventData == nil {
		var ret []EventDataItem
		return ret
	}
	return o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Events) GetEventDataOk() ([]EventDataItem, bool) {
	if o == nil || o.EventData == nil {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *Events) HasEventData() bool {
	if o != nil && o.EventData != nil {
		return true
	}

	return false
}

// SetEventData gets a reference to the given []EventDataItem and assigns it to the EventData field.
func (o *Events) SetEventData(v []EventDataItem) {
	o.EventData = v
}

func (o Events) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.EventData != nil {
		toSerialize["eventData"] = o.EventData
	}
	return json.Marshal(toSerialize)
}

type NullableEvents struct {
	value *Events
	isSet bool
}

func (v NullableEvents) Get() *Events {
	return v.value
}

func (v *NullableEvents) Set(val *Events) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents(val *Events) *NullableEvents {
	return &NullableEvents{value: val, isSet: true}
}

func (v NullableEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


