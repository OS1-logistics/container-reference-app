/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// EventsAllSuccessResponse struct for EventsAllSuccessResponse
type EventsAllSuccessResponse struct {
	Data []EventsResponse `json:"data,omitempty"`
}

// NewEventsAllSuccessResponse instantiates a new EventsAllSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsAllSuccessResponse() *EventsAllSuccessResponse {
	this := EventsAllSuccessResponse{}
	return &this
}

// NewEventsAllSuccessResponseWithDefaults instantiates a new EventsAllSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsAllSuccessResponseWithDefaults() *EventsAllSuccessResponse {
	this := EventsAllSuccessResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventsAllSuccessResponse) GetData() []EventsResponse {
	if o == nil || o.Data == nil {
		var ret []EventsResponse
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsAllSuccessResponse) GetDataOk() ([]EventsResponse, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventsAllSuccessResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []EventsResponse and assigns it to the Data field.
func (o *EventsAllSuccessResponse) SetData(v []EventsResponse) {
	o.Data = v
}

func (o EventsAllSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableEventsAllSuccessResponse struct {
	value *EventsAllSuccessResponse
	isSet bool
}

func (v NullableEventsAllSuccessResponse) Get() *EventsAllSuccessResponse {
	return v.value
}

func (v *NullableEventsAllSuccessResponse) Set(val *EventsAllSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsAllSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsAllSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsAllSuccessResponse(val *EventsAllSuccessResponse) *NullableEventsAllSuccessResponse {
	return &NullableEventsAllSuccessResponse{value: val, isSet: true}
}

func (v NullableEventsAllSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsAllSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


