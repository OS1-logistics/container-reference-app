/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// ContainerEventSourceStatus struct for ContainerEventSourceStatus
type ContainerEventSourceStatus struct {
	// Status of the container creation.
	Status *string `json:"status,omitempty"`
	// reason of the failure of container creation.
	FailedReason *string `json:"failedReason,omitempty"`
}

// NewContainerEventSourceStatus instantiates a new ContainerEventSourceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerEventSourceStatus() *ContainerEventSourceStatus {
	this := ContainerEventSourceStatus{}
	return &this
}

// NewContainerEventSourceStatusWithDefaults instantiates a new ContainerEventSourceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerEventSourceStatusWithDefaults() *ContainerEventSourceStatus {
	this := ContainerEventSourceStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContainerEventSourceStatus) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEventSourceStatus) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContainerEventSourceStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContainerEventSourceStatus) SetStatus(v string) {
	o.Status = &v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *ContainerEventSourceStatus) GetFailedReason() string {
	if o == nil || o.FailedReason == nil {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEventSourceStatus) GetFailedReasonOk() (*string, bool) {
	if o == nil || o.FailedReason == nil {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *ContainerEventSourceStatus) HasFailedReason() bool {
	if o != nil && o.FailedReason != nil {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *ContainerEventSourceStatus) SetFailedReason(v string) {
	o.FailedReason = &v
}

func (o ContainerEventSourceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.FailedReason != nil {
		toSerialize["failedReason"] = o.FailedReason
	}
	return json.Marshal(toSerialize)
}

type NullableContainerEventSourceStatus struct {
	value *ContainerEventSourceStatus
	isSet bool
}

func (v NullableContainerEventSourceStatus) Get() *ContainerEventSourceStatus {
	return v.value
}

func (v *NullableContainerEventSourceStatus) Set(val *ContainerEventSourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerEventSourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerEventSourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerEventSourceStatus(val *ContainerEventSourceStatus) *NullableContainerEventSourceStatus {
	return &NullableContainerEventSourceStatus{value: val, isSet: true}
}

func (v NullableContainerEventSourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerEventSourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


