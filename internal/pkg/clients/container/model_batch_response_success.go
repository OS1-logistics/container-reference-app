/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// BatchResponseSuccess struct for BatchResponseSuccess
type BatchResponseSuccess struct {
	// reference ID of container create batch request.
	RefID *string `json:"refID,omitempty"`
	// unique identifier of each record, in this case it will be id of the container.
	Id *string `json:"id,omitempty"`
}

// NewBatchResponseSuccess instantiates a new BatchResponseSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponseSuccess() *BatchResponseSuccess {
	this := BatchResponseSuccess{}
	return &this
}

// NewBatchResponseSuccessWithDefaults instantiates a new BatchResponseSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseSuccessWithDefaults() *BatchResponseSuccess {
	this := BatchResponseSuccess{}
	return &this
}

// GetRefID returns the RefID field value if set, zero value otherwise.
func (o *BatchResponseSuccess) GetRefID() string {
	if o == nil || o.RefID == nil {
		var ret string
		return ret
	}
	return *o.RefID
}

// GetRefIDOk returns a tuple with the RefID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseSuccess) GetRefIDOk() (*string, bool) {
	if o == nil || o.RefID == nil {
		return nil, false
	}
	return o.RefID, true
}

// HasRefID returns a boolean if a field has been set.
func (o *BatchResponseSuccess) HasRefID() bool {
	if o != nil && o.RefID != nil {
		return true
	}

	return false
}

// SetRefID gets a reference to the given string and assigns it to the RefID field.
func (o *BatchResponseSuccess) SetRefID(v string) {
	o.RefID = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchResponseSuccess) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseSuccess) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchResponseSuccess) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchResponseSuccess) SetId(v string) {
	o.Id = &v
}

func (o BatchResponseSuccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefID != nil {
		toSerialize["refID"] = o.RefID
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableBatchResponseSuccess struct {
	value *BatchResponseSuccess
	isSet bool
}

func (v NullableBatchResponseSuccess) Get() *BatchResponseSuccess {
	return v.value
}

func (v *NullableBatchResponseSuccess) Set(val *BatchResponseSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponseSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponseSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponseSuccess(val *BatchResponseSuccess) *NullableBatchResponseSuccess {
	return &NullableBatchResponseSuccess{value: val, isSet: true}
}

func (v NullableBatchResponseSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponseSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


