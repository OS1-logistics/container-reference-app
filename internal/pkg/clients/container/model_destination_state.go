/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// DestinationState Destination state for container state transition.
type DestinationState struct {
	// Represents the main state to which we want to override the instance.
	State string `json:"state"`
	// Substate is optional, if not specified then will be populated by default substate of that main state.
	SubState *string `json:"subState,omitempty"`
	Callback *ContainerDestinationStateCallbackCallback `json:"callback,omitempty"`
}

// NewDestinationState instantiates a new DestinationState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationState(state string) *DestinationState {
	this := DestinationState{}
	this.State = state
	return &this
}

// NewDestinationStateWithDefaults instantiates a new DestinationState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationStateWithDefaults() *DestinationState {
	this := DestinationState{}
	return &this
}

// GetState returns the State field value
func (o *DestinationState) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DestinationState) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DestinationState) SetState(v string) {
	o.State = v
}

// GetSubState returns the SubState field value if set, zero value otherwise.
func (o *DestinationState) GetSubState() string {
	if o == nil || o.SubState == nil {
		var ret string
		return ret
	}
	return *o.SubState
}

// GetSubStateOk returns a tuple with the SubState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationState) GetSubStateOk() (*string, bool) {
	if o == nil || o.SubState == nil {
		return nil, false
	}
	return o.SubState, true
}

// HasSubState returns a boolean if a field has been set.
func (o *DestinationState) HasSubState() bool {
	if o != nil && o.SubState != nil {
		return true
	}

	return false
}

// SetSubState gets a reference to the given string and assigns it to the SubState field.
func (o *DestinationState) SetSubState(v string) {
	o.SubState = &v
}

// GetCallback returns the Callback field value if set, zero value otherwise.
func (o *DestinationState) GetCallback() ContainerDestinationStateCallbackCallback {
	if o == nil || o.Callback == nil {
		var ret ContainerDestinationStateCallbackCallback
		return ret
	}
	return *o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationState) GetCallbackOk() (*ContainerDestinationStateCallbackCallback, bool) {
	if o == nil || o.Callback == nil {
		return nil, false
	}
	return o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *DestinationState) HasCallback() bool {
	if o != nil && o.Callback != nil {
		return true
	}

	return false
}

// SetCallback gets a reference to the given ContainerDestinationStateCallbackCallback and assigns it to the Callback field.
func (o *DestinationState) SetCallback(v ContainerDestinationStateCallbackCallback) {
	o.Callback = &v
}

func (o DestinationState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if o.SubState != nil {
		toSerialize["subState"] = o.SubState
	}
	if o.Callback != nil {
		toSerialize["callback"] = o.Callback
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationState struct {
	value *DestinationState
	isSet bool
}

func (v NullableDestinationState) Get() *DestinationState {
	return v.value
}

func (v *NullableDestinationState) Set(val *DestinationState) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationState) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationState(val *DestinationState) *NullableDestinationState {
	return &NullableDestinationState{value: val, isSet: true}
}

func (v NullableDestinationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


