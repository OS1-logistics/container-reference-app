/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
	"fmt"
)

// Method HTTP method requested on the API endpoint
type Method string

// List of Method
const (
	METHOD_POST Method = "POST"
	METHOD_GET Method = "GET"
	METHOD_PUT Method = "PUT"
)

// All allowed values of Method enum
var AllowedMethodEnumValues = []Method{
	"POST",
	"GET",
	"PUT",
}

func (v *Method) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Method(value)
	for _, existing := range AllowedMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Method", value)
}

// NewMethodFromValue returns a pointer to a valid Method
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMethodFromValue(v string) (*Method, error) {
	ev := Method(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Method: valid values are %v", v, AllowedMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Method) IsValid() bool {
	for _, existing := range AllowedMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Method value
func (v Method) Ptr() *Method {
	return &v
}

type NullableMethod struct {
	value *Method
	isSet bool
}

func (v NullableMethod) Get() *Method {
	return v.value
}

func (v *NullableMethod) Set(val *Method) {
	v.value = val
	v.isSet = true
}

func (v NullableMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethod(val *Method) *NullableMethod {
	return &NullableMethod{value: val, isSet: true}
}

func (v NullableMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

