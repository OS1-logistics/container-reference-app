/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
	"fmt"
)

// CallbackStatus status of execution of api.
type CallbackStatus string

// List of CallbackStatus
const (
	CALLBACKSTATUS_SUCCESS CallbackStatus = "success"
	CALLBACKSTATUS_FAILED CallbackStatus = "failed"
)

// All allowed values of CallbackStatus enum
var AllowedCallbackStatusEnumValues = []CallbackStatus{
	"success",
	"failed",
}

func (v *CallbackStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallbackStatus(value)
	for _, existing := range AllowedCallbackStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallbackStatus", value)
}

// NewCallbackStatusFromValue returns a pointer to a valid CallbackStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallbackStatusFromValue(v string) (*CallbackStatus, error) {
	ev := CallbackStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallbackStatus: valid values are %v", v, AllowedCallbackStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallbackStatus) IsValid() bool {
	for _, existing := range AllowedCallbackStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CallbackStatus value
func (v CallbackStatus) Ptr() *CallbackStatus {
	return &v
}

type NullableCallbackStatus struct {
	value *CallbackStatus
	isSet bool
}

func (v NullableCallbackStatus) Get() *CallbackStatus {
	return v.value
}

func (v *NullableCallbackStatus) Set(val *CallbackStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCallbackStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCallbackStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallbackStatus(val *CallbackStatus) *NullableCallbackStatus {
	return &NullableCallbackStatus{value: val, isSet: true}
}

func (v NullableCallbackStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallbackStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

