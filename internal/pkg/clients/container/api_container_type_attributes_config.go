/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ContainerTypeAttributesConfigApiService ContainerTypeAttributesConfigApi service
type ContainerTypeAttributesConfigApiService service

type ApiGetAttributesConfigRequest struct {
	ctx context.Context
	ApiService *ContainerTypeAttributesConfigApiService
	xCOREOSREQUESTID *string
	xCOREOSTID *string
	xCOREOSACCESS *string
	xCOREOSORIGINTOKEN *string
	containerTypeName string
	xCOREOSUSERINFO *string
}

// Unique request id.
func (r ApiGetAttributesConfigRequest) XCOREOSREQUESTID(xCOREOSREQUESTID string) ApiGetAttributesConfigRequest {
	r.xCOREOSREQUESTID = &xCOREOSREQUESTID
	return r
}

// Tenant id
func (r ApiGetAttributesConfigRequest) XCOREOSTID(xCOREOSTID string) ApiGetAttributesConfigRequest {
	r.xCOREOSTID = &xCOREOSTID
	return r
}

// Core-os access token
func (r ApiGetAttributesConfigRequest) XCOREOSACCESS(xCOREOSACCESS string) ApiGetAttributesConfigRequest {
	r.xCOREOSACCESS = &xCOREOSACCESS
	return r
}

// App requesting for the attributes.
func (r ApiGetAttributesConfigRequest) XCOREOSORIGINTOKEN(xCOREOSORIGINTOKEN string) ApiGetAttributesConfigRequest {
	r.xCOREOSORIGINTOKEN = &xCOREOSORIGINTOKEN
	return r
}

// Core-os user info
func (r ApiGetAttributesConfigRequest) XCOREOSUSERINFO(xCOREOSUSERINFO string) ApiGetAttributesConfigRequest {
	r.xCOREOSUSERINFO = &xCOREOSUSERINFO
	return r
}

func (r ApiGetAttributesConfigRequest) Execute() (*AttributesConfigResponse, *http.Response, error) {
	return r.ApiService.GetAttributesConfigExecute(r)
}

/*
GetAttributesConfig Get core attributes configurations of a container type

**API to get the list of core attributes and their configuration of a container type specified by containerTypeName.**
 | HEADER/PATH | DESCRIPTION | TYPE |
 | ---- | ---- | ----- |
 | `X-COREOS-REQUEST-ID`*(header) | Unique request ID. | string |
 | `X-COREOS-TID`*(header) | Tenant ID. | string |
 | `X-COREOS-ACCESS`*(header) | Core-OS access token. | string |
 | `containerTypeName`*(path) | Unique ID of the Container Type. | string |
 *This is required.
   <br><br>
   **HTTP Status Code Summary**
   | Code | Description |
   | ---- | ---------- |
   | **200 - OK** | Everything worked as expected. |
   | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
   | **401 - Unauthorized** | No valid API key provided. |
   | **404 - Not Found** | The requested resource doesn't exist. |
   | **503 - Server Error** | Something went wrong.. (These are rare.) |


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerTypeName A unique name to represent type of a container.
 @return ApiGetAttributesConfigRequest
*/
func (a *ContainerTypeAttributesConfigApiService) GetAttributesConfig(ctx context.Context, containerTypeName string) ApiGetAttributesConfigRequest {
	return ApiGetAttributesConfigRequest{
		ApiService: a,
		ctx: ctx,
		containerTypeName: containerTypeName,
	}
}

// Execute executes the request
//  @return AttributesConfigResponse
func (a *ContainerTypeAttributesConfigApiService) GetAttributesConfigExecute(r ApiGetAttributesConfigRequest) (*AttributesConfigResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttributesConfigResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContainerTypeAttributesConfigApiService.GetAttributesConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-types/{containerTypeName}/config/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"containerTypeName"+"}", url.PathEscape(parameterToString(r.containerTypeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCOREOSREQUESTID == nil {
		return localVarReturnValue, nil, reportError("xCOREOSREQUESTID is required and must be specified")
	}
	if r.xCOREOSTID == nil {
		return localVarReturnValue, nil, reportError("xCOREOSTID is required and must be specified")
	}
	if r.xCOREOSACCESS == nil {
		return localVarReturnValue, nil, reportError("xCOREOSACCESS is required and must be specified")
	}
	if r.xCOREOSORIGINTOKEN == nil {
		return localVarReturnValue, nil, reportError("xCOREOSORIGINTOKEN is required and must be specified")
	}
	if strlen(r.containerTypeName) < 3 {
		return localVarReturnValue, nil, reportError("containerTypeName must have at least 3 elements")
	}
	if strlen(r.containerTypeName) > 64 {
		return localVarReturnValue, nil, reportError("containerTypeName must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-COREOS-REQUEST-ID"] = parameterToString(*r.xCOREOSREQUESTID, "")
	localVarHeaderParams["X-COREOS-TID"] = parameterToString(*r.xCOREOSTID, "")
	localVarHeaderParams["X-COREOS-ACCESS"] = parameterToString(*r.xCOREOSACCESS, "")
	if r.xCOREOSUSERINFO != nil {
		localVarHeaderParams["X-COREOS-USERINFO"] = parameterToString(*r.xCOREOSUSERINFO, "")
	}
	localVarHeaderParams["X-COREOS-ORIGIN-TOKEN"] = parameterToString(*r.xCOREOSORIGINTOKEN, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAttributesConfigRequest struct {
	ctx context.Context
	ApiService *ContainerTypeAttributesConfigApiService
	xCOREOSREQUESTID *string
	xCOREOSTID *string
	xCOREOSACCESS *string
	containerTypeName string
	xCOREOSORIGINTOKEN *string
	attributesConfigUpdateRequest *AttributesConfigUpdateRequest
	xCOREOSUSERINFO *string
}

// Unique request id.
func (r ApiUpdateAttributesConfigRequest) XCOREOSREQUESTID(xCOREOSREQUESTID string) ApiUpdateAttributesConfigRequest {
	r.xCOREOSREQUESTID = &xCOREOSREQUESTID
	return r
}

// Tenant id
func (r ApiUpdateAttributesConfigRequest) XCOREOSTID(xCOREOSTID string) ApiUpdateAttributesConfigRequest {
	r.xCOREOSTID = &xCOREOSTID
	return r
}

// Core-os access token
func (r ApiUpdateAttributesConfigRequest) XCOREOSACCESS(xCOREOSACCESS string) ApiUpdateAttributesConfigRequest {
	r.xCOREOSACCESS = &xCOREOSACCESS
	return r
}

// App requesting for the attributes.
func (r ApiUpdateAttributesConfigRequest) XCOREOSORIGINTOKEN(xCOREOSORIGINTOKEN string) ApiUpdateAttributesConfigRequest {
	r.xCOREOSORIGINTOKEN = &xCOREOSORIGINTOKEN
	return r
}

// Update core attributes of particular type of container
func (r ApiUpdateAttributesConfigRequest) AttributesConfigUpdateRequest(attributesConfigUpdateRequest AttributesConfigUpdateRequest) ApiUpdateAttributesConfigRequest {
	r.attributesConfigUpdateRequest = &attributesConfigUpdateRequest
	return r
}

// Core-os user info
func (r ApiUpdateAttributesConfigRequest) XCOREOSUSERINFO(xCOREOSUSERINFO string) ApiUpdateAttributesConfigRequest {
	r.xCOREOSUSERINFO = &xCOREOSUSERINFO
	return r
}

func (r ApiUpdateAttributesConfigRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.UpdateAttributesConfigExecute(r)
}

/*
UpdateAttributesConfig Update core attributes configurations for a Container type.

**API to update core attributes configuration of a container type specified by containerTypeName.**<br><br>**The configuration includes:**

 1. List of core attributes (names) - Data type of each core attribute.<br>
 2. Validation of core attribute values, if required, for each core attribute.

  <mark>**Important**</mark>:
  - If the attribute is already defined for the container type- The validation rules will get updated for the attribute.
  - If the attribute is not defined for the container type- It is added as a new core attribute for the container type.
  - On successful execution of the API, all updates including change in data type will take effect immediately for the container type.

  | PARAMETER | DESCRIPTION | TYPE | VALIDATION |
   | ---- | ---- | ----- | ---- |
   | `attributes`* |
   | ㅤ↳`name`* | Name of the attribute to be updated. | string | **Example**: capacity<br>**minLength**: 3 **maxLength**: 64 |
   | ㅤ↳`dataType`* | Field for the datatype of an attribute. | string | **Example**: integer<br>**Enum**: [string, number, boolean, object, array] |
   | ㅤ↳`description` |Updated description of the attribute.|string  | **minLength**: 1 **maxLength**: 256|
   | ㅤ↳`indexed` | Field to specify if the attribute is to be indexed. Filter or search operation on the basis of a custom attribute will be only allowed if this field is set as TRUE. | boolean | **Default**: false |
   | `defaultValue` |
   | ㅤ↳`validation` | Specifies all the validations to be performed on an attribute, when a container of this type is created/updated. |
   | ㅤㅤㅤ↳`range` | Field to specify the range that the attribute value must lie. In case of "string" data type, range will be the length of string value. | number | **min**: The min value, inclusive.<br>**max**: The max value, inclusive. |
   | ㅤㅤㅤ↳`regex` | Field to specify the regex pattern that the value of an attribute MUST match. | string | **minLength**: 1 **maxLength**: 512 |
   | ㅤㅤㅤ↳`valueOneOf` | Field to specify enum values for an attribute. list of valueOneOf should be homogeneous. | Enum | **minItems**: 1 |
   | ㅤㅤㅤ↳`required` | Field to specify if the value for the attribute is mandatory or not. If TRUE, the value MUST be provided. | boolean | **Default value**: false |
   | `callback` | Represents callback URL, which can be to notify status(success/failed) of API.| object | {url: "string", meta: {}} |
   *This is required.
   <br><br>
   **HTTP Status Code Summary**
   | Code | Description |
   | ---- | ---------- |
   | **202 - Accepted** |
   | **400 - Bad Request** | The request was unacceptable, often due to missing a required parameter. |
   | **401 - Unauthorized** | No valid API key provided. |
   | **404 - Not Found** | The requested resource doesn't exist. |
   | **503 - Server Error** | Something went wrong. (These are rare.) |


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerTypeName A unique name to represent type of a container.
 @return ApiUpdateAttributesConfigRequest
*/
func (a *ContainerTypeAttributesConfigApiService) UpdateAttributesConfig(ctx context.Context, containerTypeName string) ApiUpdateAttributesConfigRequest {
	return ApiUpdateAttributesConfigRequest{
		ApiService: a,
		ctx: ctx,
		containerTypeName: containerTypeName,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ContainerTypeAttributesConfigApiService) UpdateAttributesConfigExecute(r ApiUpdateAttributesConfigRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContainerTypeAttributesConfigApiService.UpdateAttributesConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-types/{containerTypeName}/config/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"containerTypeName"+"}", url.PathEscape(parameterToString(r.containerTypeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCOREOSREQUESTID == nil {
		return localVarReturnValue, nil, reportError("xCOREOSREQUESTID is required and must be specified")
	}
	if r.xCOREOSTID == nil {
		return localVarReturnValue, nil, reportError("xCOREOSTID is required and must be specified")
	}
	if r.xCOREOSACCESS == nil {
		return localVarReturnValue, nil, reportError("xCOREOSACCESS is required and must be specified")
	}
	if strlen(r.containerTypeName) < 3 {
		return localVarReturnValue, nil, reportError("containerTypeName must have at least 3 elements")
	}
	if strlen(r.containerTypeName) > 64 {
		return localVarReturnValue, nil, reportError("containerTypeName must have less than 64 elements")
	}
	if r.xCOREOSORIGINTOKEN == nil {
		return localVarReturnValue, nil, reportError("xCOREOSORIGINTOKEN is required and must be specified")
	}
	if r.attributesConfigUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("attributesConfigUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-COREOS-REQUEST-ID"] = parameterToString(*r.xCOREOSREQUESTID, "")
	localVarHeaderParams["X-COREOS-TID"] = parameterToString(*r.xCOREOSTID, "")
	localVarHeaderParams["X-COREOS-ACCESS"] = parameterToString(*r.xCOREOSACCESS, "")
	if r.xCOREOSUSERINFO != nil {
		localVarHeaderParams["X-COREOS-USERINFO"] = parameterToString(*r.xCOREOSUSERINFO, "")
	}
	localVarHeaderParams["X-COREOS-ORIGIN-TOKEN"] = parameterToString(*r.xCOREOSORIGINTOKEN, "")
	// body params
	localVarPostBody = r.attributesConfigUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PutErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v PutErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v PutErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v PutErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
