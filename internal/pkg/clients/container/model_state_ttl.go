/*
Container Service

**API documentation for Container Service**

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_client

import (
	"encoding/json"
)

// StateTTL Time to live associated with each state of a container.
type StateTTL struct {
	// Specifies the time to live for a data entry in the database. Specified for a tenant.
	Time string `json:"time"`
	// Represents destination state to which this instance should be transitioned to after ttl expiry.
	Destination string `json:"destination"`
}

// NewStateTTL instantiates a new StateTTL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateTTL(time string, destination string) *StateTTL {
	this := StateTTL{}
	this.Time = time
	this.Destination = destination
	return &this
}

// NewStateTTLWithDefaults instantiates a new StateTTL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateTTLWithDefaults() *StateTTL {
	this := StateTTL{}
	return &this
}

// GetTime returns the Time field value
func (o *StateTTL) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *StateTTL) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *StateTTL) SetTime(v string) {
	o.Time = v
}

// GetDestination returns the Destination field value
func (o *StateTTL) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *StateTTL) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *StateTTL) SetDestination(v string) {
	o.Destination = v
}

func (o StateTTL) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["destination"] = o.Destination
	}
	return json.Marshal(toSerialize)
}

type NullableStateTTL struct {
	value *StateTTL
	isSet bool
}

func (v NullableStateTTL) Get() *StateTTL {
	return v.value
}

func (v *NullableStateTTL) Set(val *StateTTL) {
	v.value = val
	v.isSet = true
}

func (v NullableStateTTL) IsSet() bool {
	return v.isSet
}

func (v *NullableStateTTL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateTTL(val *StateTTL) *NullableStateTTL {
	return &NullableStateTTL{value: val, isSet: true}
}

func (v NullableStateTTL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateTTL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


