/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
)

// ResourceResponse struct for ResourceResponse
type ResourceResponse struct {
	// Name of the entity exposed by this resource.
	Name *string `json:"name,omitempty"`
	// Description of the entity exposed by this resource.
	Description *string `json:"description,omitempty"`
	// List of URIs for resource. Example \"/core/api/v1/containers/_**\"
	ResourcePath *string `json:"resourcePath,omitempty"`
	// Scopes of resource: get, put, post, patch.
	AllowedHttpMethods []string `json:"allowedHttpMethods,omitempty"`
	IsActive *string `json:"isActive,omitempty"`
	// Unique resource ID assigned to resource at the time of creation.
	ResourceId *string `json:"resourceId,omitempty"`
}

// NewResourceResponse instantiates a new ResourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceResponse() *ResourceResponse {
	this := ResourceResponse{}
	return &this
}

// NewResourceResponseWithDefaults instantiates a new ResourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceResponseWithDefaults() *ResourceResponse {
	this := ResourceResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceResponse) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceResponse) SetDescription(v string) {
	o.Description = &v
}

// GetResourcePath returns the ResourcePath field value if set, zero value otherwise.
func (o *ResourceResponse) GetResourcePath() string {
	if o == nil || o.ResourcePath == nil {
		var ret string
		return ret
	}
	return *o.ResourcePath
}

// GetResourcePathOk returns a tuple with the ResourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetResourcePathOk() (*string, bool) {
	if o == nil || o.ResourcePath == nil {
		return nil, false
	}
	return o.ResourcePath, true
}

// HasResourcePath returns a boolean if a field has been set.
func (o *ResourceResponse) HasResourcePath() bool {
	if o != nil && o.ResourcePath != nil {
		return true
	}

	return false
}

// SetResourcePath gets a reference to the given string and assigns it to the ResourcePath field.
func (o *ResourceResponse) SetResourcePath(v string) {
	o.ResourcePath = &v
}

// GetAllowedHttpMethods returns the AllowedHttpMethods field value if set, zero value otherwise.
func (o *ResourceResponse) GetAllowedHttpMethods() []string {
	if o == nil || o.AllowedHttpMethods == nil {
		var ret []string
		return ret
	}
	return o.AllowedHttpMethods
}

// GetAllowedHttpMethodsOk returns a tuple with the AllowedHttpMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetAllowedHttpMethodsOk() ([]string, bool) {
	if o == nil || o.AllowedHttpMethods == nil {
		return nil, false
	}
	return o.AllowedHttpMethods, true
}

// HasAllowedHttpMethods returns a boolean if a field has been set.
func (o *ResourceResponse) HasAllowedHttpMethods() bool {
	if o != nil && o.AllowedHttpMethods != nil {
		return true
	}

	return false
}

// SetAllowedHttpMethods gets a reference to the given []string and assigns it to the AllowedHttpMethods field.
func (o *ResourceResponse) SetAllowedHttpMethods(v []string) {
	o.AllowedHttpMethods = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ResourceResponse) GetIsActive() string {
	if o == nil || o.IsActive == nil {
		var ret string
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetIsActiveOk() (*string, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ResourceResponse) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given string and assigns it to the IsActive field.
func (o *ResourceResponse) SetIsActive(v string) {
	o.IsActive = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *ResourceResponse) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceResponse) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *ResourceResponse) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *ResourceResponse) SetResourceId(v string) {
	o.ResourceId = &v
}

func (o ResourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ResourcePath != nil {
		toSerialize["resourcePath"] = o.ResourcePath
	}
	if o.AllowedHttpMethods != nil {
		toSerialize["allowedHttpMethods"] = o.AllowedHttpMethods
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	return json.Marshal(toSerialize)
}

type NullableResourceResponse struct {
	value *ResourceResponse
	isSet bool
}

func (v NullableResourceResponse) Get() *ResourceResponse {
	return v.value
}

func (v *NullableResourceResponse) Set(val *ResourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceResponse(val *ResourceResponse) *NullableResourceResponse {
	return &NullableResourceResponse{value: val, isSet: true}
}

func (v NullableResourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


