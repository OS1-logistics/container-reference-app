/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
)

// ConnectionUpdateRequest struct for ConnectionUpdateRequest
type ConnectionUpdateRequest struct {
	// Client ID of the social application.
	ConnectionClientId *string `json:"connectionClientId,omitempty"`
	// Client Secret of the social application.
	ConnectionClientSecret *string `json:"connectionClientSecret,omitempty"`
}

// NewConnectionUpdateRequest instantiates a new ConnectionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionUpdateRequest() *ConnectionUpdateRequest {
	this := ConnectionUpdateRequest{}
	return &this
}

// NewConnectionUpdateRequestWithDefaults instantiates a new ConnectionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionUpdateRequestWithDefaults() *ConnectionUpdateRequest {
	this := ConnectionUpdateRequest{}
	return &this
}

// GetConnectionClientId returns the ConnectionClientId field value if set, zero value otherwise.
func (o *ConnectionUpdateRequest) GetConnectionClientId() string {
	if o == nil || o.ConnectionClientId == nil {
		var ret string
		return ret
	}
	return *o.ConnectionClientId
}

// GetConnectionClientIdOk returns a tuple with the ConnectionClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdateRequest) GetConnectionClientIdOk() (*string, bool) {
	if o == nil || o.ConnectionClientId == nil {
		return nil, false
	}
	return o.ConnectionClientId, true
}

// HasConnectionClientId returns a boolean if a field has been set.
func (o *ConnectionUpdateRequest) HasConnectionClientId() bool {
	if o != nil && o.ConnectionClientId != nil {
		return true
	}

	return false
}

// SetConnectionClientId gets a reference to the given string and assigns it to the ConnectionClientId field.
func (o *ConnectionUpdateRequest) SetConnectionClientId(v string) {
	o.ConnectionClientId = &v
}

// GetConnectionClientSecret returns the ConnectionClientSecret field value if set, zero value otherwise.
func (o *ConnectionUpdateRequest) GetConnectionClientSecret() string {
	if o == nil || o.ConnectionClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ConnectionClientSecret
}

// GetConnectionClientSecretOk returns a tuple with the ConnectionClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdateRequest) GetConnectionClientSecretOk() (*string, bool) {
	if o == nil || o.ConnectionClientSecret == nil {
		return nil, false
	}
	return o.ConnectionClientSecret, true
}

// HasConnectionClientSecret returns a boolean if a field has been set.
func (o *ConnectionUpdateRequest) HasConnectionClientSecret() bool {
	if o != nil && o.ConnectionClientSecret != nil {
		return true
	}

	return false
}

// SetConnectionClientSecret gets a reference to the given string and assigns it to the ConnectionClientSecret field.
func (o *ConnectionUpdateRequest) SetConnectionClientSecret(v string) {
	o.ConnectionClientSecret = &v
}

func (o ConnectionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionClientId != nil {
		toSerialize["connectionClientId"] = o.ConnectionClientId
	}
	if o.ConnectionClientSecret != nil {
		toSerialize["connectionClientSecret"] = o.ConnectionClientSecret
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionUpdateRequest struct {
	value *ConnectionUpdateRequest
	isSet bool
}

func (v NullableConnectionUpdateRequest) Get() *ConnectionUpdateRequest {
	return v.value
}

func (v *NullableConnectionUpdateRequest) Set(val *ConnectionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionUpdateRequest(val *ConnectionUpdateRequest) *NullableConnectionUpdateRequest {
	return &NullableConnectionUpdateRequest{value: val, isSet: true}
}

func (v NullableConnectionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


