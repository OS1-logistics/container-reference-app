/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
)

// SuccessUsersResponseV2 struct for SuccessUsersResponseV2
type SuccessUsersResponseV2 struct {
	Error *Error `json:"error,omitempty"`
	Data *SuccessUsersResponseV2Data `json:"data,omitempty"`
	Request *Request `json:"request,omitempty"`
}

// NewSuccessUsersResponseV2 instantiates a new SuccessUsersResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessUsersResponseV2() *SuccessUsersResponseV2 {
	this := SuccessUsersResponseV2{}
	return &this
}

// NewSuccessUsersResponseV2WithDefaults instantiates a new SuccessUsersResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessUsersResponseV2WithDefaults() *SuccessUsersResponseV2 {
	this := SuccessUsersResponseV2{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SuccessUsersResponseV2) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessUsersResponseV2) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SuccessUsersResponseV2) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *SuccessUsersResponseV2) SetError(v Error) {
	o.Error = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SuccessUsersResponseV2) GetData() SuccessUsersResponseV2Data {
	if o == nil || o.Data == nil {
		var ret SuccessUsersResponseV2Data
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessUsersResponseV2) GetDataOk() (*SuccessUsersResponseV2Data, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SuccessUsersResponseV2) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given SuccessUsersResponseV2Data and assigns it to the Data field.
func (o *SuccessUsersResponseV2) SetData(v SuccessUsersResponseV2Data) {
	o.Data = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *SuccessUsersResponseV2) GetRequest() Request {
	if o == nil || o.Request == nil {
		var ret Request
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessUsersResponseV2) GetRequestOk() (*Request, bool) {
	if o == nil || o.Request == nil {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *SuccessUsersResponseV2) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Request and assigns it to the Request field.
func (o *SuccessUsersResponseV2) SetRequest(v Request) {
	o.Request = &v
}

func (o SuccessUsersResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Request != nil {
		toSerialize["request"] = o.Request
	}
	return json.Marshal(toSerialize)
}

type NullableSuccessUsersResponseV2 struct {
	value *SuccessUsersResponseV2
	isSet bool
}

func (v NullableSuccessUsersResponseV2) Get() *SuccessUsersResponseV2 {
	return v.value
}

func (v *NullableSuccessUsersResponseV2) Set(val *SuccessUsersResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessUsersResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessUsersResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessUsersResponseV2(val *SuccessUsersResponseV2) *NullableSuccessUsersResponseV2 {
	return &NullableSuccessUsersResponseV2{value: val, isSet: true}
}

func (v NullableSuccessUsersResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessUsersResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


