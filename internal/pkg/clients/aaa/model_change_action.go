/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
	"fmt"
)

// ChangeAction Action for data auditing
type ChangeAction string

// List of ChangeAction
const (
	CHANGEACTION_CREATE ChangeAction = "CREATE"
	CHANGEACTION_UPDATE ChangeAction = "UPDATE"
	CHANGEACTION_GET ChangeAction = "GET"
	CHANGEACTION_DELETE ChangeAction = "DELETE"
)

// All allowed values of ChangeAction enum
var AllowedChangeActionEnumValues = []ChangeAction{
	"CREATE",
	"UPDATE",
	"GET",
	"DELETE",
}

func (v *ChangeAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangeAction(value)
	for _, existing := range AllowedChangeActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChangeAction", value)
}

// NewChangeActionFromValue returns a pointer to a valid ChangeAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeActionFromValue(v string) (*ChangeAction, error) {
	ev := ChangeAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeAction: valid values are %v", v, AllowedChangeActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeAction) IsValid() bool {
	for _, existing := range AllowedChangeActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChangeAction value
func (v ChangeAction) Ptr() *ChangeAction {
	return &v
}

type NullableChangeAction struct {
	value *ChangeAction
	isSet bool
}

func (v NullableChangeAction) Get() *ChangeAction {
	return v.value
}

func (v *NullableChangeAction) Set(val *ChangeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeAction(val *ChangeAction) *NullableChangeAction {
	return &NullableChangeAction{value: val, isSet: true}
}

func (v NullableChangeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

