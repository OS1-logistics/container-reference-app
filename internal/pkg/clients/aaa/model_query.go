/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
)

// Query struct for Query
type Query struct {
	Match []map[string]interface{} `json:"match,omitempty"`
	MultiMatch []map[string]interface{} `json:"multi_match,omitempty"`
	Term []map[string]interface{} `json:"term,omitempty"`
	Terms []map[string]interface{} `json:"terms,omitempty"`
	Range []map[string]interface{} `json:"range,omitempty"`
	Regexp []map[string]interface{} `json:"regexp,omitempty"`
	Exists []map[string]interface{} `json:"exists,omitempty"`
	MatchPhrase []map[string]interface{} `json:"match_phrase,omitempty"`
	MatchPhrasePrefix []map[string]interface{} `json:"match_phrase_prefix,omitempty"`
	Prefix []map[string]interface{} `json:"prefix,omitempty"`
	Fuzzy []map[string]interface{} `json:"fuzzy,omitempty"`
}

// NewQuery instantiates a new Query object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuery() *Query {
	this := Query{}
	return &this
}

// NewQueryWithDefaults instantiates a new Query object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryWithDefaults() *Query {
	this := Query{}
	return &this
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *Query) GetMatch() []map[string]interface{} {
	if o == nil || o.Match == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetMatchOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Match == nil {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *Query) HasMatch() bool {
	if o != nil && o.Match != nil {
		return true
	}

	return false
}

// SetMatch gets a reference to the given []map[string]interface{} and assigns it to the Match field.
func (o *Query) SetMatch(v []map[string]interface{}) {
	o.Match = v
}

// GetMultiMatch returns the MultiMatch field value if set, zero value otherwise.
func (o *Query) GetMultiMatch() []map[string]interface{} {
	if o == nil || o.MultiMatch == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.MultiMatch
}

// GetMultiMatchOk returns a tuple with the MultiMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetMultiMatchOk() ([]map[string]interface{}, bool) {
	if o == nil || o.MultiMatch == nil {
		return nil, false
	}
	return o.MultiMatch, true
}

// HasMultiMatch returns a boolean if a field has been set.
func (o *Query) HasMultiMatch() bool {
	if o != nil && o.MultiMatch != nil {
		return true
	}

	return false
}

// SetMultiMatch gets a reference to the given []map[string]interface{} and assigns it to the MultiMatch field.
func (o *Query) SetMultiMatch(v []map[string]interface{}) {
	o.MultiMatch = v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *Query) GetTerm() []map[string]interface{} {
	if o == nil || o.Term == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetTermOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Term == nil {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *Query) HasTerm() bool {
	if o != nil && o.Term != nil {
		return true
	}

	return false
}

// SetTerm gets a reference to the given []map[string]interface{} and assigns it to the Term field.
func (o *Query) SetTerm(v []map[string]interface{}) {
	o.Term = v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *Query) GetTerms() []map[string]interface{} {
	if o == nil || o.Terms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetTermsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Terms == nil {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *Query) HasTerms() bool {
	if o != nil && o.Terms != nil {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []map[string]interface{} and assigns it to the Terms field.
func (o *Query) SetTerms(v []map[string]interface{}) {
	o.Terms = v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *Query) GetRange() []map[string]interface{} {
	if o == nil || o.Range == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetRangeOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *Query) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given []map[string]interface{} and assigns it to the Range field.
func (o *Query) SetRange(v []map[string]interface{}) {
	o.Range = v
}

// GetRegexp returns the Regexp field value if set, zero value otherwise.
func (o *Query) GetRegexp() []map[string]interface{} {
	if o == nil || o.Regexp == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Regexp
}

// GetRegexpOk returns a tuple with the Regexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetRegexpOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Regexp == nil {
		return nil, false
	}
	return o.Regexp, true
}

// HasRegexp returns a boolean if a field has been set.
func (o *Query) HasRegexp() bool {
	if o != nil && o.Regexp != nil {
		return true
	}

	return false
}

// SetRegexp gets a reference to the given []map[string]interface{} and assigns it to the Regexp field.
func (o *Query) SetRegexp(v []map[string]interface{}) {
	o.Regexp = v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *Query) GetExists() []map[string]interface{} {
	if o == nil || o.Exists == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetExistsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Exists == nil {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *Query) HasExists() bool {
	if o != nil && o.Exists != nil {
		return true
	}

	return false
}

// SetExists gets a reference to the given []map[string]interface{} and assigns it to the Exists field.
func (o *Query) SetExists(v []map[string]interface{}) {
	o.Exists = v
}

// GetMatchPhrase returns the MatchPhrase field value if set, zero value otherwise.
func (o *Query) GetMatchPhrase() []map[string]interface{} {
	if o == nil || o.MatchPhrase == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.MatchPhrase
}

// GetMatchPhraseOk returns a tuple with the MatchPhrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetMatchPhraseOk() ([]map[string]interface{}, bool) {
	if o == nil || o.MatchPhrase == nil {
		return nil, false
	}
	return o.MatchPhrase, true
}

// HasMatchPhrase returns a boolean if a field has been set.
func (o *Query) HasMatchPhrase() bool {
	if o != nil && o.MatchPhrase != nil {
		return true
	}

	return false
}

// SetMatchPhrase gets a reference to the given []map[string]interface{} and assigns it to the MatchPhrase field.
func (o *Query) SetMatchPhrase(v []map[string]interface{}) {
	o.MatchPhrase = v
}

// GetMatchPhrasePrefix returns the MatchPhrasePrefix field value if set, zero value otherwise.
func (o *Query) GetMatchPhrasePrefix() []map[string]interface{} {
	if o == nil || o.MatchPhrasePrefix == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.MatchPhrasePrefix
}

// GetMatchPhrasePrefixOk returns a tuple with the MatchPhrasePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetMatchPhrasePrefixOk() ([]map[string]interface{}, bool) {
	if o == nil || o.MatchPhrasePrefix == nil {
		return nil, false
	}
	return o.MatchPhrasePrefix, true
}

// HasMatchPhrasePrefix returns a boolean if a field has been set.
func (o *Query) HasMatchPhrasePrefix() bool {
	if o != nil && o.MatchPhrasePrefix != nil {
		return true
	}

	return false
}

// SetMatchPhrasePrefix gets a reference to the given []map[string]interface{} and assigns it to the MatchPhrasePrefix field.
func (o *Query) SetMatchPhrasePrefix(v []map[string]interface{}) {
	o.MatchPhrasePrefix = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *Query) GetPrefix() []map[string]interface{} {
	if o == nil || o.Prefix == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetPrefixOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *Query) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given []map[string]interface{} and assigns it to the Prefix field.
func (o *Query) SetPrefix(v []map[string]interface{}) {
	o.Prefix = v
}

// GetFuzzy returns the Fuzzy field value if set, zero value otherwise.
func (o *Query) GetFuzzy() []map[string]interface{} {
	if o == nil || o.Fuzzy == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Fuzzy
}

// GetFuzzyOk returns a tuple with the Fuzzy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetFuzzyOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Fuzzy == nil {
		return nil, false
	}
	return o.Fuzzy, true
}

// HasFuzzy returns a boolean if a field has been set.
func (o *Query) HasFuzzy() bool {
	if o != nil && o.Fuzzy != nil {
		return true
	}

	return false
}

// SetFuzzy gets a reference to the given []map[string]interface{} and assigns it to the Fuzzy field.
func (o *Query) SetFuzzy(v []map[string]interface{}) {
	o.Fuzzy = v
}

func (o Query) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Match != nil {
		toSerialize["match"] = o.Match
	}
	if o.MultiMatch != nil {
		toSerialize["multi_match"] = o.MultiMatch
	}
	if o.Term != nil {
		toSerialize["term"] = o.Term
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	if o.Regexp != nil {
		toSerialize["regexp"] = o.Regexp
	}
	if o.Exists != nil {
		toSerialize["exists"] = o.Exists
	}
	if o.MatchPhrase != nil {
		toSerialize["match_phrase"] = o.MatchPhrase
	}
	if o.MatchPhrasePrefix != nil {
		toSerialize["match_phrase_prefix"] = o.MatchPhrasePrefix
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.Fuzzy != nil {
		toSerialize["fuzzy"] = o.Fuzzy
	}
	return json.Marshal(toSerialize)
}

type NullableQuery struct {
	value *Query
	isSet bool
}

func (v NullableQuery) Get() *Query {
	return v.value
}

func (v *NullableQuery) Set(val *Query) {
	v.value = val
	v.isSet = true
}

func (v NullableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuery(val *Query) *NullableQuery {
	return &NullableQuery{value: val, isSet: true}
}

func (v NullableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


