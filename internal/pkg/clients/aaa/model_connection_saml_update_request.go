/*
Authentication And Authorization (AAA) Service

This swagger documentation provides all AAA API details. AAA service provides authentication and authorization capabilities for users.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aaa_client

import (
	"encoding/json"
)

// ConnectionSamlUpdateRequest struct for ConnectionSamlUpdateRequest
type ConnectionSamlUpdateRequest struct {
	// DisplayName of the Saml provider on login page
	DisplayName *string `json:"displayName,omitempty"`
	// Order of the provider in gui
	GuiOrder *float32 `json:"guiOrder,omitempty"`
	// Sign In endpoint of the SAML connection.
	SignInEndpoint *string `json:"signInEndpoint,omitempty"`
	// Sign Out endpoint of the SAML connection.
	SignOutEndpoint *string `json:"signOutEndpoint,omitempty"`
	// The certificate required for saml connection should be of x509Cert format
	PublicKeyCertificate *string `json:"publicKeyCertificate,omitempty"`
}

// NewConnectionSamlUpdateRequest instantiates a new ConnectionSamlUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionSamlUpdateRequest() *ConnectionSamlUpdateRequest {
	this := ConnectionSamlUpdateRequest{}
	return &this
}

// NewConnectionSamlUpdateRequestWithDefaults instantiates a new ConnectionSamlUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionSamlUpdateRequestWithDefaults() *ConnectionSamlUpdateRequest {
	this := ConnectionSamlUpdateRequest{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ConnectionSamlUpdateRequest) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSamlUpdateRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ConnectionSamlUpdateRequest) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ConnectionSamlUpdateRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetGuiOrder returns the GuiOrder field value if set, zero value otherwise.
func (o *ConnectionSamlUpdateRequest) GetGuiOrder() float32 {
	if o == nil || o.GuiOrder == nil {
		var ret float32
		return ret
	}
	return *o.GuiOrder
}

// GetGuiOrderOk returns a tuple with the GuiOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSamlUpdateRequest) GetGuiOrderOk() (*float32, bool) {
	if o == nil || o.GuiOrder == nil {
		return nil, false
	}
	return o.GuiOrder, true
}

// HasGuiOrder returns a boolean if a field has been set.
func (o *ConnectionSamlUpdateRequest) HasGuiOrder() bool {
	if o != nil && o.GuiOrder != nil {
		return true
	}

	return false
}

// SetGuiOrder gets a reference to the given float32 and assigns it to the GuiOrder field.
func (o *ConnectionSamlUpdateRequest) SetGuiOrder(v float32) {
	o.GuiOrder = &v
}

// GetSignInEndpoint returns the SignInEndpoint field value if set, zero value otherwise.
func (o *ConnectionSamlUpdateRequest) GetSignInEndpoint() string {
	if o == nil || o.SignInEndpoint == nil {
		var ret string
		return ret
	}
	return *o.SignInEndpoint
}

// GetSignInEndpointOk returns a tuple with the SignInEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSamlUpdateRequest) GetSignInEndpointOk() (*string, bool) {
	if o == nil || o.SignInEndpoint == nil {
		return nil, false
	}
	return o.SignInEndpoint, true
}

// HasSignInEndpoint returns a boolean if a field has been set.
func (o *ConnectionSamlUpdateRequest) HasSignInEndpoint() bool {
	if o != nil && o.SignInEndpoint != nil {
		return true
	}

	return false
}

// SetSignInEndpoint gets a reference to the given string and assigns it to the SignInEndpoint field.
func (o *ConnectionSamlUpdateRequest) SetSignInEndpoint(v string) {
	o.SignInEndpoint = &v
}

// GetSignOutEndpoint returns the SignOutEndpoint field value if set, zero value otherwise.
func (o *ConnectionSamlUpdateRequest) GetSignOutEndpoint() string {
	if o == nil || o.SignOutEndpoint == nil {
		var ret string
		return ret
	}
	return *o.SignOutEndpoint
}

// GetSignOutEndpointOk returns a tuple with the SignOutEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSamlUpdateRequest) GetSignOutEndpointOk() (*string, bool) {
	if o == nil || o.SignOutEndpoint == nil {
		return nil, false
	}
	return o.SignOutEndpoint, true
}

// HasSignOutEndpoint returns a boolean if a field has been set.
func (o *ConnectionSamlUpdateRequest) HasSignOutEndpoint() bool {
	if o != nil && o.SignOutEndpoint != nil {
		return true
	}

	return false
}

// SetSignOutEndpoint gets a reference to the given string and assigns it to the SignOutEndpoint field.
func (o *ConnectionSamlUpdateRequest) SetSignOutEndpoint(v string) {
	o.SignOutEndpoint = &v
}

// GetPublicKeyCertificate returns the PublicKeyCertificate field value if set, zero value otherwise.
func (o *ConnectionSamlUpdateRequest) GetPublicKeyCertificate() string {
	if o == nil || o.PublicKeyCertificate == nil {
		var ret string
		return ret
	}
	return *o.PublicKeyCertificate
}

// GetPublicKeyCertificateOk returns a tuple with the PublicKeyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSamlUpdateRequest) GetPublicKeyCertificateOk() (*string, bool) {
	if o == nil || o.PublicKeyCertificate == nil {
		return nil, false
	}
	return o.PublicKeyCertificate, true
}

// HasPublicKeyCertificate returns a boolean if a field has been set.
func (o *ConnectionSamlUpdateRequest) HasPublicKeyCertificate() bool {
	if o != nil && o.PublicKeyCertificate != nil {
		return true
	}

	return false
}

// SetPublicKeyCertificate gets a reference to the given string and assigns it to the PublicKeyCertificate field.
func (o *ConnectionSamlUpdateRequest) SetPublicKeyCertificate(v string) {
	o.PublicKeyCertificate = &v
}

func (o ConnectionSamlUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.GuiOrder != nil {
		toSerialize["guiOrder"] = o.GuiOrder
	}
	if o.SignInEndpoint != nil {
		toSerialize["signInEndpoint"] = o.SignInEndpoint
	}
	if o.SignOutEndpoint != nil {
		toSerialize["signOutEndpoint"] = o.SignOutEndpoint
	}
	if o.PublicKeyCertificate != nil {
		toSerialize["publicKeyCertificate"] = o.PublicKeyCertificate
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionSamlUpdateRequest struct {
	value *ConnectionSamlUpdateRequest
	isSet bool
}

func (v NullableConnectionSamlUpdateRequest) Get() *ConnectionSamlUpdateRequest {
	return v.value
}

func (v *NullableConnectionSamlUpdateRequest) Set(val *ConnectionSamlUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionSamlUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionSamlUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionSamlUpdateRequest(val *ConnectionSamlUpdateRequest) *NullableConnectionSamlUpdateRequest {
	return &NullableConnectionSamlUpdateRequest{value: val, isSet: true}
}

func (v NullableConnectionSamlUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionSamlUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


