// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// BagCreateRequestSchema defines model for BagCreateRequestSchema.
type BagCreateRequestSchema struct {
	// Destination Destination facility Id
	Destination string `json:"destination"`

	// IsContainerizable Defines whether container can be put into other containers or not.
	IsContainerizable *bool `json:"isContainerizable,omitempty"`

	// IsHazmat Represents whether this container can contain hazardous materials or not
	IsHazmat *bool `json:"isHazmat,omitempty"`

	// IsReusable Is the package reusable for some other order
	IsReusable *bool `json:"isReusable,omitempty"`

	// Origin Origination facility Id
	Origin     string `json:"origin"`
	TrackingId string `json:"trackingId"`
}

// CreatedResponseSchema defines model for CreatedResponseSchema.
type CreatedResponseSchema struct {
	DataSchema *DataSchema `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// DataSchema defines model for Data.
type DataSchema struct {
	Id *string `json:"id,omitempty"`
}

// DefaultResponseSchema defines model for DefaultResponseSchema.
type DefaultResponseSchema struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// ErrorSchema Error Information
type ErrorSchema struct {
	// AdditionalInfo Additional information related to the error
	AdditionalInfo *map[string]interface{} `json:"additionalInfo,omitempty"`

	// Description Error description
	Description string `json:"description"`
}

// PackageCreateRequestSchema defines model for PackageCreateRequestSchema.
type PackageCreateRequestSchema struct {
	// Destination Destination facility Id
	Destination string `json:"destination"`

	// IsContainerizable Defines whether container can be put into other containers or not.
	IsContainerizable *bool `json:"isContainerizable,omitempty"`

	// IsHazmat Represents whether this container can contain hazardous materials or not
	IsHazmat *bool `json:"isHazmat,omitempty"`

	// IsReusable Is the package reusable for some other order
	IsReusable *bool `json:"isReusable,omitempty"`

	// Origin Origination facility Id
	Origin     string `json:"origin"`
	TrackingId string `json:"trackingId"`
}

// RequestId defines model for RequestId.
type RequestId = string

// TenantId defines model for TenantId.
type TenantId = string

// CreatedResponse defines model for CreatedResponse.
type CreatedResponse = CreatedResponseSchema

// DefaultResponse defines model for DefaultResponse.
type DefaultResponse = DefaultResponseSchema

// GetBagResponse defines model for GetBagResponse.
type GetBagResponse struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// GetBagsResponse defines model for GetBagsResponse.
type GetBagsResponse struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// GetPackageResponse defines model for GetPackageResponse.
type GetPackageResponse struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// GetPackagesResponse defines model for GetPackagesResponse.
type GetPackagesResponse struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Error Error Information
	ErrorSchema *ErrorSchema `json:"error,omitempty"`
}

// BagCreateRequest defines model for BagCreateRequest.
type BagCreateRequest = BagCreateRequestSchema

// PackageCreateRequest defines model for PackageCreateRequest.
type PackageCreateRequest = PackageCreateRequestSchema

// GetBagsParams defines parameters for GetBags.
type GetBagsParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// CreateBagParams defines parameters for CreateBag.
type CreateBagParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// GetBagParams defines parameters for GetBag.
type GetBagParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// AddPackageToBagParams defines parameters for AddPackageToBag.
type AddPackageToBagParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// RemovePackageFromBagParams defines parameters for RemovePackageFromBag.
type RemovePackageFromBagParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// ChangeBagStateParams defines parameters for ChangeBagState.
type ChangeBagStateParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// CreatePackageParams defines parameters for CreatePackage.
type CreatePackageParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// GetPackageParams defines parameters for GetPackage.
type GetPackageParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// ChangePackageStateParams defines parameters for ChangePackageState.
type ChangePackageStateParams struct {
	// XCOREOSREQUESTID Unique request Id
	XCOREOSREQUESTID RequestId `json:"X-COREOS-REQUEST-ID"`

	// XCOREOSTENANTID Tenant Id
	XCOREOSTENANTID TenantId `json:"X-COREOS-TENANT-ID"`
}

// CreateBagJSONRequestBody defines body for CreateBag for application/json ContentType.
type CreateBagJSONRequestBody = BagCreateRequestSchema

// CreatePackageJSONRequestBody defines body for CreatePackage for application/json ContentType.
type CreatePackageJSONRequestBody = PackageCreateRequestSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of current configured bags
	// (GET /bags)
	GetBags(c *gin.Context, params GetBagsParams)
	// Create a new Bag
	// (POST /bags)
	CreateBag(c *gin.Context, params CreateBagParams)
	// Get properties of a configured Bag
	// (GET /bags/{bagId})
	GetBag(c *gin.Context, bagId string, params GetBagParams)
	// Bag composition operation
	// (POST /bags/{bagId}/add/{packageId})
	AddPackageToBag(c *gin.Context, bagId string, packageId string, params AddPackageToBagParams)
	// Bag composition operation
	// (POST /bags/{bagId}/remove/{packageId})
	RemovePackageFromBag(c *gin.Context, bagId string, packageId string, params RemovePackageFromBagParams)
	// Operation to perform on a package
	// (POST /bags/{bagId}/state/{command})
	ChangeBagState(c *gin.Context, bagId string, command string, params ChangeBagStateParams)
	// Get list of current configured Packages
	// (GET /packages)
	GetPackages(c *gin.Context, params GetPackagesParams)
	// Create a new Package
	// (POST /packages)
	CreatePackage(c *gin.Context, params CreatePackageParams)
	// Get properties of a configured Package
	// (GET /packages/{packageId})
	GetPackage(c *gin.Context, packageId string, params GetPackageParams)
	// Operation to perform on a package
	// (POST /packages/{packageId}/state/{command})
	ChangePackageState(c *gin.Context, packageId string, command string, params ChangePackageStateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBags operation middleware
func (siw *ServerInterfaceWrapper) GetBags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBagsParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBags(c, params)
}

// CreateBag operation middleware
func (siw *ServerInterfaceWrapper) CreateBag(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBagParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateBag(c, params)
}

// GetBag operation middleware
func (siw *ServerInterfaceWrapper) GetBag(c *gin.Context) {

	var err error

	// ------------- Path parameter "bagId" -------------
	var bagId string

	err = runtime.BindStyledParameter("simple", false, "bagId", c.Param("bagId"), &bagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bagId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBagParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBag(c, bagId, params)
}

// AddPackageToBag operation middleware
func (siw *ServerInterfaceWrapper) AddPackageToBag(c *gin.Context) {

	var err error

	// ------------- Path parameter "bagId" -------------
	var bagId string

	err = runtime.BindStyledParameter("simple", false, "bagId", c.Param("bagId"), &bagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bagId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameter("simple", false, "packageId", c.Param("packageId"), &packageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter packageId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddPackageToBagParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddPackageToBag(c, bagId, packageId, params)
}

// RemovePackageFromBag operation middleware
func (siw *ServerInterfaceWrapper) RemovePackageFromBag(c *gin.Context) {

	var err error

	// ------------- Path parameter "bagId" -------------
	var bagId string

	err = runtime.BindStyledParameter("simple", false, "bagId", c.Param("bagId"), &bagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bagId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameter("simple", false, "packageId", c.Param("packageId"), &packageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter packageId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RemovePackageFromBagParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemovePackageFromBag(c, bagId, packageId, params)
}

// ChangeBagState operation middleware
func (siw *ServerInterfaceWrapper) ChangeBagState(c *gin.Context) {

	var err error

	// ------------- Path parameter "bagId" -------------
	var bagId string

	err = runtime.BindStyledParameter("simple", false, "bagId", c.Param("bagId"), &bagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bagId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "command" -------------
	var command string

	err = runtime.BindStyledParameter("simple", false, "command", c.Param("command"), &command)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter command: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ChangeBagStateParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ChangeBagState(c, bagId, command, params)
}

// GetPackages operation middleware
func (siw *ServerInterfaceWrapper) GetPackages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPackages(c, params)
}

// CreatePackage operation middleware
func (siw *ServerInterfaceWrapper) CreatePackage(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePackageParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreatePackage(c, params)
}

// GetPackage operation middleware
func (siw *ServerInterfaceWrapper) GetPackage(c *gin.Context) {

	var err error

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameter("simple", false, "packageId", c.Param("packageId"), &packageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter packageId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPackage(c, packageId, params)
}

// ChangePackageState operation middleware
func (siw *ServerInterfaceWrapper) ChangePackageState(c *gin.Context) {

	var err error

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameter("simple", false, "packageId", c.Param("packageId"), &packageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter packageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "command" -------------
	var command string

	err = runtime.BindStyledParameter("simple", false, "command", c.Param("command"), &command)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter command: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ChangePackageStateParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-COREOS-REQUEST-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-REQUEST-ID")]; found {
		var XCOREOSREQUESTID RequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-REQUEST-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-REQUEST-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSREQUESTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-REQUEST-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSREQUESTID = XCOREOSREQUESTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-REQUEST-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-COREOS-TENANT-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-COREOS-TENANT-ID")]; found {
		var XCOREOSTENANTID TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-COREOS-TENANT-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-COREOS-TENANT-ID", runtime.ParamLocationHeader, valueList[0], &XCOREOSTENANTID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-COREOS-TENANT-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.XCOREOSTENANTID = XCOREOSTENANTID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-COREOS-TENANT-ID is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ChangePackageState(c, packageId, command, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bags", wrapper.GetBags)

	router.POST(options.BaseURL+"/bags", wrapper.CreateBag)

	router.GET(options.BaseURL+"/bags/:bagId", wrapper.GetBag)

	router.POST(options.BaseURL+"/bags/:bagId/add/:packageId", wrapper.AddPackageToBag)

	router.POST(options.BaseURL+"/bags/:bagId/remove/:packageId", wrapper.RemovePackageFromBag)

	router.POST(options.BaseURL+"/bags/:bagId/state/:command", wrapper.ChangeBagState)

	router.GET(options.BaseURL+"/packages", wrapper.GetPackages)

	router.POST(options.BaseURL+"/packages", wrapper.CreatePackage)

	router.GET(options.BaseURL+"/packages/:packageId", wrapper.GetPackage)

	router.POST(options.BaseURL+"/packages/:packageId/state/:command", wrapper.ChangePackageState)

	return router
}
