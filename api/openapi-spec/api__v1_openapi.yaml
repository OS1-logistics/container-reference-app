openapi: 3.0.1
info:
  title: Container API
  description: "**API documentation for Container service**"
  version: 1.0.0
servers:
  - url: http://{tenantSubdomain}/api/v1
    variables:
      tenantSubdomain:
        default: localhost:3000
        description: Subdomain assigned to the service
paths:
  /shipments:
    parameters:
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Shipments
      summary: Create a new Shipment
      description: |
        **API to create a shipment in the tenant's network.**
      operationId: createShipment
      requestBody:
        $ref: "#/components/requestBodies/ShipmentCreateRequest"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    get:
      tags:
        - Shipments
      parameters:
        - $ref: "#/components/parameters/Status"
      summary: Get list of current configured Shipments
      description: |
        **API to get all shipments.**
      operationId: getShipments
      responses:
        "200":
          $ref: "#/components/responses/GetShipmentsResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/reopen/{shipmentId}":
    description: Reopen a specific shipment
    parameters:
      - in: path
        name: shipmentId
        description: Unique Id of Shipment
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Shipments
      summary: Reopen a Discarded shipemnt
      description: |
        **API to reopen a shipment.**
      operationId: reopenShipment
      responses:
        "200":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/client/{shipmentId}":
    description: Shipment specific client container Id
    parameters:
      - in: path
        name: shipmentId
        description: Unique Id of Shipment
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Shipments
      summary: Update properties of a configured shipment
      description: |
        **API to update properties a configured shipment.**
      operationId: updateShipmentbyClient
      requestBody:
        $ref: "#/components/requestBodies/ShipmentUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/{shipmentId}":
    description: Shipment specific Id
    parameters:
      - in: path
        name: shipmentId
        description: Unique Id of Shipment
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Shipments
      summary: Get properties of a configured Shipment
      description: |
        **API to get properties a configured Shipment.**
      operationId: getShipment
      responses:
        "200":
          $ref: "#/components/responses/GetShipmentResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Shipments
      summary: Update properties of a configured shipment
      description: |
        **API to update properties a configured shipment.**
      operationId: updateShipment
      requestBody:
        $ref: "#/components/requestBodies/ShipmentUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/containerize/{containerId}/":
    parameters:
      - in: path
        name: containerId
        description: Unique Id of container.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Shipments
      description: Add or remove shipment from the bag
      summary: Add or remove a shipment from the bag
      operationId: containerize
      requestBody:
        $ref: "#/components/requestBodies/ContainerizationRequest"
      responses:
        "201":
          $ref: "#/components/responses/ChildContainerResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/{shipmentId}/state/":
    parameters:
      - in: path
        name: shipmentId
        description: Unique Id of Shipment.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Shipment State
      description: Get current state of the bag
      summary: Get current state of the bag
      operationId: getShipmentState
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/shipments/{shipmentId}/transition/state/":
    parameters:
      - in: path
        name: shipmentId
        description: Unique Id of Shipment.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Shipment State
      description: Update state of a bag
      summary: Seal(Close), Open or Discard a bag
      operationId: updateShipmentState
      requestBody:
        $ref: "#/components/requestBodies/ContainerStateUpdateRequest"
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateUpdateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /shipments/config/attributes:
    get:
      summary: Get list of Attributes
      description: |
        **API to get list of all attributes of a resource.**
      tags:
        - Shipments Attributes
      parameters:
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageOffset"
      operationId: getShipmentAttributes
      responses:
        "200":
          $ref: "#/components/responses/AttributesResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Shipments Attributes
      summary: Update details of a Attribute
      parameters:
        - $ref: "#/components/parameters/Type"
      description: >
        **API to update details of an attribute of a resource.**

         | Parameter | Description | Type | Validation |
         |------ | ------ |------|------|
         | ㅤ`description` |Updated description of the attribute.|string  | **minLength**: 0 **maxLength**: 256|
         | ㅤ`dataType`* | Data type | string  ||
         | ㅤ`defaultValue` | Default value of the attribute | string/boolean/int  ||
         | ㅤ`indexed` | | boolean  | **default**: false |
         | ㅤ↳`validation` | Validation rules for a string or number value.|
         |ㅤㅤㅤ↳`range` | Minimum & maximum values if the data type is number.<br>Minimum and maximum length if the data type is a string. | object  | **min**: number **max**: number |
         |ㅤㅤㅤ↳↳`min` | Minimum values if the data type is number.  | number | |
         |ㅤㅤㅤ↳↳`max` | Maximum values if the data type is number.  | number | |
         |ㅤㅤㅤ↳`regex` | Regex pattern that the string type data should match. | string  | **minLength**: 1 **maxLength**: 512 |
         |ㅤㅤㅤ↳`valueOneOf` | Enum of accepted values. | Enum  | **minItems**: 1 |
         |ㅤㅤㅤ↳`required` |Specifies whether the value is required or optional. | boolean  | **default**: false |

         **This is required.* <br />
         **Values Name, dataType, indexed cannot be changed via this route (permanent values)**
           <br><br>
      operationId: updateShipmentAttribute
      requestBody:
        $ref: "#/components/requestBodies/AttributeUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /shipments/config/state-machine:
    get:
      tags:
        - Shipments State Machine
      summary: Get the current State Machine of a particular resource
      description: |
        **API to get the current State Machine of a particular resource.**
      operationId: getShipmentStateTemplateConfig
      responses:
        "200":
          $ref: "#/components/responses/StateMachineConfigResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Shipments State Machine
      summary: Update the State Machine of a particular resource
      description: >
        **API to update the State Machine of a resource.**

         | Parameter | Description | Type | Validation |
         |------ | ------ |------|------|
         |`state_config`* | State Machine of the resource. | string | validated against ptp service
         **This is required.*
           <br><br>
      operationId: putShipmentStateTemplateConfig
      requestBody:
        $ref: "#/components/requestBodies/StateMachineUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/StateMachineConfigResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /bags:
    parameters:
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bags
      summary: Create a new Bag
      description: |
        **API to create a bag in the tenant's network.**
      operationId: createBag
      requestBody:
        $ref: "#/components/requestBodies/BagCreateRequest"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    get:
      tags:
        - Bags
      parameters:
        - $ref: "#/components/parameters/Status"
      summary: Get list of current configured Bags
      description: |
        **API to get all bags.**
      operationId: getBags
      responses:
        "200":
          $ref: "#/components/responses/GetBagsResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}":
    description: Bag specific Id
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Bags
      summary: Get properties of a configured Bag
      description: |
        **API to get properties a configured Bag.**
      operationId: getBag
      responses:
        "200":
          $ref: "#/components/responses/GetBagResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Bags
      summary: Update properties of a configured bag
      description: |
        **API to update properties a configured bag.**
      operationId: updateBag
      requestBody:
        $ref: "#/components/requestBodies/BagUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/state/":
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Bag State
      description: Get current state of the bag
      summary: Get current state of the bag
      operationId: getBagState
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/transition/state/":
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Bag State
      description: Update state of a bag
      summary: Seal(Close), Open or Discard a bag
      operationId: updateBagState
      requestBody:
        $ref: "#/components/requestBodies/ContainerStateUpdateRequest"
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateUpdateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/seal/":
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Bags
      description: Seal a bag
      summary: Seal(Close) a bag
      operationId: sealBag
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateUpdateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/unseal/":
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag.
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    put:
      tags:
        - Bags
      description: Unseal a bag
      summary: Unseal(Open) a bag
      operationId: unsealBag
      responses:
        "201":
          $ref: "#/components/responses/ContainerStateUpdateResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /bags/config/attributes:
    get:
      summary: Get list of Attributes
      description: |
        **API to get list of all attributes of a resource.**
      tags:
        - Bags Attributes
      parameters:
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageOffset"
      operationId: getAttributes
      responses:
        "200":
          $ref: "#/components/responses/AttributesResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Bags Attributes
      summary: Update details of a Attribute
      parameters:
        - $ref: "#/components/parameters/Type"
      description: >
        **API to update details of an attribute of a resource.**

         | Parameter | Description | Type | Validation |
         |------ | ------ |------|------|
         | ㅤ`description` |Updated description of the attribute.|string  | **minLength**: 0 **maxLength**: 256|
         | ㅤ`dataType`* | Data type | string  ||
         | ㅤ`defaultValue` | Default value of the attribute | string/boolean/int  ||
         | ㅤ`indexed` | | boolean  | **default**: false |
         | ㅤ↳`validation` | Validation rules for a string or number value.|
         |ㅤㅤㅤ↳`range` | Minimum & maximum values if the data type is number.<br>Minimum and maximum length if the data type is a string. | object  | **min**: number **max**: number |
         |ㅤㅤㅤ↳↳`min` | Minimum values if the data type is number.  | number | |
         |ㅤㅤㅤ↳↳`max` | Maximum values if the data type is number.  | number | |
         |ㅤㅤㅤ↳`regex` | Regex pattern that the string type data should match. | string  | **minLength**: 1 **maxLength**: 512 |
         |ㅤㅤㅤ↳`valueOneOf` | Enum of accepted values. | Enum  | **minItems**: 1 |
         |ㅤㅤㅤ↳`required` |Specifies whether the value is required or optional. | boolean  | **default**: false |

         **This is required.* <br />
         **Values Name, dataType, indexed cannot be changed via this route (permanent values)**
           <br><br>
      operationId: updateAttribute
      requestBody:
        $ref: "#/components/requestBodies/AttributeUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /bags/config/state-machine:
    get:
      tags:
        - Bags State Machine
      summary: Get the current state machine of a particular resource
      description: |
        **API to get the current state machine of a particular resource.**
      operationId: getStateTemplateConfig
      responses:
        "200":
          $ref: "#/components/responses/StateMachineConfigResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    put:
      tags:
        - Bags State Machine
      summary: Update the state machine of a particular resource
      description: >
        **API to update the State Machine of a resource.**

         | Parameter | Description | Type | Validation |
         |------ | ------ |------|------|
         |`state_config`* | State Machine of the resource. | string | validated against ptp service
         **This is required.*
           <br><br>
      operationId: putStateTemplateConfig
      requestBody:
        $ref: "#/components/requestBodies/StateMachineUpdateRequest"
      responses:
        "200":
          $ref: "#/components/responses/StateMachineConfigResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /bags/config/containerization/upload:
    parameters:
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bagging Config
      summary: Upload bagging config
      operationId: bagContainerization
      description: >
        Bagging config defines what destination bags can be created and what
        shipments can be put into the bag.


        **Request Body** : (Multipart/form-data) CSV Upload with the following format

        | Parameter          |   Description   |   Type            |   Validation  |

        |---                  |---              |---                |  ---          |

        | `bagType`*      | type of the bag  | string |  |

        | `bagIdentifier`*      | bag indentifier  | string |  |

        | `transitCenterOrigin`*   | Unique Code of origin transit center(facility) | string |  |

        | `transitCenterDestiation`*   | Unique Code of destination transit center(facility) | string | |

        | `bagDestination`*      | Destination of the Bag  | string |  |

        | `mot`*             | Mode of transport (service) between the two transit centers  | string | |

        | `sot`*            | Speed of transport (service) between the two transit center  | string | |

        | `productType`*      | Product type of the shipment  | string | enum ( p2p, h&s) |

        | `shipmentStatus`*      | status of the shipment  | string |  |

        | `sortCode`*      | sort code of the bag  | string |  |
      requestBody:
        $ref: "#/components/requestBodies/BaggingConfigUploadRequest"
      responses:
        "201":
          $ref: "#/components/responses/BaggingConfigUploadResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
components:
  schemas:
    Method:
      type: string
      description: HTTP method requested on the API endpoint
      enum:
        - POST
        - GET
        - PUT
    Request:
      type: object
      x-go-name: RequestSchema
      properties:
        uri:
          type: string
        queryString:
          type: string
        body:
          type: object
        method:
          $ref: "#/components/schemas/Method"
    Error:
      description: Error Information
      type: object
      x-go-name: ErrorSchema
      required:
        - code
        - description
      properties:
        code:
          type: string
          description: Error code
        description:
          type: string
          description: Error description
        additionalInfo:
          type: object
          description: Additional information related to the error
    BaggingConfigUploadData:
      type: object
      x-go-name: BaggingConfigUploadDataSchema
      properties:
        uploadedOn:
          type: string
          example: 8/10/2020 21:30
        uploadedBy:
          type: string
          example: username@tenant.com
        fileName:
          type: string
          example: bilaspurHub-20-01-2012.csv
        downloadURL:
          type: string
          example: https://s3.amazonaws.com/delhivery/bilaspurHub-20-01-2012.csv
        success:
          type: number
          example: 8232
          description: The number of rows successfully inserted
        failure:
          type: number
          example: 4
          description: The number of rows failed insert
        total:
          type: number
          example: 8236
          description: The number of rows present in uploaded file
    BaggingConfigUploadResponse:
      type: object
      x-go-name: BaggingConfigUploadResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        request:
          $ref: "#/components/schemas/Request"
        data:
          $ref: "#/components/schemas/BaggingConfigUploadData"
    BaggingConfigGetRequest:
      type: object
      x-go-name: BaggingConfigGetRequestSchema
      properties:
        transitCenterOrigin:
          type: string
          example: IND122004AAA
        transitCenterDestination:
          type: string
          example: IN206122A1B
        mot:
          type: string
          example: e
        sot:
          type: string
          example: D
        productType:
          type: string
          example: p2p
        shipmentStatus:
          type: string
          example: UD-RT-PU
    BaggingConfigGetData:
      type: object
      x-go-name: BaggingConfigGetDataSchema
      properties:
        baggingPossible:
          type: boolean
          example: true
    BaggingConfigGetResponse:
      type: object
      x-go-name: BaggingConfigGetResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        request:
          $ref: "#/components/schemas/Request"
        data:
          $ref: "#/components/schemas/BaggingConfigGetData"
    Data:
      type: object
      x-go-name: DataSchema
      properties:
        id:
          type: string
    CreatedResponse:
      type: object
      x-go-name: CreatedResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        request:
          $ref: "#/components/schemas/Request"
        data:
          $ref: "#/components/schemas/Data"
    DefaultResponse:
      type: object
      x-go-name: DefaultResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        request:
          $ref: "#/components/schemas/Request"
        data:
          type: object
    BagSystem:
      type: object
      x-go-name: BagSystemSchema
      properties:
        id:
          type: string
          example: bag:317221c7-831d-4fde-9ee4-13e7898c2485
        updatedAt:
          description: Timestamp of when the bag was last updated. Represents a date time
            as number of seconds elapsed since 00:00Hrs of 1st January 1970 UTC.
          type: integer
          example: 1257894000
        createdAt:
          description: Timestamp of when the bag was created. Represents a date time as
            number of seconds elapsed since 00:00Hrs of 1st January 1970 UTC.
          type: integer
          example: 1257894000
        currentLocation:
          type: string
          description: current location of the shipment
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        moveTogether:
          type: boolean
          default: false
          example: false
        ntc:
          type: string
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        status:
          type: string
          description: Status of the bag
          default: created:created
          example: created:created
        productType:
          type: string
          example: parcel
        shipmentFlow:
          type: string
          example: forward
        sot:
          type: string
          example: express
        mot:
          type: string
          example: surface
    BagReadOnly:
      type: object
      x-go-name: BagReadOnlySchema
      properties:
        originLocation:
          type: string
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        destination:
          type: string
          example: facility:5417812-831d-4fde-9ee4-13e7898c2485
    BagBase:
      type: object
      x-go-name: BagBaseSchema
    ContainerizationBase:
      type: object
      x-go-name: ContainerizationBaseSchema
      properties:
        parentId:
          description: Id of the parent container
          type: string
          example: bag:a452a8be-2d9a-11ec-8d3d-0242ac130003
        callBackUrl:
          description: Callback URL for async response
          type: string
          example: https://logistics.amazonaws.com/dev/
      required:
        - parentId
    ContainerStateUpdateRequest:
      description: Event for container state transition.
      x-go-name: ContainerStateUpdateRequestSchema
      allOf:
        - $ref: "#/components/schemas/Event"
    Event:
      type: object
      x-go-name: EventSchema        
      properties:
        eventCode:
          type: string
          description: Represents eventCode for state transition
        reasonCode:
          type: string
          description: Represents reasonCode for state transition
        data:
          type: object
          description: Represents event data values, if any, for this event
      required:
       - eventCode
       - reasonCode
       - data
    EventSource:
      type: object
      x-go-name: EventSourceSchema
      description: Represents the source which triggered the event. It can be an app,
        a user or some location from where the event was triggered.
      required:
        - appId
      properties:
        appId:
          type: string
          description: application Id which is responsible for calling this event.
          minLength: 1
          maxLength: 64
        userId:
          type: string
          description: user Id which is responsible for calling this event.
          minLength: 1
          maxLength: 64
        locId:
          type: string
          description: locationId of the event.
    ChildContainerResponse:
      type: object
      x-go-name: ChildContainerResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          type: object
          properties:
            id:
              type: string
              description: container id
            operation:
              $ref: "#/components/schemas/Child"
        request:
          $ref: "#/components/schemas/Request"
    Child:
      description: Specifies this request perform containerization or decontainerization.
      x-go-name: ChildSchema
      type: string
      enum:
        - CONTAINERIZE
        - DECONTAINERIZE
    ContainerStateResponse:
      type: object
      x-go-name: ContainerStateResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          $ref: "#/components/schemas/ContainerState"
        request:
          $ref: "#/components/schemas/Request"
    ContainerState:
      type: object
      x-go-name: ContainerStateSchema
      properties:
        id:
          type: string
          example: 123e4567-e89b-42d3-a456-556642440000
        state:
          $ref: "#/components/schemas/StateRepresentation"
        event:
          $ref: "#/components/schemas/Event"
        stateChange:
          type: boolean
          description: Describes if the state is changed.
        terminalTtl:
          type: integer
          description: Describes terminal ttl if the state is a terminal state
    BagCreateRequest:
      type: object
      x-go-name: BagCreateRequestSchema
      required:
        - type
        - name
        - dataType
        - defaultValue
        - origin
      allOf:
        - $ref: "#/components/schemas/BagReadOnly"
        - $ref: "#/components/schemas/BagBase"
    BagUpdateRequest:
      type: object
      x-go-name: BagUpdateRequestSchema
      allOf:
        - $ref: "#/components/schemas/BagBase"
    ContainerizationRequest:
      type: object
      x-go-name: ContainerizationRequestSchema
      allOf:
        - $ref: "#/components/schemas/ContainerizationBase"
    AttributesResponse:
      type: object
      x-go-name: AttributesResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          type: object
          properties:
            meta:
              type: object
              properties:
                totalElements:
                  type: integer
                  format: int64
            attributes:
              type: array
              items:
                type: object
    AttributeName:
      type: string
      x-go-name: AttributeNameSchema
      minLength: 1
      maxLength: 32
      pattern: ^[a-zA-Z]{1,32}$
      description: Name of the attribute
      example: MOT
    Description:
      type: string
      x-go-name: DescriptionSchema
      description: Description of the attribute
      minLength: 0
      maxLength: 256
      example: Mode of Transportation
    DataType:
      type: string
      x-go-name: DataTypeSchema
      description: Data Type of value of the attribute
      enum:
        - string
        - number
        - boolean
        - object
        - array
      example: string
    AttributeUpdate:
      type: object
      x-go-name: AttributeUpdateSchema
      required:
        - name
        - dataType
      properties:
        name:
          $ref: "#/components/schemas/AttributeName"
        description:
          $ref: "#/components/schemas/Description"
        dataType:
          $ref: "#/components/schemas/DataType"
        indexed:
          type: boolean
          default: false
        defaultValue:
          oneOf:
            - type: boolean
            - type: number
            - type: string
          example: true
        validation:
          $ref: "#/components/schemas/Validation"
    Validation:
      description: Validation rules for a string or number value
      x-go-name: ValidationSchema
      type: object
      properties:
        range:
          $ref: "#/components/schemas/Range"
        regex:
          description: Regex pattern that the string type data should match
          type: string
          minLength: 1
          maxLength: 512
          example: /^(0?[1-9]|1[0-2]):[0-5][0-9]$/
        valueOneOf:
          description: Enum of accepted values
          type: array
          items:
            type: string
            example:
              - Pickup center
              - Sortation center
              - Delivery center
              - Hub
          minItems: 1
        required:
          description: Specifies whether the value is required or optional
          type: boolean
          default: false
    Range:
      description: Minimum & maximum values if data type is number. Minimum and
        maximum length if data type is string
      type: object
      x-go-name: RangeSchema
      properties:
        min:
          type: number
          example: 0
        max:
          type: number
          example: 1000
    AttributeResponse:
      type: object
      x-go-name: AttributeResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          $ref: "#/components/schemas/AttributesResponseData"
        request:
          $ref: "#/components/schemas/Request"
    AttributeConfig:
      type: object
      x-go-name: AttributeConfigSchema
      required:
        - name
        - dataType
      properties:
        name:
          $ref: "#/components/schemas/AttributeName"
        description:
          $ref: "#/components/schemas/Description"
        dataType:
          $ref: "#/components/schemas/DataType"
        indexed:
          type: boolean
          default: false
        defaultValue:
          description: Default value of the attribute
          oneOf:
            - type: boolean
            - type: number
            - type: string
          example: true
        validation:
          $ref: "#/components/schemas/Validation"
        mapping:
          description: Mapping of the attribute with respect to ptp service
          type: string
          example: properties
    AttributesResponseData:
      x-go-name: AttributesResponseDataSchema
      allOf:
        - $ref: "#/components/schemas/AttributeConfig"
    SuccessResponse:
      x-go-name: SuccessResponseSchema
      allOf:
        - $ref: "#/components/schemas/Error"
    AttributeCreateRequest:
      description: Create an attribute
      x-go-name: AttributeCreateRequestSchema
      allOf:
        - $ref: "#/components/schemas/AttributeConfig"
    AttributeUpdateRequest:
      description: Update an attribute
      type: object
      x-go-name: AttributeUpdateRequestSchema
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeUpdate"
    StateMachineConfigResponse:
      type: object
      x-go-name: StateMachineConfigResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          $ref: "#/components/schemas/StateMachineConfigResponseData"
        request:
          $ref: "#/components/schemas/Request"
    StateMachineConfigResponseData:
      allOf:
        - $ref: "#/components/schemas/ContainerTypeBasicProperties"
        - $ref: "#/components/schemas/StateMachineConfig"
        - $ref: "#/components/schemas/ActionInfo"
    ActionInfo:
      type: object
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        createdAt:
          type: integer
          format: int64
        createdBy:
          $ref: "#/components/schemas/ActionBy"
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          $ref: "#/components/schemas/ActionBy"
    ActionBy:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 256
    ContainerTypeBasicProperties:
      type: object
      x-go-name: ContainerTypeBasicPropertiesSchema
      properties:
        id:
          type: string
        name:
          type: string
          example: bag
          pattern: ^[a-zA-Z]{1,16}$
    StateMachineConfig:
      description: Container type state-machine configuration
      type: object
      x-go-name: StateMachineConfigSchema
      required:
        - states
        - events
        - terminalTTL
      properties:
        events:
          type: array
          items:
            type: object
        terminalTTL:
          description: Represents time to live of an instance in transactional database
            after it has reached a terminal state.
          type: string
          pattern: ^(\d{0,2}(?:d\s*))?(\d{0,2}(?:h\s*))?(\d{0,2}(?:m\s*))?(\d{0,2}(?:s\s*))?$
          minLength: 2
          maxLength: 12
          example: 10d5h3m0s
    trackingDetail:
      type: object
      x-go-name: TrackingDetailSchema
      properties:
        operator:
          type: string
          example: Delhivery
        trackingId:
          type: string
          example: 132121232423232
        isPrimary:
          type: boolean
          example: false
    ShipmentSystem:
      type: object
      x-go-name: ShipmentSystemSchema
      properties:
        id:
          type: string
          example: shipment:317221c7-831d-4fde-9ee4-13e7898c2485
        updatedAt:
          description: Timestamp of when the shipment was last updated. Represents a date
            time as number of seconds elapsed since 00:00Hrs of 1st January 1970
            UTC.
          type: integer
          example: 1257894000
        createdAt:
          description: Timestamp of when the shipment was created. Represents a date time
            as number of seconds elapsed since 00:00Hrs of 1st January 1970 UTC.
          type: integer
          example: 1257894000
        state:
          type: string
          description: state of the shipment
          example: closed:intransit
        currentLocation:
          type: string
          description: current location of the shipment
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        moveTogether:
          type: boolean
          default: false
          example: false
        ntc:
          type: string
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        pdd:
          type: number
          example: 1257894000
        originLocation:
          type: string
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        destination:
          type: string
          example: facility:5417812-831d-4fde-9ee4-13e7898c2485
        productType:
          type: string
          example: parcel
        shipmentFlow:
          type: string
          example: forward
        sot:
          type: string
          example: express
        mot:
          type: string
          example: surface
        volume:
          type: number
          example: 10.2
        attemptCount:
          type: number
          example: 1
    ShipmentReadOnly:
      type: object
      x-go-name: ShipmentReadOnlySchema
      properties:
        lsId:
          type: string
          description: Ls id of the container
          example: ls:b0166a82-2d9a-11ec-8d3d-0242ac130003
        clientId:
          type: string
          example: b0166a82-2d9a-11ec-8d3d-0242ac130003
        clientContainerId:
          type: string
          example: AWB001234TY
        scanLocation:
          type: string
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        description:
          type: string
          example: Voltas AC
        dimensions:
          description: Size of the shipment
          type: object
          properties:
            length:
              type: number
              example: 42.3
            breadth:
              type: number
              example: 10.2
            height:
              type: number
              example: 70.8
            weight:
              description: Dead weight of the shipment
              type: number
              example: 0.3
        maxAttemptCount:
          type: number
          example: 2
        amount:
          type: object
          properties:
            minorUnit:
              type: number
              description: Minor unit of currency
              example: 2
            currencyCode:
              description: Country code
              type: string
              example: USD
            value:
              type: number
              example: 1645
      required:
        - lsId
        - clientContainerId
        - description
        - maxAttemptCount
        - amount
    ShipmentBase:
      type: object
      x-go-name: ShipmentBaseSchema
      properties:
        isHazmat:
          type: boolean
          description: Represents whether this container can contain hazardous materials
            or not
          default: false
        isContainerizable:
          type: boolean
          description: Defines whether container can be put into other containers or not.
          default: true
        attributes:
          $ref: "#/components/schemas/ShipmentReadOnly"
    ShipmentCore:
      type: object
      x-go-name: ShipmentCoreSchema
      properties:
        trackingDetails:
          type: array
          description: Status of the shipment
          items:
            $ref: "#/components/schemas/trackingDetail"
    ShipmentCreateRequest:
      type: object
      x-go-name: ShipmentCreateRequestSchema
      required:
        - attributes
      allOf:
        - $ref: "#/components/schemas/ShipmentCore"
        - $ref: "#/components/schemas/ShipmentBase"
    ShipmentUpdateRequest:
      type: object
      x-go-name: ShipmentUpdateRequestSchema
      properties:
        attributes:
          allOf:
            - $ref: "#/components/schemas/ShipmentCore"
            - $ref: "#/components/schemas/ShipmentBase"
        event: 
          allOf:
            - $ref: "#/components/schemas/Event"
    StateMachineUpdateRequestSchema:
      description: Update state machine config
      x-go-name: StateMachineUpdateRequestSchema
      allOf:
        - $ref: "#/components/schemas/StateMachineConfig"
    BaggingConfigUploadRequest:
      type: object
      properties:
        baggingconfig:
          type: string
          format: binary
          description: CSV file with bagging config details in the given format
    ContainerStateUpdateResponse:
      type: object
      x-go-name: ContainerStateUpdateResponseSchema
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          $ref: "#/components/schemas/ContainerChangeState"
        request:
          $ref: "#/components/schemas/Request"
    ContainerChangeState:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-42d3-a456-556642440000
        state:
          $ref: "#/components/schemas/StateRepresentation"
        callback:
          description: Represents callback url, which can be called to get any info about
            state change of a container and notify status(success/failed) of
            api.
          type: string
          pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)
    StateRepresentation:
      description: Represents state of the container.The value will of the format
        <state>:<substate>
      type: string
      minLength: 3
      maxLength: 64
      example: created:created
  parameters:
    PageSize:
      description: Number of items to return.
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
    PageOffset:
      description: Number of items to skip from start.
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    Status:
      description: Status of the bag to filter by.
      in: query
      name: status
      schema:
        type: string
      required: false
      example: active:intransit
    Type:
      description: Type of the bag to filter by.
      in: query
      name: type
      schema:
        type: string
        enum:
          - shipment
          - bag
      required: false
      example: shipment
    RequestId:
      description: Unique request Id
      in: header
      name: X-COREOS-REQUEST-ID
      schema:
        type: string
      required: true
    TenantId:
      description: Tenant Id
      in: header
      name: X-COREOS-TENANT-ID
      schema:
        type: string
      required: true
  requestBodies:
    AttributeCreateRequest:
      description: Create new Attribute
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeCreateRequest"
    AttributeUpdateRequest:
      description: Update Attribute
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeUpdateRequest"
    BagCreateRequest:
      description: Request consisting config of a new bag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BagCreateRequest"
    BagUpdateRequest:
      description: ContainerUpdateRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BagUpdateRequest"
    ContainerizationRequest:
      description: ContainerizationRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerizationRequest"
    ContainerStateUpdateRequest:
      description: Event for container state transition.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerStateUpdateRequest"
    StateMachineUpdateRequest:
      description: Update bag type state machine
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StateMachineUpdateRequestSchema"
    BaggingConfigUploadRequest:
      description: Request Parameters for uploading a csv file with the bagging config
        details
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/BaggingConfigUploadRequest"
    BaggingConfigGetRequest:
      description: Request Parameters for getting a bagging possiblity of a shipemnt
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaggingConfigGetRequest"
    ShipmentCreateRequest:
      description: Request consisting config of a new shipment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShipmentCreateRequest"
    ShipmentUpdateRequest:
      description: ContainerUpdateRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShipmentUpdateRequest"
  responses:
    CreatedResponse:
      description: Default Success Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatedResponse"
    DefaultResponse:
      description: Default Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponse"
    GetBagResponse:
      description: Get Container Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
                allOf:
                  - $ref: "#/components/schemas/BagSystem"
                  - $ref: "#/components/schemas/BagReadOnly"
                  - $ref: "#/components/schemas/BagBase"
              request:
                $ref: "#/components/schemas/Request"
    GetBagsResponse:
      description: Get Bags Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                properties:
                  meta:
                    type: object
                    properties:
                      totalElements:
                        type: number
                  bags:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/BagSystem"
                        - $ref: "#/components/schemas/BagReadOnly"
                        - $ref: "#/components/schemas/BagBase"
              request:
                $ref: "#/components/schemas/Request"
    AttributesResponse:
      description: Attributes
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributesResponse"
    AttributeResponse:
      description: Attribute
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeResponse"
    SuccessResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponse"
    StateMachineConfigResponse:
      description: State Machine
      headers:
        X-COREOS-REQUEST-ID:
          schema:
            type: string
          description: Unique request id that was passed as header parameter in the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StateMachineConfigResponse"
    GetShipmentResponse:
      description: Get Container Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ShipmentCore"
                  - $ref: "#/components/schemas/ShipmentBase"
              request:
                $ref: "#/components/schemas/Request"
    GetShipmentsResponse:
      description: Get Shipments Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                properties:
                  meta:
                    type: object
                    properties:
                      totalElements:
                        type: number
                  shipments:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/ShipmentCore"
                        - $ref: "#/components/schemas/ShipmentBase"
              request:
                $ref: "#/components/schemas/Request"
    BaggingConfigUploadResponse:
      description: Default success response obtained when file is uploaded
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaggingConfigUploadResponse"
    BaggingConfigGetResponse:
      description: Default get response for fetching network details
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaggingConfigGetResponse"
    ContainerStateUpdateResponse:
      description: Container state update
      headers:
        X-COREOS-REQUEST-ID:
          schema:
            type: string
          description: Unique request id that was passed as header parameter in the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerStateUpdateResponse"
    ChildContainerResponse:
      description: Containerization or decontainerization
      headers:
        X-COREOS-REQUEST-ID:
          schema:
            type: string
          description: Unique request id that was passed as header parameter in the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ChildContainerResponse"
    ContainerStateResponse:
      description: container State
      headers:
        X-COREOS-REQUEST-ID:
          schema:
            type: string
          description: Unique request id that was passed as header parameter in the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerStateResponse"