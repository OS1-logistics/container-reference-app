openapi: 3.0.3
info:
  title: Container API
  description: "**API documentation for Container service**"
  version: 1.0.0
servers:
  - url: http://{tenantSubdomain}/api/v1
    variables:
      tenantSubdomain:
        default: localhost:3000
        description: Subdomain assigned to the service
paths:
  /packages:
    parameters:
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Packages
      summary: Create a new Package
      description: >
        API to create a package in the tenant's network
      operationId: createPackage
      requestBody:
        $ref: "#/components/requestBodies/PackageCreateRequest"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    get:
      tags:
        - Packages
      summary: Get list of current configured Packages
      description: >
        API to get all packages
      operationId: getPackages
      responses:
        "200":
          $ref: "#/components/responses/GetPackagesResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/packages/{packageId}":
    parameters:
      - in: path
        name: packageId
        description: Unique Id of Package
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Packages
      summary: Get properties of a configured Package
      description: >
        API to get properties a configured Package
      operationId: getPackage
      responses:
        "200":
          $ref: "#/components/responses/GetPackageResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/packages/{packageId}/state/{command}":
    parameters:
      - in: path
        name: packageId
        description: Unique Id of Package
        schema:
          type: string
        required: true
      - in: path
        name: command
        description: operation to perform on the packag. eg. open, close, dispach
        schema:
          type: string
          enum:
            - open
            - close
            - complete
            - dead
        required: true
        example: open
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Package Operations
      summary: Operation to perform on a package
      description: >
        API to open, close a package
      operationId: changePackageState
      responses:
        default:
          $ref: "#/components/responses/DefaultResponse"
  /bags:
    parameters:
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bags
      summary: Create a new Bag
      description: >
        API to create a bag in the tenant's network
      operationId: createBag
      requestBody:
        $ref: "#/components/requestBodies/BagCreateRequest"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
    get:
      tags:
        - Bags
      summary: Get list of current configured bags
      description: >
        API to get all bags
      operationId: getBags
      responses:
        "200":
          $ref: "#/components/responses/GetBagsResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}":
    description: Bag specific Id
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    get:
      tags:
        - Bags
      summary: Get properties of a configured Bag
      description: >
        API to get properties a configured Bag
      operationId: getBag
      responses:
        "200":
          $ref: "#/components/responses/GetBagResponse"
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/state/{command}":
    description: Bag Id
    parameters:
      - in: path
        name: bagId
        description: Unique Id of Bag
        schema:
          type: string
        required: true
      - in: path
        name: command
        description: operation to perform on the bag. eg. open, close, dispach
        schema:
          type: string
          enum:
            - open
            - close
            - complete
            - dead
        required: true
        example: open
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bag Operations
      summary: Operation to perform on a package
      description: >
        API to open, close a bag
      operationId: changeBagState
      responses:
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/add/{packageId}":
    parameters:
      - in: path
        name: bagId
        description: bag identifier
        schema:
          type: string
        required: true
      - in: path
        name: packageId
        description: Unique Id of Package
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bag Operations
      summary: Bag composition operation
      description: >
        API to add a package to a bag
      operationId: addPackageToBag
      responses:
        default:
          $ref: "#/components/responses/DefaultResponse"
  "/bags/{bagId}/remove/{packageId}":
    parameters:
      - in: path
        name: bagId
        description: bag identifier
        schema:
          type: string
        required: true
      - in: path
        name: packageId
        description: Unique Id of Package
        schema:
          type: string
        required: true
      - $ref: "#/components/parameters/RequestId"
      - $ref: "#/components/parameters/TenantId"
    post:
      tags:
        - Bag Operations
      summary: Bag composition operation
      description: >
        API to remove a package from a bag
      operationId: removePackageFromBag
      responses:
        default:
          $ref: "#/components/responses/DefaultResponse"
components:
  schemas:
    Error:
      description: Error Information
      type: object
      x-go-name: ErrorSchema
      required:
        - description
      properties:
        description:
          type: string
          description: Error description
        additionalInfo:
          type: object
          description: Additional information related to the error
    Data:
      type: object
      x-go-name: DataSchema
      properties:
        id:
          type: string
    CreatedResponseSchema:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          $ref: "#/components/schemas/Data"
    DefaultResponseSchema:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          type: object
    TrackingDetailSchema:
      type: object
      x-go-name: TrackingDetailSchema
      properties:
        operator:
          type: string
          example: Delhivery
        trackingId:
          type: string
          example: 132121232423232
        isPrimary:
          type: boolean
          example: false
    PackageCreateRequestSchema:
      type: object
      properties:
        trackingId:
          type: string
          example: TR223433WD
        origin:
          type: string
          description: Origination facility Id
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        destination:
          type: string
          description: Destination facility Id
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        isReusable:
          type: boolean
          description: Is the package reusable for some other order
          default: false
        isHazmat:
          type: boolean
          description:
            Represents whether this container can contain hazardous materials
            or not
          default: false
      required:
        - trackingId
        - origin
        - destination
    BagCreateRequestSchema:
      type: object
      properties:
        trackingId:
          type: string
          example: TR223433WD
        origin:
          type: string
          description: Origination facility Id
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        destination:
          type: string
          description: Destination facility Id
          example: facility:317221c7-831d-4fde-9ee4-13e7898c2485
        isReusable:
          type: boolean
          description: Is the package reusable for some other order
          default: false
        isHazmat:
          type: boolean
          description:
            Represents whether this container can contain hazardous materials
            or not
          default: false
      required:
        - trackingId
        - origin
        - destination
  parameters:
    Status:
      description: Status of the package to filter by.
      in: query
      name: status
      schema:
        type: string
      required: false
      example: active:created
    RequestId:
      description: Unique request Id
      in: header
      name: X-COREOS-REQUEST-ID
      schema:
        type: string
      required: true
    TenantId:
      description: Tenant Id
      in: header
      name: X-COREOS-TENANT-ID
      schema:
        type: string
      required: true
  requestBodies:
    PackageCreateRequest:
      description: Request consisting attributes to create a new package
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PackageCreateRequestSchema"
    BagCreateRequest:
      description: Request consisting attributes to create a new bag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BagCreateRequestSchema"
  responses:
    CreatedResponse:
      description: Default Success Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatedResponseSchema"
    DefaultResponse:
      description: Default Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponseSchema"
    GetPackageResponse:
      description: Get Package Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
    GetPackagesResponse:
      description: Get Packages Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
    GetBagsResponse:
      description: Get Bag Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
    GetBagResponse:
      description: Get Bag Response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
              data:
                type: object
